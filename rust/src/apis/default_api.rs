/*
 * スマレジ
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};

/// struct for passing parameters to the method `create_customers`
#[derive(Clone, Debug)]
pub struct CreateCustomersParams {
    /// 契約id
    pub contract_id: String,
    pub create_customers: Option<crate::models::CreateCustomers>
}

/// struct for passing parameters to the method `delete_coupons`
#[derive(Clone, Debug)]
pub struct DeleteCouponsParams {
    /// 契約id
    pub contract_id: String,
    /// クーポンid
    pub coupon_id: String
}

/// struct for passing parameters to the method `get_coupons`
#[derive(Clone, Debug)]
pub struct GetCouponsParams {
    /// 契約id
    pub contract_id: String
}

/// struct for passing parameters to the method `get_customer_point_list`
#[derive(Clone, Debug)]
pub struct GetCustomerPointListParams {
    /// 契約id
    pub contract_id: String,
    /// 一度に返すアイテム数 (上限 1000)
    pub limit: Option<i32>,
    /// ページ
    pub page: Option<i32>,
    /// 顧客id
    pub customer_id: Option<String>
}

/// struct for passing parameters to the method `get_customers`
#[derive(Clone, Debug)]
pub struct GetCustomersParams {
    /// 契約id
    pub contract_id: String,
    /// 一度に返すアイテム数 (上限 1000)
    pub limit: Option<i32>,
    /// ページ
    pub page: Option<i32>,
    /// 顧客コード
    pub customer_code: Option<String>
}

/// struct for passing parameters to the method `get_layaway_by_id`
#[derive(Clone, Debug)]
pub struct GetLayawayByIdParams {
    /// 契約id
    pub contract_id: String,
    pub layaway_id: String,
    /// 取引明細情報を付加するか(全項目付加する場合はall, 一部項目を付加する場合はsummary, しない場合はnone)
    pub with_details: Option<crate::models::WithDetails>,
    /// 店舗情報を付加するか(付加する場合はall, しない場合はnone)
    pub with_store: Option<crate::models::WithEnum>,
    /// 会員情報を付加するか(付加する場合はall, しない場合はnone)
    pub with_customer: Option<crate::models::WithEnum>
}

/// struct for passing parameters to the method `get_layaway_list`
#[derive(Clone, Debug)]
pub struct GetLayawayListParams {
    /// 契約id
    pub contract_id: String,
    /// 締め日 [YYYY-MM-DD]
    pub sum_date: Option<String>,
    /// 取置き情報を付加するか(付加する場合はall, しない場合はnone)
    pub with_layaway: Option<crate::models::WithEnum>
}

/// struct for passing parameters to the method `get_stores`
#[derive(Clone, Debug)]
pub struct GetStoresParams {
    /// 契約id
    pub contract_id: String,
    /// 一度に返すアイテム数 (上限 1000)
    pub limit: Option<i32>,
    /// ポイント情報を付加するか(付加する場合はall, しない場合はnone)
    pub with_point_condition: Option<crate::models::WithEnum>
}

/// struct for passing parameters to the method `get_transaction`
#[derive(Clone, Debug)]
pub struct GetTransactionParams {
    /// 契約id
    pub contract_id: String,
    /// 締め日 [YYYY-MM-DD]
    pub sum_date: Option<String>,
    /// 取置き情報を付加するか(付加する場合はall, しない場合はnone)
    pub with_layaway: Option<crate::models::WithEnum>,
    /// 一度に返すアイテム数 (上限 1000)
    pub limit: Option<i32>,
    /// ページ
    pub page: Option<i32>,
    /// 更新日時(To)：登録時・更新時の日時。[YYYY-MM-DDThh:mm:ssTZD]
    pub upd_date_time_to: Option<String>,
    /// 更新日時(From)：登録時・更新時の日時。[YYYY-MM-DDThh:mm:ssTZD]
    pub upd_date_time_from: Option<String>,
    /// 会員コード
    pub customer_code: Option<String>,
    pub transaction_head_division: Option<crate::models::TransactionHeadDivision>,
    pub sort: Option<crate::models::Sort>,
    /// 端末取引日時(From)：端末で設定された取引日時。[YYYY-MM-DDThh:mm:ssTZD]
    pub terminal_tran_date_time_from: Option<String>,
    /// 端末取引日時(To)：端末で設定された取引日時。[YYYY-MM-DDThh:mm:ssTZD]
    pub terminal_tran_date_time_to: Option<String>
}

/// struct for passing parameters to the method `get_transaction_id`
#[derive(Clone, Debug)]
pub struct GetTransactionIdParams {
    /// 契約id
    pub contract_id: String,
    /// 取引id
    pub transaction_id: String,
    /// クーポン情報を付加するか(付加する場合はall, しない場合はnone)
    pub with_coupons: Option<crate::models::WithEnum>,
    /// 取引明細情報を付加するか(全項目付加する場合はall, 一部項目を付加する場合はsummary, しない場合はnone)
    pub with_details: Option<crate::models::WithDetails>,
    /// 店舗情報を付加するか(付加する場合はall, しない場合はnone)
    pub with_store: Option<crate::models::WithEnum>,
    /// 会員情報を付加するか(付加する場合はall, しない場合はnone)
    pub with_customer: Option<crate::models::WithEnum>
}

/// struct for passing parameters to the method `post_create_coupons`
#[derive(Clone, Debug)]
pub struct PostCreateCouponsParams {
    /// 契約id
    pub contract_id: String,
    pub post_create_coupons: crate::models::PostCreateCoupons
}

/// struct for passing parameters to the method `update_customer_point`
#[derive(Clone, Debug)]
pub struct UpdateCustomerPointParams {
    /// 契約id
    pub contract_id: String,
    /// 顧客id
    pub customer_id: String,
    pub update_customer_point_request: Option<crate::models::UpdateCustomerPointRequest>
}

/// struct for passing parameters to the method `update_customer_point_relative`
#[derive(Clone, Debug)]
pub struct UpdateCustomerPointRelativeParams {
    /// 契約id
    pub contract_id: String,
    /// 顧客id
    pub customer_id: String,
    pub update_customer_point_request: Option<crate::models::UpdateCustomerPointRequest>
}

/// struct for passing parameters to the method `update_customers`
#[derive(Clone, Debug)]
pub struct UpdateCustomersParams {
    /// 契約id
    pub contract_id: String,
    /// 顧客id
    pub customer_id: String,
    pub patch_customers: Option<crate::models::PatchCustomers>
}

/// struct for passing parameters to the method `update_store`
#[derive(Clone, Debug)]
pub struct UpdateStoreParams {
    /// 契約id
    pub contract_id: String,
    /// 店舗id
    pub store_id: String,
    pub update_store_request: Option<crate::models::UpdateStoreRequest>
}


/// struct for typed errors of method `create_customers`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateCustomersError {
    Status400(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `delete_coupons`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DeleteCouponsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_coupons`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCouponsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_customer_point_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomerPointListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_customers`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCustomersError {
    Status400(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_layaway_by_id`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLayawayByIdError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_layaway_list`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetLayawayListError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_stores`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetStoresError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_transaction`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTransactionError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `get_transaction_id`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetTransactionIdError {
    Status404(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `post_create_coupons`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PostCreateCouponsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `update_customer_point`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateCustomerPointError {
    Status404(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `update_customer_point_relative`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateCustomerPointRelativeError {
    Status400(crate::models::Error),
    Status404(crate::models::Error),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `update_customers`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateCustomersError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method `update_store`
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateStoreError {
    Status400(crate::models::Error),
    Status403(crate::models::Error),
    Status404(crate::models::Error),
    UnknownValue(serde_json::Value),
}


pub async fn create_customers(configuration: &configuration::Configuration, params: CreateCustomersParams) -> Result<crate::models::CustomersResponseOfCreate, Error<CreateCustomersError>> {
    // unbox the parameters
    let contract_id = params.contract_id;
    let create_customers = params.create_customers;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/{contract_id}/pos/customers", configuration.base_path, contract_id=crate::apis::urlencode(contract_id));
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&create_customers);

    let local_var_req = local_var_req_builder.build()?;
    info!("{}", local_var_req.url().as_str());
    if let Some(Some(body)) = local_var_req.body().map(|b| b.as_bytes()) {
        info!("{}", std::str::from_utf8(body).unwrap_or_default());
    }
    if let Some(q) = local_var_req.url().query() {
        info!("{}", q);
    }

    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;
    info!("{}", &local_var_content);

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CreateCustomersError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 指定されたクーポンを削除します。 
pub async fn delete_coupons(configuration: &configuration::Configuration, params: DeleteCouponsParams) -> Result<(), Error<DeleteCouponsError>> {
    // unbox the parameters
    let contract_id = params.contract_id;
    let coupon_id = params.coupon_id;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/{contract_id}/pos/coupons/{coupon_id}", configuration.base_path, contract_id=crate::apis::urlencode(contract_id), coupon_id=crate::apis::urlencode(coupon_id));
    let mut local_var_req_builder = local_var_client.delete(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    info!("{}", local_var_req.url().as_str());
    if let Some(Some(body)) = local_var_req.body().map(|b| b.as_bytes()) {
        info!("{}", std::str::from_utf8(body).unwrap_or_default());
    }
    if let Some(q) = local_var_req.url().query() {
        info!("{}", q);
    }

    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;
    info!("{}", &local_var_content);

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DeleteCouponsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// クーポンの一覧を取得します。
pub async fn get_coupons(configuration: &configuration::Configuration, params: GetCouponsParams) -> Result<Vec<crate::models::Coupon>, Error<GetCouponsError>> {
    // unbox the parameters
    let contract_id = params.contract_id;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/{contract_id}/pos/coupons", configuration.base_path, contract_id=crate::apis::urlencode(contract_id));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    info!("{}", local_var_req.url().as_str());
    if let Some(Some(body)) = local_var_req.body().map(|b| b.as_bytes()) {
        info!("{}", std::str::from_utf8(body).unwrap_or_default());
    }
    if let Some(q) = local_var_req.url().query() {
        info!("{}", q);
    }

    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;
    info!("{}", &local_var_content);

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCouponsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 会員ポイント情報一覧を取得します。 参照にあたりポイント有効期限を参照し、ポイント残高がありかつ期限が切れていれば期限切れ分のポイント失効処理を行ってから返します。
pub async fn get_customer_point_list(configuration: &configuration::Configuration, params: GetCustomerPointListParams) -> Result<Vec<crate::models::GetCustomerPointListItem>, Error<GetCustomerPointListError>> {
    // unbox the parameters
    let contract_id = params.contract_id;
    let limit = params.limit;
    let page = params.page;
    let customer_id = params.customer_id;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/{contract_id}/pos/customers/point", configuration.base_path, contract_id=crate::apis::urlencode(contract_id));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = customer_id {
        local_var_req_builder = local_var_req_builder.query(&[("customer_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    info!("{}", local_var_req.url().as_str());
    if let Some(Some(body)) = local_var_req.body().map(|b| b.as_bytes()) {
        info!("{}", std::str::from_utf8(body).unwrap_or_default());
    }
    if let Some(q) = local_var_req.url().query() {
        info!("{}", q);
    }

    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;
    info!("{}", &local_var_content);

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCustomerPointListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_customers(configuration: &configuration::Configuration, params: GetCustomersParams) -> Result<Vec<crate::models::GetCustomersItem>, Error<GetCustomersError>> {
    // unbox the parameters
    let contract_id = params.contract_id;
    let limit = params.limit;
    let page = params.page;
    let customer_code = params.customer_code;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/{contract_id}/pos/customers", configuration.base_path, contract_id=crate::apis::urlencode(contract_id));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = customer_code {
        local_var_req_builder = local_var_req_builder.query(&[("customer_code", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    info!("{}", local_var_req.url().as_str());
    if let Some(Some(body)) = local_var_req.body().map(|b| b.as_bytes()) {
        info!("{}", std::str::from_utf8(body).unwrap_or_default());
    }
    if let Some(q) = local_var_req.url().query() {
        info!("{}", q);
    }

    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;
    info!("{}", &local_var_content);

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCustomersError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_layaway_by_id(configuration: &configuration::Configuration, params: GetLayawayByIdParams) -> Result<crate::models::GetLayawayById, Error<GetLayawayByIdError>> {
    // unbox the parameters
    let contract_id = params.contract_id;
    let layaway_id = params.layaway_id;
    let with_details = params.with_details;
    let with_store = params.with_store;
    let with_customer = params.with_customer;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/{contract_id}/pos/transactions/layaways/{layaway_id}", configuration.base_path, contract_id=crate::apis::urlencode(contract_id), layaway_id=crate::apis::urlencode(layaway_id));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = with_details {
        local_var_req_builder = local_var_req_builder.query(&[("with_details", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = with_store {
        local_var_req_builder = local_var_req_builder.query(&[("with_store", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = with_customer {
        local_var_req_builder = local_var_req_builder.query(&[("with_customer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    info!("{}", local_var_req.url().as_str());
    if let Some(Some(body)) = local_var_req.body().map(|b| b.as_bytes()) {
        info!("{}", std::str::from_utf8(body).unwrap_or_default());
    }
    if let Some(q) = local_var_req.url().query() {
        info!("{}", q);
    }

    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;
    info!("{}", &local_var_content);

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetLayawayByIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_layaway_list(configuration: &configuration::Configuration, params: GetLayawayListParams) -> Result<Vec<crate::models::GetLayawayListItem>, Error<GetLayawayListError>> {
    // unbox the parameters
    let contract_id = params.contract_id;
    let sum_date = params.sum_date;
    let with_layaway = params.with_layaway;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/{contract_id}/pos/transactions/layaways", configuration.base_path, contract_id=crate::apis::urlencode(contract_id));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = sum_date {
        local_var_req_builder = local_var_req_builder.query(&[("sum_date", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = with_layaway {
        local_var_req_builder = local_var_req_builder.query(&[("with_layaway", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    info!("{}", local_var_req.url().as_str());
    if let Some(Some(body)) = local_var_req.body().map(|b| b.as_bytes()) {
        info!("{}", std::str::from_utf8(body).unwrap_or_default());
    }
    if let Some(q) = local_var_req.url().query() {
        info!("{}", q);
    }

    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;
    info!("{}", &local_var_content);

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetLayawayListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 店舗情報一覧を取得します。 
pub async fn get_stores(configuration: &configuration::Configuration, params: GetStoresParams) -> Result<Vec<crate::models::GetStoresResponseItem>, Error<GetStoresError>> {
    // unbox the parameters
    let contract_id = params.contract_id;
    let limit = params.limit;
    let with_point_condition = params.with_point_condition;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/{contract_id}/pos/stores", configuration.base_path, contract_id=crate::apis::urlencode(contract_id));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = with_point_condition {
        local_var_req_builder = local_var_req_builder.query(&[("with_point_condition", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    info!("{}", local_var_req.url().as_str());
    if let Some(Some(body)) = local_var_req.body().map(|b| b.as_bytes()) {
        info!("{}", std::str::from_utf8(body).unwrap_or_default());
    }
    if let Some(q) = local_var_req.url().query() {
        info!("{}", q);
    }

    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;
    info!("{}", &local_var_content);

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetStoresError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_transaction(configuration: &configuration::Configuration, params: GetTransactionParams) -> Result<Vec<crate::models::GetTransactionItem>, Error<GetTransactionError>> {
    // unbox the parameters
    let contract_id = params.contract_id;
    let sum_date = params.sum_date;
    let with_layaway = params.with_layaway;
    let limit = params.limit;
    let page = params.page;
    let upd_date_time_to = params.upd_date_time_to;
    let upd_date_time_from = params.upd_date_time_from;
    let customer_code = params.customer_code;
    let transaction_head_division = params.transaction_head_division;
    let sort = params.sort;
    let terminal_tran_date_time_from = params.terminal_tran_date_time_from;
    let terminal_tran_date_time_to = params.terminal_tran_date_time_to;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/{contract_id}/pos/transactions", configuration.base_path, contract_id=crate::apis::urlencode(contract_id));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = sum_date {
        local_var_req_builder = local_var_req_builder.query(&[("sum_date", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = with_layaway {
        local_var_req_builder = local_var_req_builder.query(&[("with_layaway", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page {
        local_var_req_builder = local_var_req_builder.query(&[("page", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = upd_date_time_to {
        local_var_req_builder = local_var_req_builder.query(&[("upd_date_time-to", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = upd_date_time_from {
        local_var_req_builder = local_var_req_builder.query(&[("upd_date_time-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = customer_code {
        local_var_req_builder = local_var_req_builder.query(&[("customer_code", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = transaction_head_division {
        local_var_req_builder = local_var_req_builder.query(&[("transaction_head_division", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort {
        local_var_req_builder = local_var_req_builder.query(&[("sort", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = terminal_tran_date_time_from {
        local_var_req_builder = local_var_req_builder.query(&[("terminal_tran_date_time-from", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = terminal_tran_date_time_to {
        local_var_req_builder = local_var_req_builder.query(&[("terminal_tran_date_time-to", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    info!("{}", local_var_req.url().as_str());
    if let Some(Some(body)) = local_var_req.body().map(|b| b.as_bytes()) {
        info!("{}", std::str::from_utf8(body).unwrap_or_default());
    }
    if let Some(q) = local_var_req.url().query() {
        info!("{}", q);
    }

    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;
    info!("{}", &local_var_content);

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetTransactionError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_transaction_id(configuration: &configuration::Configuration, params: GetTransactionIdParams) -> Result<crate::models::GetTransactionId, Error<GetTransactionIdError>> {
    // unbox the parameters
    let contract_id = params.contract_id;
    let transaction_id = params.transaction_id;
    let with_coupons = params.with_coupons;
    let with_details = params.with_details;
    let with_store = params.with_store;
    let with_customer = params.with_customer;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/{contract_id}/pos/transactions/{transaction_id}", configuration.base_path, contract_id=crate::apis::urlencode(contract_id), transaction_id=crate::apis::urlencode(transaction_id));
    let mut local_var_req_builder = local_var_client.get(local_var_uri_str.as_str());

    if let Some(ref local_var_str) = with_coupons {
        local_var_req_builder = local_var_req_builder.query(&[("with_coupons", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = with_details {
        local_var_req_builder = local_var_req_builder.query(&[("with_details", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = with_store {
        local_var_req_builder = local_var_req_builder.query(&[("with_store", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = with_customer {
        local_var_req_builder = local_var_req_builder.query(&[("with_customer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    info!("{}", local_var_req.url().as_str());
    if let Some(Some(body)) = local_var_req.body().map(|b| b.as_bytes()) {
        info!("{}", std::str::from_utf8(body).unwrap_or_default());
    }
    if let Some(q) = local_var_req.url().query() {
        info!("{}", q);
    }

    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;
    info!("{}", &local_var_content);

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetTransactionIdError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// クーポンを登録します。 
pub async fn post_create_coupons(configuration: &configuration::Configuration, params: PostCreateCouponsParams) -> Result<crate::models::Coupon, Error<PostCreateCouponsError>> {
    // unbox the parameters
    let contract_id = params.contract_id;
    let post_create_coupons = params.post_create_coupons;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/{contract_id}/pos/coupons", configuration.base_path, contract_id=crate::apis::urlencode(contract_id));
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&post_create_coupons);

    let local_var_req = local_var_req_builder.build()?;
    info!("{}", local_var_req.url().as_str());
    if let Some(Some(body)) = local_var_req.body().map(|b| b.as_bytes()) {
        info!("{}", std::str::from_utf8(body).unwrap_or_default());
    }
    if let Some(q) = local_var_req.url().query() {
        info!("{}", q);
    }

    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;
    info!("{}", &local_var_content);

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PostCreateCouponsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 会員ポイント情報を更新します。 ポイントおよびマイルは、入力された値と同じになるよう更新します。
pub async fn update_customer_point(configuration: &configuration::Configuration, params: UpdateCustomerPointParams) -> Result<crate::models::UpdateCustomerPointResponse, Error<UpdateCustomerPointError>> {
    // unbox the parameters
    let contract_id = params.contract_id;
    let customer_id = params.customer_id;
    let update_customer_point_request = params.update_customer_point_request;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/{contract_id}/pos/customers/{customer_id}/point", configuration.base_path, contract_id=crate::apis::urlencode(contract_id), customer_id=crate::apis::urlencode(customer_id));
    let mut local_var_req_builder = local_var_client.patch(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&update_customer_point_request);

    let local_var_req = local_var_req_builder.build()?;
    info!("{}", local_var_req.url().as_str());
    if let Some(Some(body)) = local_var_req.body().map(|b| b.as_bytes()) {
        info!("{}", std::str::from_utf8(body).unwrap_or_default());
    }
    if let Some(q) = local_var_req.url().query() {
        info!("{}", q);
    }

    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;
    info!("{}", &local_var_content);

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateCustomerPointError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 会員ポイント情報を更新します。 ポイントおよびマイルは、現在の値に対し、入力された値を加算（入力値が負の場合は減算）した値に更新します。 現在値参照にあたりポイント有効期限を参照し、ポイント残高がありかつ期限が切れていれば期限切れ分のポイント失効処理を行ってから加算を行います（失効で0になっているので減算はエラー）。
pub async fn update_customer_point_relative(configuration: &configuration::Configuration, params: UpdateCustomerPointRelativeParams) -> Result<crate::models::UpdateCustomerPointResponse, Error<UpdateCustomerPointRelativeError>> {
    // unbox the parameters
    let contract_id = params.contract_id;
    let customer_id = params.customer_id;
    let update_customer_point_request = params.update_customer_point_request;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/{contract_id}/pos/customers/{customer_id}/point/add", configuration.base_path, contract_id=crate::apis::urlencode(contract_id), customer_id=crate::apis::urlencode(customer_id));
    let mut local_var_req_builder = local_var_client.post(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&update_customer_point_request);

    let local_var_req = local_var_req_builder.build()?;
    info!("{}", local_var_req.url().as_str());
    if let Some(Some(body)) = local_var_req.body().map(|b| b.as_bytes()) {
        info!("{}", std::str::from_utf8(body).unwrap_or_default());
    }
    if let Some(q) = local_var_req.url().query() {
        info!("{}", q);
    }

    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;
    info!("{}", &local_var_content);

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateCustomerPointRelativeError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn update_customers(configuration: &configuration::Configuration, params: UpdateCustomersParams) -> Result<crate::models::CustomersResponseOfCreate, Error<UpdateCustomersError>> {
    // unbox the parameters
    let contract_id = params.contract_id;
    let customer_id = params.customer_id;
    let patch_customers = params.patch_customers;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/{contract_id}/pos/customers/{customer_id}", configuration.base_path, contract_id=crate::apis::urlencode(contract_id), customer_id=crate::apis::urlencode(customer_id));
    let mut local_var_req_builder = local_var_client.patch(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&patch_customers);

    let local_var_req = local_var_req_builder.build()?;
    info!("{}", local_var_req.url().as_str());
    if let Some(Some(body)) = local_var_req.body().map(|b| b.as_bytes()) {
        info!("{}", std::str::from_utf8(body).unwrap_or_default());
    }
    if let Some(q) = local_var_req.url().query() {
        info!("{}", q);
    }

    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;
    info!("{}", &local_var_content);

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateCustomersError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// 店舗情報を更新します。 
pub async fn update_store(configuration: &configuration::Configuration, params: UpdateStoreParams) -> Result<crate::models::UpdateStoreResponse, Error<UpdateStoreError>> {
    // unbox the parameters
    let contract_id = params.contract_id;
    let store_id = params.store_id;
    let update_store_request = params.update_store_request;


    let local_var_client = &configuration.client;

    let local_var_uri_str = format!("{}/{contract_id}/pos/stores/{store_id}", configuration.base_path, contract_id=crate::apis::urlencode(contract_id), store_id=crate::apis::urlencode(store_id));
    let mut local_var_req_builder = local_var_client.patch(local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = configuration.bearer_access_token {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };
    local_var_req_builder = local_var_req_builder.json(&update_store_request);

    let local_var_req = local_var_req_builder.build()?;
    info!("{}", local_var_req.url().as_str());
    if let Some(Some(body)) = local_var_req.body().map(|b| b.as_bytes()) {
        info!("{}", std::str::from_utf8(body).unwrap_or_default());
    }
    if let Some(q) = local_var_req.url().query() {
        info!("{}", q);
    }

    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;
    info!("{}", &local_var_content);

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<UpdateStoreError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

