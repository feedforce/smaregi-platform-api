<?php
/**
 * GetLayawayById
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * スマレジ
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GetLayawayById Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class GetLayawayById implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getLayawayById';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'transaction_head_id' => 'string',
        'transaction_date_time' => 'string',
        'transaction_head_division' => '\OpenAPI\Client\Model\TransactionHeadDivision',
        'cancel_division' => '\OpenAPI\Client\Model\CancelDivision',
        'unit_non_discountsubtotal' => 'string',
        'unit_discountsubtotal' => 'string',
        'unit_staff_discountsubtotal' => 'string',
        'unit_bargain_discountsubtotal' => 'string',
        'subtotal' => 'string',
        'subtotal_for_discount' => 'string',
        'subtotal_discount_price' => 'string',
        'subtotal_discount_rate' => 'string',
        'subtotal_discount_division' => 'string',
        'point_discount' => 'string',
        'total' => 'string',
        'tax_include' => 'string',
        'tax_exclude' => 'string',
        'rounding_division' => 'string',
        'rounding_price' => 'string',
        'cash_total' => 'string',
        'credit_total' => 'string',
        'deposit' => 'string',
        'deposit_cash' => 'string',
        'deposit_credit' => 'string',
        'change' => 'string',
        'tip_cash' => 'string',
        'tip_credit' => 'string',
        'amount' => 'string',
        'return_amount' => 'string',
        'cost_total' => 'string',
        'sales_head_division' => 'string',
        'in_tax_sales_total' => 'string',
        'out_tax_sales_total' => 'string',
        'non_tax_sales_total' => 'string',
        'non_sales_target_total' => 'string',
        'non_sales_target_in_tax_total' => 'string',
        'non_sales_target_out_tax_total' => 'string',
        'non_sales_target_tax_free_total' => 'string',
        'non_sales_target_cost_total' => 'string',
        'non_sales_target_amount' => 'string',
        'non_sales_target_return_amount' => 'string',
        'new_point' => 'string',
        'spend_point' => 'string',
        'point' => 'string',
        'total_point' => 'string',
        'current_mile' => 'string',
        'earn_mile' => 'string',
        'total_mile' => 'string',
        'adjustment_mile' => 'string',
        'adjustment_mile_division' => 'string',
        'adjustment_mile_value' => 'string',
        'store_id' => 'string',
        'terminal_id' => 'string',
        'customer_id' => 'string',
        'terminal_tran_id' => 'string',
        'terminal_tran_date_time' => 'string',
        'sum_division' => 'string',
        'adjustment_date_time' => 'string',
        'sum_date' => 'string',
        'customer_rank' => 'string',
        'customer_group_id' => 'string',
        'customer_group_id2' => 'string',
        'customer_group_id3' => 'string',
        'customer_group_id4' => 'string',
        'customer_group_id5' => 'string',
        'staff_id' => 'string',
        'staff_name' => 'string',
        'credit_division' => 'string',
        'payment_count' => 'string',
        'slip_number' => 'string',
        'cancel_slip_number' => 'string',
        'auth_number' => 'string',
        'auth_date' => 'string',
        'card_company' => 'string',
        'denomination' => 'string',
        'memo' => 'string',
        'receipt_memo' => 'string',
        'carriage' => 'string',
        'commission' => 'string',
        'guest_numbers' => 'string',
        'guest_numbers_male' => 'string',
        'guest_numbers_female' => 'string',
        'guest_numbers_unknown' => 'mixed',
        'enter_date_time' => 'string',
        'tax_free_sales_division' => 'string',
        'net_tax_free_general_tax_include' => 'string',
        'net_tax_free_general_tax_exclude' => 'string',
        'net_tax_free_consumable_tax_include' => 'string',
        'net_tax_free_consumable_tax_exclude' => 'string',
        'tags' => 'string',
        'point_giving_division' => 'string',
        'point_giving_unit_price' => 'string',
        'point_giving_unit' => 'string',
        'point_spend_division' => 'string',
        'mileage_division' => 'string',
        'mileage_label' => 'string',
        'customer_pin_code' => 'string',
        'return_sales' => '\OpenAPI\Client\Model\ReturnSales',
        'dispose_division' => '\OpenAPI\Client\Model\DisposeDivision',
        'dispose_server_transaction_head_id' => 'string',
        'cancel_date_time' => 'string',
        'sell_division' => 'string',
        'tax_rate' => 'string',
        'tax_rounding' => 'string',
        'discount_rounding_division' => 'string',
        'transaction_uuid' => 'string',
        'exchange_ticket_no' => 'string',
        'gift_receipt_valid_days' => 'string',
        'upd_date_time' => 'string',
        'details' => '\OpenAPI\Client\Model\TransactionDetail[]',
        'layaway' => '\OpenAPI\Client\Model\Layaway',
        'layaway_pick_up' => '\OpenAPI\Client\Model\LayawayPickUp',
        'store' => '\OpenAPI\Client\Model\Store',
        'customer' => '\OpenAPI\Client\Model\Customer',
        'customer_groups' => '\OpenAPI\Client\Model\CustomerGroup[]',
        'staff' => '\OpenAPI\Client\Model\Staff'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'transaction_head_id' => null,
        'transaction_date_time' => null,
        'transaction_head_division' => null,
        'cancel_division' => null,
        'unit_non_discountsubtotal' => null,
        'unit_discountsubtotal' => null,
        'unit_staff_discountsubtotal' => null,
        'unit_bargain_discountsubtotal' => null,
        'subtotal' => null,
        'subtotal_for_discount' => null,
        'subtotal_discount_price' => null,
        'subtotal_discount_rate' => null,
        'subtotal_discount_division' => null,
        'point_discount' => null,
        'total' => null,
        'tax_include' => null,
        'tax_exclude' => null,
        'rounding_division' => null,
        'rounding_price' => null,
        'cash_total' => null,
        'credit_total' => null,
        'deposit' => null,
        'deposit_cash' => null,
        'deposit_credit' => null,
        'change' => null,
        'tip_cash' => null,
        'tip_credit' => null,
        'amount' => null,
        'return_amount' => null,
        'cost_total' => null,
        'sales_head_division' => null,
        'in_tax_sales_total' => null,
        'out_tax_sales_total' => null,
        'non_tax_sales_total' => null,
        'non_sales_target_total' => null,
        'non_sales_target_in_tax_total' => null,
        'non_sales_target_out_tax_total' => null,
        'non_sales_target_tax_free_total' => null,
        'non_sales_target_cost_total' => null,
        'non_sales_target_amount' => null,
        'non_sales_target_return_amount' => null,
        'new_point' => null,
        'spend_point' => null,
        'point' => null,
        'total_point' => null,
        'current_mile' => null,
        'earn_mile' => null,
        'total_mile' => null,
        'adjustment_mile' => null,
        'adjustment_mile_division' => null,
        'adjustment_mile_value' => null,
        'store_id' => null,
        'terminal_id' => null,
        'customer_id' => null,
        'terminal_tran_id' => null,
        'terminal_tran_date_time' => null,
        'sum_division' => null,
        'adjustment_date_time' => null,
        'sum_date' => null,
        'customer_rank' => null,
        'customer_group_id' => null,
        'customer_group_id2' => null,
        'customer_group_id3' => null,
        'customer_group_id4' => null,
        'customer_group_id5' => null,
        'staff_id' => null,
        'staff_name' => null,
        'credit_division' => null,
        'payment_count' => null,
        'slip_number' => null,
        'cancel_slip_number' => null,
        'auth_number' => null,
        'auth_date' => null,
        'card_company' => null,
        'denomination' => null,
        'memo' => null,
        'receipt_memo' => null,
        'carriage' => null,
        'commission' => null,
        'guest_numbers' => null,
        'guest_numbers_male' => null,
        'guest_numbers_female' => null,
        'guest_numbers_unknown' => null,
        'enter_date_time' => null,
        'tax_free_sales_division' => null,
        'net_tax_free_general_tax_include' => null,
        'net_tax_free_general_tax_exclude' => null,
        'net_tax_free_consumable_tax_include' => null,
        'net_tax_free_consumable_tax_exclude' => null,
        'tags' => null,
        'point_giving_division' => null,
        'point_giving_unit_price' => null,
        'point_giving_unit' => null,
        'point_spend_division' => null,
        'mileage_division' => null,
        'mileage_label' => null,
        'customer_pin_code' => null,
        'return_sales' => null,
        'dispose_division' => null,
        'dispose_server_transaction_head_id' => null,
        'cancel_date_time' => null,
        'sell_division' => null,
        'tax_rate' => null,
        'tax_rounding' => null,
        'discount_rounding_division' => null,
        'transaction_uuid' => null,
        'exchange_ticket_no' => null,
        'gift_receipt_valid_days' => null,
        'upd_date_time' => null,
        'details' => null,
        'layaway' => null,
        'layaway_pick_up' => null,
        'store' => null,
        'customer' => null,
        'customer_groups' => null,
        'staff' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_head_id' => 'transactionHeadId',
        'transaction_date_time' => 'transactionDateTime',
        'transaction_head_division' => 'transactionHeadDivision',
        'cancel_division' => 'cancelDivision',
        'unit_non_discountsubtotal' => 'unitNonDiscountsubtotal',
        'unit_discountsubtotal' => 'unitDiscountsubtotal',
        'unit_staff_discountsubtotal' => 'unitStaffDiscountsubtotal',
        'unit_bargain_discountsubtotal' => 'unitBargainDiscountsubtotal',
        'subtotal' => 'subtotal',
        'subtotal_for_discount' => 'subtotalForDiscount',
        'subtotal_discount_price' => 'subtotalDiscountPrice',
        'subtotal_discount_rate' => 'subtotalDiscountRate',
        'subtotal_discount_division' => 'subtotalDiscountDivision',
        'point_discount' => 'pointDiscount',
        'total' => 'total',
        'tax_include' => 'taxInclude',
        'tax_exclude' => 'taxExclude',
        'rounding_division' => 'roundingDivision',
        'rounding_price' => 'roundingPrice',
        'cash_total' => 'cashTotal',
        'credit_total' => 'creditTotal',
        'deposit' => 'deposit',
        'deposit_cash' => 'depositCash',
        'deposit_credit' => 'depositCredit',
        'change' => 'change',
        'tip_cash' => 'tipCash',
        'tip_credit' => 'tipCredit',
        'amount' => 'amount',
        'return_amount' => 'returnAmount',
        'cost_total' => 'costTotal',
        'sales_head_division' => 'salesHeadDivision',
        'in_tax_sales_total' => 'inTaxSalesTotal',
        'out_tax_sales_total' => 'outTaxSalesTotal',
        'non_tax_sales_total' => 'nonTaxSalesTotal',
        'non_sales_target_total' => 'nonSalesTargetTotal',
        'non_sales_target_in_tax_total' => 'nonSalesTargetInTaxTotal',
        'non_sales_target_out_tax_total' => 'nonSalesTargetOutTaxTotal',
        'non_sales_target_tax_free_total' => 'nonSalesTargetTaxFreeTotal',
        'non_sales_target_cost_total' => 'nonSalesTargetCostTotal',
        'non_sales_target_amount' => 'nonSalesTargetAmount',
        'non_sales_target_return_amount' => 'nonSalesTargetReturnAmount',
        'new_point' => 'newPoint',
        'spend_point' => 'spendPoint',
        'point' => 'point',
        'total_point' => 'totalPoint',
        'current_mile' => 'currentMile',
        'earn_mile' => 'earnMile',
        'total_mile' => 'totalMile',
        'adjustment_mile' => 'adjustmentMile',
        'adjustment_mile_division' => 'adjustmentMileDivision',
        'adjustment_mile_value' => 'adjustmentMileValue',
        'store_id' => 'storeId',
        'terminal_id' => 'terminalId',
        'customer_id' => 'customerId',
        'terminal_tran_id' => 'terminalTranId',
        'terminal_tran_date_time' => 'terminalTranDateTime',
        'sum_division' => 'sumDivision',
        'adjustment_date_time' => 'adjustmentDateTime',
        'sum_date' => 'sumDate',
        'customer_rank' => 'customerRank',
        'customer_group_id' => 'customerGroupId',
        'customer_group_id2' => 'customerGroupId2',
        'customer_group_id3' => 'customerGroupId3',
        'customer_group_id4' => 'customerGroupId4',
        'customer_group_id5' => 'customerGroupId5',
        'staff_id' => 'staffId',
        'staff_name' => 'staffName',
        'credit_division' => 'creditDivision',
        'payment_count' => 'paymentCount',
        'slip_number' => 'slipNumber',
        'cancel_slip_number' => 'cancelSlipNumber',
        'auth_number' => 'authNumber',
        'auth_date' => 'authDate',
        'card_company' => 'cardCompany',
        'denomination' => 'denomination',
        'memo' => 'memo',
        'receipt_memo' => 'receiptMemo',
        'carriage' => 'carriage',
        'commission' => 'commission',
        'guest_numbers' => 'guestNumbers',
        'guest_numbers_male' => 'guestNumbersMale',
        'guest_numbers_female' => 'guestNumbersFemale',
        'guest_numbers_unknown' => 'guestNumbersUnknown',
        'enter_date_time' => 'enterDateTime',
        'tax_free_sales_division' => 'taxFreeSalesDivision',
        'net_tax_free_general_tax_include' => 'netTaxFreeGeneralTaxInclude',
        'net_tax_free_general_tax_exclude' => 'netTaxFreeGeneralTaxExclude',
        'net_tax_free_consumable_tax_include' => 'netTaxFreeConsumableTaxInclude',
        'net_tax_free_consumable_tax_exclude' => 'netTaxFreeConsumableTaxExclude',
        'tags' => 'tags',
        'point_giving_division' => 'pointGivingDivision',
        'point_giving_unit_price' => 'pointGivingUnitPrice',
        'point_giving_unit' => 'pointGivingUnit',
        'point_spend_division' => 'pointSpendDivision',
        'mileage_division' => 'mileageDivision',
        'mileage_label' => 'mileageLabel',
        'customer_pin_code' => 'customerPinCode',
        'return_sales' => 'returnSales',
        'dispose_division' => 'disposeDivision',
        'dispose_server_transaction_head_id' => 'disposeServerTransactionHeadId',
        'cancel_date_time' => 'cancelDateTime',
        'sell_division' => 'sellDivision',
        'tax_rate' => 'taxRate',
        'tax_rounding' => 'taxRounding',
        'discount_rounding_division' => 'discountRoundingDivision',
        'transaction_uuid' => 'transactionUuid',
        'exchange_ticket_no' => 'exchangeTicketNo',
        'gift_receipt_valid_days' => 'giftReceiptValidDays',
        'upd_date_time' => 'updDateTime',
        'details' => 'details',
        'layaway' => 'layaway',
        'layaway_pick_up' => 'layawayPickUp',
        'store' => 'store',
        'customer' => 'customer',
        'customer_groups' => 'customerGroups',
        'staff' => 'staff'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_head_id' => 'setTransactionHeadId',
        'transaction_date_time' => 'setTransactionDateTime',
        'transaction_head_division' => 'setTransactionHeadDivision',
        'cancel_division' => 'setCancelDivision',
        'unit_non_discountsubtotal' => 'setUnitNonDiscountsubtotal',
        'unit_discountsubtotal' => 'setUnitDiscountsubtotal',
        'unit_staff_discountsubtotal' => 'setUnitStaffDiscountsubtotal',
        'unit_bargain_discountsubtotal' => 'setUnitBargainDiscountsubtotal',
        'subtotal' => 'setSubtotal',
        'subtotal_for_discount' => 'setSubtotalForDiscount',
        'subtotal_discount_price' => 'setSubtotalDiscountPrice',
        'subtotal_discount_rate' => 'setSubtotalDiscountRate',
        'subtotal_discount_division' => 'setSubtotalDiscountDivision',
        'point_discount' => 'setPointDiscount',
        'total' => 'setTotal',
        'tax_include' => 'setTaxInclude',
        'tax_exclude' => 'setTaxExclude',
        'rounding_division' => 'setRoundingDivision',
        'rounding_price' => 'setRoundingPrice',
        'cash_total' => 'setCashTotal',
        'credit_total' => 'setCreditTotal',
        'deposit' => 'setDeposit',
        'deposit_cash' => 'setDepositCash',
        'deposit_credit' => 'setDepositCredit',
        'change' => 'setChange',
        'tip_cash' => 'setTipCash',
        'tip_credit' => 'setTipCredit',
        'amount' => 'setAmount',
        'return_amount' => 'setReturnAmount',
        'cost_total' => 'setCostTotal',
        'sales_head_division' => 'setSalesHeadDivision',
        'in_tax_sales_total' => 'setInTaxSalesTotal',
        'out_tax_sales_total' => 'setOutTaxSalesTotal',
        'non_tax_sales_total' => 'setNonTaxSalesTotal',
        'non_sales_target_total' => 'setNonSalesTargetTotal',
        'non_sales_target_in_tax_total' => 'setNonSalesTargetInTaxTotal',
        'non_sales_target_out_tax_total' => 'setNonSalesTargetOutTaxTotal',
        'non_sales_target_tax_free_total' => 'setNonSalesTargetTaxFreeTotal',
        'non_sales_target_cost_total' => 'setNonSalesTargetCostTotal',
        'non_sales_target_amount' => 'setNonSalesTargetAmount',
        'non_sales_target_return_amount' => 'setNonSalesTargetReturnAmount',
        'new_point' => 'setNewPoint',
        'spend_point' => 'setSpendPoint',
        'point' => 'setPoint',
        'total_point' => 'setTotalPoint',
        'current_mile' => 'setCurrentMile',
        'earn_mile' => 'setEarnMile',
        'total_mile' => 'setTotalMile',
        'adjustment_mile' => 'setAdjustmentMile',
        'adjustment_mile_division' => 'setAdjustmentMileDivision',
        'adjustment_mile_value' => 'setAdjustmentMileValue',
        'store_id' => 'setStoreId',
        'terminal_id' => 'setTerminalId',
        'customer_id' => 'setCustomerId',
        'terminal_tran_id' => 'setTerminalTranId',
        'terminal_tran_date_time' => 'setTerminalTranDateTime',
        'sum_division' => 'setSumDivision',
        'adjustment_date_time' => 'setAdjustmentDateTime',
        'sum_date' => 'setSumDate',
        'customer_rank' => 'setCustomerRank',
        'customer_group_id' => 'setCustomerGroupId',
        'customer_group_id2' => 'setCustomerGroupId2',
        'customer_group_id3' => 'setCustomerGroupId3',
        'customer_group_id4' => 'setCustomerGroupId4',
        'customer_group_id5' => 'setCustomerGroupId5',
        'staff_id' => 'setStaffId',
        'staff_name' => 'setStaffName',
        'credit_division' => 'setCreditDivision',
        'payment_count' => 'setPaymentCount',
        'slip_number' => 'setSlipNumber',
        'cancel_slip_number' => 'setCancelSlipNumber',
        'auth_number' => 'setAuthNumber',
        'auth_date' => 'setAuthDate',
        'card_company' => 'setCardCompany',
        'denomination' => 'setDenomination',
        'memo' => 'setMemo',
        'receipt_memo' => 'setReceiptMemo',
        'carriage' => 'setCarriage',
        'commission' => 'setCommission',
        'guest_numbers' => 'setGuestNumbers',
        'guest_numbers_male' => 'setGuestNumbersMale',
        'guest_numbers_female' => 'setGuestNumbersFemale',
        'guest_numbers_unknown' => 'setGuestNumbersUnknown',
        'enter_date_time' => 'setEnterDateTime',
        'tax_free_sales_division' => 'setTaxFreeSalesDivision',
        'net_tax_free_general_tax_include' => 'setNetTaxFreeGeneralTaxInclude',
        'net_tax_free_general_tax_exclude' => 'setNetTaxFreeGeneralTaxExclude',
        'net_tax_free_consumable_tax_include' => 'setNetTaxFreeConsumableTaxInclude',
        'net_tax_free_consumable_tax_exclude' => 'setNetTaxFreeConsumableTaxExclude',
        'tags' => 'setTags',
        'point_giving_division' => 'setPointGivingDivision',
        'point_giving_unit_price' => 'setPointGivingUnitPrice',
        'point_giving_unit' => 'setPointGivingUnit',
        'point_spend_division' => 'setPointSpendDivision',
        'mileage_division' => 'setMileageDivision',
        'mileage_label' => 'setMileageLabel',
        'customer_pin_code' => 'setCustomerPinCode',
        'return_sales' => 'setReturnSales',
        'dispose_division' => 'setDisposeDivision',
        'dispose_server_transaction_head_id' => 'setDisposeServerTransactionHeadId',
        'cancel_date_time' => 'setCancelDateTime',
        'sell_division' => 'setSellDivision',
        'tax_rate' => 'setTaxRate',
        'tax_rounding' => 'setTaxRounding',
        'discount_rounding_division' => 'setDiscountRoundingDivision',
        'transaction_uuid' => 'setTransactionUuid',
        'exchange_ticket_no' => 'setExchangeTicketNo',
        'gift_receipt_valid_days' => 'setGiftReceiptValidDays',
        'upd_date_time' => 'setUpdDateTime',
        'details' => 'setDetails',
        'layaway' => 'setLayaway',
        'layaway_pick_up' => 'setLayawayPickUp',
        'store' => 'setStore',
        'customer' => 'setCustomer',
        'customer_groups' => 'setCustomerGroups',
        'staff' => 'setStaff'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_head_id' => 'getTransactionHeadId',
        'transaction_date_time' => 'getTransactionDateTime',
        'transaction_head_division' => 'getTransactionHeadDivision',
        'cancel_division' => 'getCancelDivision',
        'unit_non_discountsubtotal' => 'getUnitNonDiscountsubtotal',
        'unit_discountsubtotal' => 'getUnitDiscountsubtotal',
        'unit_staff_discountsubtotal' => 'getUnitStaffDiscountsubtotal',
        'unit_bargain_discountsubtotal' => 'getUnitBargainDiscountsubtotal',
        'subtotal' => 'getSubtotal',
        'subtotal_for_discount' => 'getSubtotalForDiscount',
        'subtotal_discount_price' => 'getSubtotalDiscountPrice',
        'subtotal_discount_rate' => 'getSubtotalDiscountRate',
        'subtotal_discount_division' => 'getSubtotalDiscountDivision',
        'point_discount' => 'getPointDiscount',
        'total' => 'getTotal',
        'tax_include' => 'getTaxInclude',
        'tax_exclude' => 'getTaxExclude',
        'rounding_division' => 'getRoundingDivision',
        'rounding_price' => 'getRoundingPrice',
        'cash_total' => 'getCashTotal',
        'credit_total' => 'getCreditTotal',
        'deposit' => 'getDeposit',
        'deposit_cash' => 'getDepositCash',
        'deposit_credit' => 'getDepositCredit',
        'change' => 'getChange',
        'tip_cash' => 'getTipCash',
        'tip_credit' => 'getTipCredit',
        'amount' => 'getAmount',
        'return_amount' => 'getReturnAmount',
        'cost_total' => 'getCostTotal',
        'sales_head_division' => 'getSalesHeadDivision',
        'in_tax_sales_total' => 'getInTaxSalesTotal',
        'out_tax_sales_total' => 'getOutTaxSalesTotal',
        'non_tax_sales_total' => 'getNonTaxSalesTotal',
        'non_sales_target_total' => 'getNonSalesTargetTotal',
        'non_sales_target_in_tax_total' => 'getNonSalesTargetInTaxTotal',
        'non_sales_target_out_tax_total' => 'getNonSalesTargetOutTaxTotal',
        'non_sales_target_tax_free_total' => 'getNonSalesTargetTaxFreeTotal',
        'non_sales_target_cost_total' => 'getNonSalesTargetCostTotal',
        'non_sales_target_amount' => 'getNonSalesTargetAmount',
        'non_sales_target_return_amount' => 'getNonSalesTargetReturnAmount',
        'new_point' => 'getNewPoint',
        'spend_point' => 'getSpendPoint',
        'point' => 'getPoint',
        'total_point' => 'getTotalPoint',
        'current_mile' => 'getCurrentMile',
        'earn_mile' => 'getEarnMile',
        'total_mile' => 'getTotalMile',
        'adjustment_mile' => 'getAdjustmentMile',
        'adjustment_mile_division' => 'getAdjustmentMileDivision',
        'adjustment_mile_value' => 'getAdjustmentMileValue',
        'store_id' => 'getStoreId',
        'terminal_id' => 'getTerminalId',
        'customer_id' => 'getCustomerId',
        'terminal_tran_id' => 'getTerminalTranId',
        'terminal_tran_date_time' => 'getTerminalTranDateTime',
        'sum_division' => 'getSumDivision',
        'adjustment_date_time' => 'getAdjustmentDateTime',
        'sum_date' => 'getSumDate',
        'customer_rank' => 'getCustomerRank',
        'customer_group_id' => 'getCustomerGroupId',
        'customer_group_id2' => 'getCustomerGroupId2',
        'customer_group_id3' => 'getCustomerGroupId3',
        'customer_group_id4' => 'getCustomerGroupId4',
        'customer_group_id5' => 'getCustomerGroupId5',
        'staff_id' => 'getStaffId',
        'staff_name' => 'getStaffName',
        'credit_division' => 'getCreditDivision',
        'payment_count' => 'getPaymentCount',
        'slip_number' => 'getSlipNumber',
        'cancel_slip_number' => 'getCancelSlipNumber',
        'auth_number' => 'getAuthNumber',
        'auth_date' => 'getAuthDate',
        'card_company' => 'getCardCompany',
        'denomination' => 'getDenomination',
        'memo' => 'getMemo',
        'receipt_memo' => 'getReceiptMemo',
        'carriage' => 'getCarriage',
        'commission' => 'getCommission',
        'guest_numbers' => 'getGuestNumbers',
        'guest_numbers_male' => 'getGuestNumbersMale',
        'guest_numbers_female' => 'getGuestNumbersFemale',
        'guest_numbers_unknown' => 'getGuestNumbersUnknown',
        'enter_date_time' => 'getEnterDateTime',
        'tax_free_sales_division' => 'getTaxFreeSalesDivision',
        'net_tax_free_general_tax_include' => 'getNetTaxFreeGeneralTaxInclude',
        'net_tax_free_general_tax_exclude' => 'getNetTaxFreeGeneralTaxExclude',
        'net_tax_free_consumable_tax_include' => 'getNetTaxFreeConsumableTaxInclude',
        'net_tax_free_consumable_tax_exclude' => 'getNetTaxFreeConsumableTaxExclude',
        'tags' => 'getTags',
        'point_giving_division' => 'getPointGivingDivision',
        'point_giving_unit_price' => 'getPointGivingUnitPrice',
        'point_giving_unit' => 'getPointGivingUnit',
        'point_spend_division' => 'getPointSpendDivision',
        'mileage_division' => 'getMileageDivision',
        'mileage_label' => 'getMileageLabel',
        'customer_pin_code' => 'getCustomerPinCode',
        'return_sales' => 'getReturnSales',
        'dispose_division' => 'getDisposeDivision',
        'dispose_server_transaction_head_id' => 'getDisposeServerTransactionHeadId',
        'cancel_date_time' => 'getCancelDateTime',
        'sell_division' => 'getSellDivision',
        'tax_rate' => 'getTaxRate',
        'tax_rounding' => 'getTaxRounding',
        'discount_rounding_division' => 'getDiscountRoundingDivision',
        'transaction_uuid' => 'getTransactionUuid',
        'exchange_ticket_no' => 'getExchangeTicketNo',
        'gift_receipt_valid_days' => 'getGiftReceiptValidDays',
        'upd_date_time' => 'getUpdDateTime',
        'details' => 'getDetails',
        'layaway' => 'getLayaway',
        'layaway_pick_up' => 'getLayawayPickUp',
        'store' => 'getStore',
        'customer' => 'getCustomer',
        'customer_groups' => 'getCustomerGroups',
        'staff' => 'getStaff'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_head_id'] = $data['transaction_head_id'] ?? null;
        $this->container['transaction_date_time'] = $data['transaction_date_time'] ?? null;
        $this->container['transaction_head_division'] = $data['transaction_head_division'] ?? null;
        $this->container['cancel_division'] = $data['cancel_division'] ?? null;
        $this->container['unit_non_discountsubtotal'] = $data['unit_non_discountsubtotal'] ?? null;
        $this->container['unit_discountsubtotal'] = $data['unit_discountsubtotal'] ?? null;
        $this->container['unit_staff_discountsubtotal'] = $data['unit_staff_discountsubtotal'] ?? null;
        $this->container['unit_bargain_discountsubtotal'] = $data['unit_bargain_discountsubtotal'] ?? null;
        $this->container['subtotal'] = $data['subtotal'] ?? null;
        $this->container['subtotal_for_discount'] = $data['subtotal_for_discount'] ?? null;
        $this->container['subtotal_discount_price'] = $data['subtotal_discount_price'] ?? null;
        $this->container['subtotal_discount_rate'] = $data['subtotal_discount_rate'] ?? null;
        $this->container['subtotal_discount_division'] = $data['subtotal_discount_division'] ?? null;
        $this->container['point_discount'] = $data['point_discount'] ?? null;
        $this->container['total'] = $data['total'] ?? null;
        $this->container['tax_include'] = $data['tax_include'] ?? null;
        $this->container['tax_exclude'] = $data['tax_exclude'] ?? null;
        $this->container['rounding_division'] = $data['rounding_division'] ?? null;
        $this->container['rounding_price'] = $data['rounding_price'] ?? null;
        $this->container['cash_total'] = $data['cash_total'] ?? null;
        $this->container['credit_total'] = $data['credit_total'] ?? null;
        $this->container['deposit'] = $data['deposit'] ?? null;
        $this->container['deposit_cash'] = $data['deposit_cash'] ?? null;
        $this->container['deposit_credit'] = $data['deposit_credit'] ?? null;
        $this->container['change'] = $data['change'] ?? null;
        $this->container['tip_cash'] = $data['tip_cash'] ?? null;
        $this->container['tip_credit'] = $data['tip_credit'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
        $this->container['return_amount'] = $data['return_amount'] ?? null;
        $this->container['cost_total'] = $data['cost_total'] ?? null;
        $this->container['sales_head_division'] = $data['sales_head_division'] ?? null;
        $this->container['in_tax_sales_total'] = $data['in_tax_sales_total'] ?? null;
        $this->container['out_tax_sales_total'] = $data['out_tax_sales_total'] ?? null;
        $this->container['non_tax_sales_total'] = $data['non_tax_sales_total'] ?? null;
        $this->container['non_sales_target_total'] = $data['non_sales_target_total'] ?? null;
        $this->container['non_sales_target_in_tax_total'] = $data['non_sales_target_in_tax_total'] ?? null;
        $this->container['non_sales_target_out_tax_total'] = $data['non_sales_target_out_tax_total'] ?? null;
        $this->container['non_sales_target_tax_free_total'] = $data['non_sales_target_tax_free_total'] ?? null;
        $this->container['non_sales_target_cost_total'] = $data['non_sales_target_cost_total'] ?? null;
        $this->container['non_sales_target_amount'] = $data['non_sales_target_amount'] ?? null;
        $this->container['non_sales_target_return_amount'] = $data['non_sales_target_return_amount'] ?? null;
        $this->container['new_point'] = $data['new_point'] ?? null;
        $this->container['spend_point'] = $data['spend_point'] ?? null;
        $this->container['point'] = $data['point'] ?? null;
        $this->container['total_point'] = $data['total_point'] ?? null;
        $this->container['current_mile'] = $data['current_mile'] ?? null;
        $this->container['earn_mile'] = $data['earn_mile'] ?? null;
        $this->container['total_mile'] = $data['total_mile'] ?? null;
        $this->container['adjustment_mile'] = $data['adjustment_mile'] ?? null;
        $this->container['adjustment_mile_division'] = $data['adjustment_mile_division'] ?? null;
        $this->container['adjustment_mile_value'] = $data['adjustment_mile_value'] ?? null;
        $this->container['store_id'] = $data['store_id'] ?? null;
        $this->container['terminal_id'] = $data['terminal_id'] ?? null;
        $this->container['customer_id'] = $data['customer_id'] ?? null;
        $this->container['terminal_tran_id'] = $data['terminal_tran_id'] ?? null;
        $this->container['terminal_tran_date_time'] = $data['terminal_tran_date_time'] ?? null;
        $this->container['sum_division'] = $data['sum_division'] ?? null;
        $this->container['adjustment_date_time'] = $data['adjustment_date_time'] ?? null;
        $this->container['sum_date'] = $data['sum_date'] ?? null;
        $this->container['customer_rank'] = $data['customer_rank'] ?? null;
        $this->container['customer_group_id'] = $data['customer_group_id'] ?? null;
        $this->container['customer_group_id2'] = $data['customer_group_id2'] ?? null;
        $this->container['customer_group_id3'] = $data['customer_group_id3'] ?? null;
        $this->container['customer_group_id4'] = $data['customer_group_id4'] ?? null;
        $this->container['customer_group_id5'] = $data['customer_group_id5'] ?? null;
        $this->container['staff_id'] = $data['staff_id'] ?? null;
        $this->container['staff_name'] = $data['staff_name'] ?? null;
        $this->container['credit_division'] = $data['credit_division'] ?? null;
        $this->container['payment_count'] = $data['payment_count'] ?? null;
        $this->container['slip_number'] = $data['slip_number'] ?? null;
        $this->container['cancel_slip_number'] = $data['cancel_slip_number'] ?? null;
        $this->container['auth_number'] = $data['auth_number'] ?? null;
        $this->container['auth_date'] = $data['auth_date'] ?? null;
        $this->container['card_company'] = $data['card_company'] ?? null;
        $this->container['denomination'] = $data['denomination'] ?? null;
        $this->container['memo'] = $data['memo'] ?? null;
        $this->container['receipt_memo'] = $data['receipt_memo'] ?? null;
        $this->container['carriage'] = $data['carriage'] ?? null;
        $this->container['commission'] = $data['commission'] ?? null;
        $this->container['guest_numbers'] = $data['guest_numbers'] ?? null;
        $this->container['guest_numbers_male'] = $data['guest_numbers_male'] ?? null;
        $this->container['guest_numbers_female'] = $data['guest_numbers_female'] ?? null;
        $this->container['guest_numbers_unknown'] = $data['guest_numbers_unknown'] ?? null;
        $this->container['enter_date_time'] = $data['enter_date_time'] ?? null;
        $this->container['tax_free_sales_division'] = $data['tax_free_sales_division'] ?? null;
        $this->container['net_tax_free_general_tax_include'] = $data['net_tax_free_general_tax_include'] ?? null;
        $this->container['net_tax_free_general_tax_exclude'] = $data['net_tax_free_general_tax_exclude'] ?? null;
        $this->container['net_tax_free_consumable_tax_include'] = $data['net_tax_free_consumable_tax_include'] ?? null;
        $this->container['net_tax_free_consumable_tax_exclude'] = $data['net_tax_free_consumable_tax_exclude'] ?? null;
        $this->container['tags'] = $data['tags'] ?? null;
        $this->container['point_giving_division'] = $data['point_giving_division'] ?? null;
        $this->container['point_giving_unit_price'] = $data['point_giving_unit_price'] ?? null;
        $this->container['point_giving_unit'] = $data['point_giving_unit'] ?? null;
        $this->container['point_spend_division'] = $data['point_spend_division'] ?? null;
        $this->container['mileage_division'] = $data['mileage_division'] ?? null;
        $this->container['mileage_label'] = $data['mileage_label'] ?? null;
        $this->container['customer_pin_code'] = $data['customer_pin_code'] ?? null;
        $this->container['return_sales'] = $data['return_sales'] ?? null;
        $this->container['dispose_division'] = $data['dispose_division'] ?? null;
        $this->container['dispose_server_transaction_head_id'] = $data['dispose_server_transaction_head_id'] ?? null;
        $this->container['cancel_date_time'] = $data['cancel_date_time'] ?? null;
        $this->container['sell_division'] = $data['sell_division'] ?? null;
        $this->container['tax_rate'] = $data['tax_rate'] ?? null;
        $this->container['tax_rounding'] = $data['tax_rounding'] ?? null;
        $this->container['discount_rounding_division'] = $data['discount_rounding_division'] ?? null;
        $this->container['transaction_uuid'] = $data['transaction_uuid'] ?? null;
        $this->container['exchange_ticket_no'] = $data['exchange_ticket_no'] ?? null;
        $this->container['gift_receipt_valid_days'] = $data['gift_receipt_valid_days'] ?? null;
        $this->container['upd_date_time'] = $data['upd_date_time'] ?? null;
        $this->container['details'] = $data['details'] ?? null;
        $this->container['layaway'] = $data['layaway'] ?? null;
        $this->container['layaway_pick_up'] = $data['layaway_pick_up'] ?? null;
        $this->container['store'] = $data['store'] ?? null;
        $this->container['customer'] = $data['customer'] ?? null;
        $this->container['customer_groups'] = $data['customer_groups'] ?? null;
        $this->container['staff'] = $data['staff'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['transaction_head_id'] === null) {
            $invalidProperties[] = "'transaction_head_id' can't be null";
        }
        if ((mb_strlen($this->container['transaction_head_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'transaction_head_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['transaction_date_time']) && (mb_strlen($this->container['transaction_date_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'transaction_date_time', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['transaction_head_division'] === null) {
            $invalidProperties[] = "'transaction_head_division' can't be null";
        }
        if (!is_null($this->container['unit_non_discountsubtotal']) && (mb_strlen($this->container['unit_non_discountsubtotal']) < 1)) {
            $invalidProperties[] = "invalid value for 'unit_non_discountsubtotal', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['unit_discountsubtotal']) && (mb_strlen($this->container['unit_discountsubtotal']) < 1)) {
            $invalidProperties[] = "invalid value for 'unit_discountsubtotal', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['unit_staff_discountsubtotal']) && (mb_strlen($this->container['unit_staff_discountsubtotal']) < 1)) {
            $invalidProperties[] = "invalid value for 'unit_staff_discountsubtotal', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['unit_bargain_discountsubtotal']) && (mb_strlen($this->container['unit_bargain_discountsubtotal']) < 1)) {
            $invalidProperties[] = "invalid value for 'unit_bargain_discountsubtotal', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['subtotal'] === null) {
            $invalidProperties[] = "'subtotal' can't be null";
        }
        if ((mb_strlen($this->container['subtotal']) < 1)) {
            $invalidProperties[] = "invalid value for 'subtotal', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['subtotal_for_discount']) && (mb_strlen($this->container['subtotal_for_discount']) < 1)) {
            $invalidProperties[] = "invalid value for 'subtotal_for_discount', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['subtotal_discount_price']) && (mb_strlen($this->container['subtotal_discount_price']) < 1)) {
            $invalidProperties[] = "invalid value for 'subtotal_discount_price', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['subtotal_discount_rate']) && (mb_strlen($this->container['subtotal_discount_rate']) < 1)) {
            $invalidProperties[] = "invalid value for 'subtotal_discount_rate', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['subtotal_discount_division']) && (mb_strlen($this->container['subtotal_discount_division']) < 1)) {
            $invalidProperties[] = "invalid value for 'subtotal_discount_division', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['point_discount']) && (mb_strlen($this->container['point_discount']) < 1)) {
            $invalidProperties[] = "invalid value for 'point_discount', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['total'] === null) {
            $invalidProperties[] = "'total' can't be null";
        }
        if ((mb_strlen($this->container['total']) < 1)) {
            $invalidProperties[] = "invalid value for 'total', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['tax_include']) && (mb_strlen($this->container['tax_include']) < 1)) {
            $invalidProperties[] = "invalid value for 'tax_include', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['tax_exclude']) && (mb_strlen($this->container['tax_exclude']) < 1)) {
            $invalidProperties[] = "invalid value for 'tax_exclude', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['rounding_division']) && (mb_strlen($this->container['rounding_division']) < 1)) {
            $invalidProperties[] = "invalid value for 'rounding_division', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['rounding_price']) && (mb_strlen($this->container['rounding_price']) < 1)) {
            $invalidProperties[] = "invalid value for 'rounding_price', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cash_total']) && (mb_strlen($this->container['cash_total']) < 1)) {
            $invalidProperties[] = "invalid value for 'cash_total', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['credit_total']) && (mb_strlen($this->container['credit_total']) < 1)) {
            $invalidProperties[] = "invalid value for 'credit_total', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['deposit']) && (mb_strlen($this->container['deposit']) < 1)) {
            $invalidProperties[] = "invalid value for 'deposit', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['deposit_cash']) && (mb_strlen($this->container['deposit_cash']) < 1)) {
            $invalidProperties[] = "invalid value for 'deposit_cash', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['deposit_credit']) && (mb_strlen($this->container['deposit_credit']) < 1)) {
            $invalidProperties[] = "invalid value for 'deposit_credit', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['change']) && (mb_strlen($this->container['change']) < 1)) {
            $invalidProperties[] = "invalid value for 'change', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['tip_cash']) && (mb_strlen($this->container['tip_cash']) < 1)) {
            $invalidProperties[] = "invalid value for 'tip_cash', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['tip_credit']) && (mb_strlen($this->container['tip_credit']) < 1)) {
            $invalidProperties[] = "invalid value for 'tip_credit', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['amount']) && (mb_strlen($this->container['amount']) < 1)) {
            $invalidProperties[] = "invalid value for 'amount', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['return_amount']) && (mb_strlen($this->container['return_amount']) < 1)) {
            $invalidProperties[] = "invalid value for 'return_amount', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cost_total']) && (mb_strlen($this->container['cost_total']) < 1)) {
            $invalidProperties[] = "invalid value for 'cost_total', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sales_head_division']) && (mb_strlen($this->container['sales_head_division']) < 1)) {
            $invalidProperties[] = "invalid value for 'sales_head_division', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['in_tax_sales_total']) && (mb_strlen($this->container['in_tax_sales_total']) < 1)) {
            $invalidProperties[] = "invalid value for 'in_tax_sales_total', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['out_tax_sales_total']) && (mb_strlen($this->container['out_tax_sales_total']) < 1)) {
            $invalidProperties[] = "invalid value for 'out_tax_sales_total', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['non_tax_sales_total']) && (mb_strlen($this->container['non_tax_sales_total']) < 1)) {
            $invalidProperties[] = "invalid value for 'non_tax_sales_total', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['non_sales_target_total']) && (mb_strlen($this->container['non_sales_target_total']) < 1)) {
            $invalidProperties[] = "invalid value for 'non_sales_target_total', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['non_sales_target_in_tax_total']) && (mb_strlen($this->container['non_sales_target_in_tax_total']) < 1)) {
            $invalidProperties[] = "invalid value for 'non_sales_target_in_tax_total', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['non_sales_target_out_tax_total']) && (mb_strlen($this->container['non_sales_target_out_tax_total']) < 1)) {
            $invalidProperties[] = "invalid value for 'non_sales_target_out_tax_total', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['non_sales_target_tax_free_total']) && (mb_strlen($this->container['non_sales_target_tax_free_total']) < 1)) {
            $invalidProperties[] = "invalid value for 'non_sales_target_tax_free_total', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['non_sales_target_cost_total']) && (mb_strlen($this->container['non_sales_target_cost_total']) < 1)) {
            $invalidProperties[] = "invalid value for 'non_sales_target_cost_total', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['non_sales_target_amount']) && (mb_strlen($this->container['non_sales_target_amount']) < 1)) {
            $invalidProperties[] = "invalid value for 'non_sales_target_amount', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['non_sales_target_return_amount']) && (mb_strlen($this->container['non_sales_target_return_amount']) < 1)) {
            $invalidProperties[] = "invalid value for 'non_sales_target_return_amount', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['new_point']) && (mb_strlen($this->container['new_point']) < 1)) {
            $invalidProperties[] = "invalid value for 'new_point', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['spend_point']) && (mb_strlen($this->container['spend_point']) < 1)) {
            $invalidProperties[] = "invalid value for 'spend_point', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['point']) && (mb_strlen($this->container['point']) < 1)) {
            $invalidProperties[] = "invalid value for 'point', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['total_point']) && (mb_strlen($this->container['total_point']) < 1)) {
            $invalidProperties[] = "invalid value for 'total_point', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['current_mile']) && (mb_strlen($this->container['current_mile']) < 1)) {
            $invalidProperties[] = "invalid value for 'current_mile', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['earn_mile']) && (mb_strlen($this->container['earn_mile']) < 1)) {
            $invalidProperties[] = "invalid value for 'earn_mile', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['total_mile']) && (mb_strlen($this->container['total_mile']) < 1)) {
            $invalidProperties[] = "invalid value for 'total_mile', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['adjustment_mile']) && (mb_strlen($this->container['adjustment_mile']) < 1)) {
            $invalidProperties[] = "invalid value for 'adjustment_mile', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['adjustment_mile_division']) && (mb_strlen($this->container['adjustment_mile_division']) < 1)) {
            $invalidProperties[] = "invalid value for 'adjustment_mile_division', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['adjustment_mile_value']) && (mb_strlen($this->container['adjustment_mile_value']) < 1)) {
            $invalidProperties[] = "invalid value for 'adjustment_mile_value', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['store_id']) && (mb_strlen($this->container['store_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'store_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['terminal_id']) && (mb_strlen($this->container['terminal_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'terminal_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['customer_id']) && (mb_strlen($this->container['customer_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'customer_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['terminal_tran_id']) && (mb_strlen($this->container['terminal_tran_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'terminal_tran_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['terminal_tran_date_time'] === null) {
            $invalidProperties[] = "'terminal_tran_date_time' can't be null";
        }
        if ((mb_strlen($this->container['terminal_tran_date_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'terminal_tran_date_time', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sum_division']) && (mb_strlen($this->container['sum_division']) < 1)) {
            $invalidProperties[] = "invalid value for 'sum_division', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['adjustment_date_time']) && (mb_strlen($this->container['adjustment_date_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'adjustment_date_time', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sum_date']) && (mb_strlen($this->container['sum_date']) < 1)) {
            $invalidProperties[] = "invalid value for 'sum_date', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['customer_rank']) && (mb_strlen($this->container['customer_rank']) < 1)) {
            $invalidProperties[] = "invalid value for 'customer_rank', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['customer_group_id']) && (mb_strlen($this->container['customer_group_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'customer_group_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['customer_group_id2']) && (mb_strlen($this->container['customer_group_id2']) < 1)) {
            $invalidProperties[] = "invalid value for 'customer_group_id2', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['customer_group_id3']) && (mb_strlen($this->container['customer_group_id3']) < 1)) {
            $invalidProperties[] = "invalid value for 'customer_group_id3', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['customer_group_id4']) && (mb_strlen($this->container['customer_group_id4']) < 1)) {
            $invalidProperties[] = "invalid value for 'customer_group_id4', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['customer_group_id5']) && (mb_strlen($this->container['customer_group_id5']) < 1)) {
            $invalidProperties[] = "invalid value for 'customer_group_id5', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['staff_id']) && (mb_strlen($this->container['staff_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'staff_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['staff_name']) && (mb_strlen($this->container['staff_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'staff_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['credit_division']) && (mb_strlen($this->container['credit_division']) < 1)) {
            $invalidProperties[] = "invalid value for 'credit_division', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['payment_count']) && (mb_strlen($this->container['payment_count']) < 1)) {
            $invalidProperties[] = "invalid value for 'payment_count', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['slip_number']) && (mb_strlen($this->container['slip_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'slip_number', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cancel_slip_number']) && (mb_strlen($this->container['cancel_slip_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'cancel_slip_number', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['auth_number']) && (mb_strlen($this->container['auth_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'auth_number', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['auth_date']) && (mb_strlen($this->container['auth_date']) < 1)) {
            $invalidProperties[] = "invalid value for 'auth_date', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['card_company']) && (mb_strlen($this->container['card_company']) < 1)) {
            $invalidProperties[] = "invalid value for 'card_company', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['denomination']) && (mb_strlen($this->container['denomination']) < 1)) {
            $invalidProperties[] = "invalid value for 'denomination', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['memo']) && (mb_strlen($this->container['memo']) < 1)) {
            $invalidProperties[] = "invalid value for 'memo', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['receipt_memo']) && (mb_strlen($this->container['receipt_memo']) < 1)) {
            $invalidProperties[] = "invalid value for 'receipt_memo', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['carriage']) && (mb_strlen($this->container['carriage']) < 1)) {
            $invalidProperties[] = "invalid value for 'carriage', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['commission']) && (mb_strlen($this->container['commission']) < 1)) {
            $invalidProperties[] = "invalid value for 'commission', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['guest_numbers']) && (mb_strlen($this->container['guest_numbers']) < 1)) {
            $invalidProperties[] = "invalid value for 'guest_numbers', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['guest_numbers_male']) && (mb_strlen($this->container['guest_numbers_male']) < 1)) {
            $invalidProperties[] = "invalid value for 'guest_numbers_male', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['guest_numbers_female']) && (mb_strlen($this->container['guest_numbers_female']) < 1)) {
            $invalidProperties[] = "invalid value for 'guest_numbers_female', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['enter_date_time']) && (mb_strlen($this->container['enter_date_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'enter_date_time', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['tax_free_sales_division']) && (mb_strlen($this->container['tax_free_sales_division']) < 1)) {
            $invalidProperties[] = "invalid value for 'tax_free_sales_division', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['net_tax_free_general_tax_include']) && (mb_strlen($this->container['net_tax_free_general_tax_include']) < 1)) {
            $invalidProperties[] = "invalid value for 'net_tax_free_general_tax_include', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['net_tax_free_general_tax_exclude']) && (mb_strlen($this->container['net_tax_free_general_tax_exclude']) < 1)) {
            $invalidProperties[] = "invalid value for 'net_tax_free_general_tax_exclude', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['net_tax_free_consumable_tax_include']) && (mb_strlen($this->container['net_tax_free_consumable_tax_include']) < 1)) {
            $invalidProperties[] = "invalid value for 'net_tax_free_consumable_tax_include', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['net_tax_free_consumable_tax_exclude']) && (mb_strlen($this->container['net_tax_free_consumable_tax_exclude']) < 1)) {
            $invalidProperties[] = "invalid value for 'net_tax_free_consumable_tax_exclude', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['tags']) && (mb_strlen($this->container['tags']) < 1)) {
            $invalidProperties[] = "invalid value for 'tags', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['point_giving_division']) && (mb_strlen($this->container['point_giving_division']) < 1)) {
            $invalidProperties[] = "invalid value for 'point_giving_division', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['point_giving_unit_price']) && (mb_strlen($this->container['point_giving_unit_price']) < 1)) {
            $invalidProperties[] = "invalid value for 'point_giving_unit_price', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['point_giving_unit']) && (mb_strlen($this->container['point_giving_unit']) < 1)) {
            $invalidProperties[] = "invalid value for 'point_giving_unit', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['point_spend_division']) && (mb_strlen($this->container['point_spend_division']) < 1)) {
            $invalidProperties[] = "invalid value for 'point_spend_division', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['mileage_division']) && (mb_strlen($this->container['mileage_division']) < 1)) {
            $invalidProperties[] = "invalid value for 'mileage_division', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['mileage_label']) && (mb_strlen($this->container['mileage_label']) < 1)) {
            $invalidProperties[] = "invalid value for 'mileage_label', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['customer_pin_code']) && (mb_strlen($this->container['customer_pin_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'customer_pin_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['return_sales'] === null) {
            $invalidProperties[] = "'return_sales' can't be null";
        }
        if (!is_null($this->container['dispose_server_transaction_head_id']) && (mb_strlen($this->container['dispose_server_transaction_head_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'dispose_server_transaction_head_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cancel_date_time']) && (mb_strlen($this->container['cancel_date_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'cancel_date_time', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sell_division']) && (mb_strlen($this->container['sell_division']) < 1)) {
            $invalidProperties[] = "invalid value for 'sell_division', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['tax_rate']) && (mb_strlen($this->container['tax_rate']) < 1)) {
            $invalidProperties[] = "invalid value for 'tax_rate', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['tax_rounding']) && (mb_strlen($this->container['tax_rounding']) < 1)) {
            $invalidProperties[] = "invalid value for 'tax_rounding', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['discount_rounding_division']) && (mb_strlen($this->container['discount_rounding_division']) < 1)) {
            $invalidProperties[] = "invalid value for 'discount_rounding_division', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['transaction_uuid']) && (mb_strlen($this->container['transaction_uuid']) < 1)) {
            $invalidProperties[] = "invalid value for 'transaction_uuid', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['exchange_ticket_no']) && (mb_strlen($this->container['exchange_ticket_no']) < 1)) {
            $invalidProperties[] = "invalid value for 'exchange_ticket_no', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['gift_receipt_valid_days']) && (mb_strlen($this->container['gift_receipt_valid_days']) < 1)) {
            $invalidProperties[] = "invalid value for 'gift_receipt_valid_days', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['upd_date_time']) && (mb_strlen($this->container['upd_date_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'upd_date_time', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['details']) && (count($this->container['details']) < 1)) {
            $invalidProperties[] = "invalid value for 'details', number of items must be greater than or equal to 1.";
        }

        if (!is_null($this->container['customer_groups']) && (count($this->container['customer_groups']) < 1)) {
            $invalidProperties[] = "invalid value for 'customer_groups', number of items must be greater than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_head_id
     *
     * @return string
     */
    public function getTransactionHeadId()
    {
        return $this->container['transaction_head_id'];
    }

    /**
     * Sets transaction_head_id
     *
     * @param string $transaction_head_id transaction_head_id
     *
     * @return self
     */
    public function setTransactionHeadId($transaction_head_id)
    {

        if ((mb_strlen($transaction_head_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $transaction_head_id when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['transaction_head_id'] = $transaction_head_id;

        return $this;
    }

    /**
     * Gets transaction_date_time
     *
     * @return string|null
     */
    public function getTransactionDateTime()
    {
        return $this->container['transaction_date_time'];
    }

    /**
     * Sets transaction_date_time
     *
     * @param string|null $transaction_date_time transaction_date_time
     *
     * @return self
     */
    public function setTransactionDateTime($transaction_date_time)
    {

        if (!is_null($transaction_date_time) && (mb_strlen($transaction_date_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $transaction_date_time when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['transaction_date_time'] = $transaction_date_time;

        return $this;
    }

    /**
     * Gets transaction_head_division
     *
     * @return \OpenAPI\Client\Model\TransactionHeadDivision
     */
    public function getTransactionHeadDivision()
    {
        return $this->container['transaction_head_division'];
    }

    /**
     * Sets transaction_head_division
     *
     * @param \OpenAPI\Client\Model\TransactionHeadDivision $transaction_head_division transaction_head_division
     *
     * @return self
     */
    public function setTransactionHeadDivision($transaction_head_division)
    {
        $this->container['transaction_head_division'] = $transaction_head_division;

        return $this;
    }

    /**
     * Gets cancel_division
     *
     * @return \OpenAPI\Client\Model\CancelDivision|null
     */
    public function getCancelDivision()
    {
        return $this->container['cancel_division'];
    }

    /**
     * Sets cancel_division
     *
     * @param \OpenAPI\Client\Model\CancelDivision|null $cancel_division cancel_division
     *
     * @return self
     */
    public function setCancelDivision($cancel_division)
    {
        $this->container['cancel_division'] = $cancel_division;

        return $this;
    }

    /**
     * Gets unit_non_discountsubtotal
     *
     * @return string|null
     */
    public function getUnitNonDiscountsubtotal()
    {
        return $this->container['unit_non_discountsubtotal'];
    }

    /**
     * Sets unit_non_discountsubtotal
     *
     * @param string|null $unit_non_discountsubtotal unit_non_discountsubtotal
     *
     * @return self
     */
    public function setUnitNonDiscountsubtotal($unit_non_discountsubtotal)
    {

        if (!is_null($unit_non_discountsubtotal) && (mb_strlen($unit_non_discountsubtotal) < 1)) {
            throw new \InvalidArgumentException('invalid length for $unit_non_discountsubtotal when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['unit_non_discountsubtotal'] = $unit_non_discountsubtotal;

        return $this;
    }

    /**
     * Gets unit_discountsubtotal
     *
     * @return string|null
     */
    public function getUnitDiscountsubtotal()
    {
        return $this->container['unit_discountsubtotal'];
    }

    /**
     * Sets unit_discountsubtotal
     *
     * @param string|null $unit_discountsubtotal unit_discountsubtotal
     *
     * @return self
     */
    public function setUnitDiscountsubtotal($unit_discountsubtotal)
    {

        if (!is_null($unit_discountsubtotal) && (mb_strlen($unit_discountsubtotal) < 1)) {
            throw new \InvalidArgumentException('invalid length for $unit_discountsubtotal when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['unit_discountsubtotal'] = $unit_discountsubtotal;

        return $this;
    }

    /**
     * Gets unit_staff_discountsubtotal
     *
     * @return string|null
     */
    public function getUnitStaffDiscountsubtotal()
    {
        return $this->container['unit_staff_discountsubtotal'];
    }

    /**
     * Sets unit_staff_discountsubtotal
     *
     * @param string|null $unit_staff_discountsubtotal unit_staff_discountsubtotal
     *
     * @return self
     */
    public function setUnitStaffDiscountsubtotal($unit_staff_discountsubtotal)
    {

        if (!is_null($unit_staff_discountsubtotal) && (mb_strlen($unit_staff_discountsubtotal) < 1)) {
            throw new \InvalidArgumentException('invalid length for $unit_staff_discountsubtotal when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['unit_staff_discountsubtotal'] = $unit_staff_discountsubtotal;

        return $this;
    }

    /**
     * Gets unit_bargain_discountsubtotal
     *
     * @return string|null
     */
    public function getUnitBargainDiscountsubtotal()
    {
        return $this->container['unit_bargain_discountsubtotal'];
    }

    /**
     * Sets unit_bargain_discountsubtotal
     *
     * @param string|null $unit_bargain_discountsubtotal unit_bargain_discountsubtotal
     *
     * @return self
     */
    public function setUnitBargainDiscountsubtotal($unit_bargain_discountsubtotal)
    {

        if (!is_null($unit_bargain_discountsubtotal) && (mb_strlen($unit_bargain_discountsubtotal) < 1)) {
            throw new \InvalidArgumentException('invalid length for $unit_bargain_discountsubtotal when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['unit_bargain_discountsubtotal'] = $unit_bargain_discountsubtotal;

        return $this;
    }

    /**
     * Gets subtotal
     *
     * @return string
     */
    public function getSubtotal()
    {
        return $this->container['subtotal'];
    }

    /**
     * Sets subtotal
     *
     * @param string $subtotal subtotal
     *
     * @return self
     */
    public function setSubtotal($subtotal)
    {

        if ((mb_strlen($subtotal) < 1)) {
            throw new \InvalidArgumentException('invalid length for $subtotal when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['subtotal'] = $subtotal;

        return $this;
    }

    /**
     * Gets subtotal_for_discount
     *
     * @return string|null
     */
    public function getSubtotalForDiscount()
    {
        return $this->container['subtotal_for_discount'];
    }

    /**
     * Sets subtotal_for_discount
     *
     * @param string|null $subtotal_for_discount subtotal_for_discount
     *
     * @return self
     */
    public function setSubtotalForDiscount($subtotal_for_discount)
    {

        if (!is_null($subtotal_for_discount) && (mb_strlen($subtotal_for_discount) < 1)) {
            throw new \InvalidArgumentException('invalid length for $subtotal_for_discount when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['subtotal_for_discount'] = $subtotal_for_discount;

        return $this;
    }

    /**
     * Gets subtotal_discount_price
     *
     * @return string|null
     */
    public function getSubtotalDiscountPrice()
    {
        return $this->container['subtotal_discount_price'];
    }

    /**
     * Sets subtotal_discount_price
     *
     * @param string|null $subtotal_discount_price subtotal_discount_price
     *
     * @return self
     */
    public function setSubtotalDiscountPrice($subtotal_discount_price)
    {

        if (!is_null($subtotal_discount_price) && (mb_strlen($subtotal_discount_price) < 1)) {
            throw new \InvalidArgumentException('invalid length for $subtotal_discount_price when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['subtotal_discount_price'] = $subtotal_discount_price;

        return $this;
    }

    /**
     * Gets subtotal_discount_rate
     *
     * @return string|null
     */
    public function getSubtotalDiscountRate()
    {
        return $this->container['subtotal_discount_rate'];
    }

    /**
     * Sets subtotal_discount_rate
     *
     * @param string|null $subtotal_discount_rate subtotal_discount_rate
     *
     * @return self
     */
    public function setSubtotalDiscountRate($subtotal_discount_rate)
    {

        if (!is_null($subtotal_discount_rate) && (mb_strlen($subtotal_discount_rate) < 1)) {
            throw new \InvalidArgumentException('invalid length for $subtotal_discount_rate when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['subtotal_discount_rate'] = $subtotal_discount_rate;

        return $this;
    }

    /**
     * Gets subtotal_discount_division
     *
     * @return string|null
     */
    public function getSubtotalDiscountDivision()
    {
        return $this->container['subtotal_discount_division'];
    }

    /**
     * Sets subtotal_discount_division
     *
     * @param string|null $subtotal_discount_division subtotal_discount_division
     *
     * @return self
     */
    public function setSubtotalDiscountDivision($subtotal_discount_division)
    {

        if (!is_null($subtotal_discount_division) && (mb_strlen($subtotal_discount_division) < 1)) {
            throw new \InvalidArgumentException('invalid length for $subtotal_discount_division when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['subtotal_discount_division'] = $subtotal_discount_division;

        return $this;
    }

    /**
     * Gets point_discount
     *
     * @return string|null
     */
    public function getPointDiscount()
    {
        return $this->container['point_discount'];
    }

    /**
     * Sets point_discount
     *
     * @param string|null $point_discount point_discount
     *
     * @return self
     */
    public function setPointDiscount($point_discount)
    {

        if (!is_null($point_discount) && (mb_strlen($point_discount) < 1)) {
            throw new \InvalidArgumentException('invalid length for $point_discount when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['point_discount'] = $point_discount;

        return $this;
    }

    /**
     * Gets total
     *
     * @return string
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param string $total total
     *
     * @return self
     */
    public function setTotal($total)
    {

        if ((mb_strlen($total) < 1)) {
            throw new \InvalidArgumentException('invalid length for $total when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets tax_include
     *
     * @return string|null
     */
    public function getTaxInclude()
    {
        return $this->container['tax_include'];
    }

    /**
     * Sets tax_include
     *
     * @param string|null $tax_include tax_include
     *
     * @return self
     */
    public function setTaxInclude($tax_include)
    {

        if (!is_null($tax_include) && (mb_strlen($tax_include) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tax_include when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['tax_include'] = $tax_include;

        return $this;
    }

    /**
     * Gets tax_exclude
     *
     * @return string|null
     */
    public function getTaxExclude()
    {
        return $this->container['tax_exclude'];
    }

    /**
     * Sets tax_exclude
     *
     * @param string|null $tax_exclude tax_exclude
     *
     * @return self
     */
    public function setTaxExclude($tax_exclude)
    {

        if (!is_null($tax_exclude) && (mb_strlen($tax_exclude) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tax_exclude when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['tax_exclude'] = $tax_exclude;

        return $this;
    }

    /**
     * Gets rounding_division
     *
     * @return string|null
     */
    public function getRoundingDivision()
    {
        return $this->container['rounding_division'];
    }

    /**
     * Sets rounding_division
     *
     * @param string|null $rounding_division rounding_division
     *
     * @return self
     */
    public function setRoundingDivision($rounding_division)
    {

        if (!is_null($rounding_division) && (mb_strlen($rounding_division) < 1)) {
            throw new \InvalidArgumentException('invalid length for $rounding_division when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['rounding_division'] = $rounding_division;

        return $this;
    }

    /**
     * Gets rounding_price
     *
     * @return string|null
     */
    public function getRoundingPrice()
    {
        return $this->container['rounding_price'];
    }

    /**
     * Sets rounding_price
     *
     * @param string|null $rounding_price rounding_price
     *
     * @return self
     */
    public function setRoundingPrice($rounding_price)
    {

        if (!is_null($rounding_price) && (mb_strlen($rounding_price) < 1)) {
            throw new \InvalidArgumentException('invalid length for $rounding_price when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['rounding_price'] = $rounding_price;

        return $this;
    }

    /**
     * Gets cash_total
     *
     * @return string|null
     */
    public function getCashTotal()
    {
        return $this->container['cash_total'];
    }

    /**
     * Sets cash_total
     *
     * @param string|null $cash_total cash_total
     *
     * @return self
     */
    public function setCashTotal($cash_total)
    {

        if (!is_null($cash_total) && (mb_strlen($cash_total) < 1)) {
            throw new \InvalidArgumentException('invalid length for $cash_total when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['cash_total'] = $cash_total;

        return $this;
    }

    /**
     * Gets credit_total
     *
     * @return string|null
     */
    public function getCreditTotal()
    {
        return $this->container['credit_total'];
    }

    /**
     * Sets credit_total
     *
     * @param string|null $credit_total credit_total
     *
     * @return self
     */
    public function setCreditTotal($credit_total)
    {

        if (!is_null($credit_total) && (mb_strlen($credit_total) < 1)) {
            throw new \InvalidArgumentException('invalid length for $credit_total when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['credit_total'] = $credit_total;

        return $this;
    }

    /**
     * Gets deposit
     *
     * @return string|null
     */
    public function getDeposit()
    {
        return $this->container['deposit'];
    }

    /**
     * Sets deposit
     *
     * @param string|null $deposit deposit
     *
     * @return self
     */
    public function setDeposit($deposit)
    {

        if (!is_null($deposit) && (mb_strlen($deposit) < 1)) {
            throw new \InvalidArgumentException('invalid length for $deposit when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['deposit'] = $deposit;

        return $this;
    }

    /**
     * Gets deposit_cash
     *
     * @return string|null
     */
    public function getDepositCash()
    {
        return $this->container['deposit_cash'];
    }

    /**
     * Sets deposit_cash
     *
     * @param string|null $deposit_cash deposit_cash
     *
     * @return self
     */
    public function setDepositCash($deposit_cash)
    {

        if (!is_null($deposit_cash) && (mb_strlen($deposit_cash) < 1)) {
            throw new \InvalidArgumentException('invalid length for $deposit_cash when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['deposit_cash'] = $deposit_cash;

        return $this;
    }

    /**
     * Gets deposit_credit
     *
     * @return string|null
     */
    public function getDepositCredit()
    {
        return $this->container['deposit_credit'];
    }

    /**
     * Sets deposit_credit
     *
     * @param string|null $deposit_credit deposit_credit
     *
     * @return self
     */
    public function setDepositCredit($deposit_credit)
    {

        if (!is_null($deposit_credit) && (mb_strlen($deposit_credit) < 1)) {
            throw new \InvalidArgumentException('invalid length for $deposit_credit when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['deposit_credit'] = $deposit_credit;

        return $this;
    }

    /**
     * Gets change
     *
     * @return string|null
     */
    public function getChange()
    {
        return $this->container['change'];
    }

    /**
     * Sets change
     *
     * @param string|null $change change
     *
     * @return self
     */
    public function setChange($change)
    {

        if (!is_null($change) && (mb_strlen($change) < 1)) {
            throw new \InvalidArgumentException('invalid length for $change when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['change'] = $change;

        return $this;
    }

    /**
     * Gets tip_cash
     *
     * @return string|null
     */
    public function getTipCash()
    {
        return $this->container['tip_cash'];
    }

    /**
     * Sets tip_cash
     *
     * @param string|null $tip_cash tip_cash
     *
     * @return self
     */
    public function setTipCash($tip_cash)
    {

        if (!is_null($tip_cash) && (mb_strlen($tip_cash) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tip_cash when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['tip_cash'] = $tip_cash;

        return $this;
    }

    /**
     * Gets tip_credit
     *
     * @return string|null
     */
    public function getTipCredit()
    {
        return $this->container['tip_credit'];
    }

    /**
     * Sets tip_credit
     *
     * @param string|null $tip_credit tip_credit
     *
     * @return self
     */
    public function setTipCredit($tip_credit)
    {

        if (!is_null($tip_credit) && (mb_strlen($tip_credit) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tip_credit when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['tip_credit'] = $tip_credit;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return string|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {

        if (!is_null($amount) && (mb_strlen($amount) < 1)) {
            throw new \InvalidArgumentException('invalid length for $amount when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets return_amount
     *
     * @return string|null
     */
    public function getReturnAmount()
    {
        return $this->container['return_amount'];
    }

    /**
     * Sets return_amount
     *
     * @param string|null $return_amount return_amount
     *
     * @return self
     */
    public function setReturnAmount($return_amount)
    {

        if (!is_null($return_amount) && (mb_strlen($return_amount) < 1)) {
            throw new \InvalidArgumentException('invalid length for $return_amount when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['return_amount'] = $return_amount;

        return $this;
    }

    /**
     * Gets cost_total
     *
     * @return string|null
     */
    public function getCostTotal()
    {
        return $this->container['cost_total'];
    }

    /**
     * Sets cost_total
     *
     * @param string|null $cost_total cost_total
     *
     * @return self
     */
    public function setCostTotal($cost_total)
    {

        if (!is_null($cost_total) && (mb_strlen($cost_total) < 1)) {
            throw new \InvalidArgumentException('invalid length for $cost_total when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['cost_total'] = $cost_total;

        return $this;
    }

    /**
     * Gets sales_head_division
     *
     * @return string|null
     */
    public function getSalesHeadDivision()
    {
        return $this->container['sales_head_division'];
    }

    /**
     * Sets sales_head_division
     *
     * @param string|null $sales_head_division sales_head_division
     *
     * @return self
     */
    public function setSalesHeadDivision($sales_head_division)
    {

        if (!is_null($sales_head_division) && (mb_strlen($sales_head_division) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sales_head_division when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['sales_head_division'] = $sales_head_division;

        return $this;
    }

    /**
     * Gets in_tax_sales_total
     *
     * @return string|null
     */
    public function getInTaxSalesTotal()
    {
        return $this->container['in_tax_sales_total'];
    }

    /**
     * Sets in_tax_sales_total
     *
     * @param string|null $in_tax_sales_total in_tax_sales_total
     *
     * @return self
     */
    public function setInTaxSalesTotal($in_tax_sales_total)
    {

        if (!is_null($in_tax_sales_total) && (mb_strlen($in_tax_sales_total) < 1)) {
            throw new \InvalidArgumentException('invalid length for $in_tax_sales_total when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['in_tax_sales_total'] = $in_tax_sales_total;

        return $this;
    }

    /**
     * Gets out_tax_sales_total
     *
     * @return string|null
     */
    public function getOutTaxSalesTotal()
    {
        return $this->container['out_tax_sales_total'];
    }

    /**
     * Sets out_tax_sales_total
     *
     * @param string|null $out_tax_sales_total out_tax_sales_total
     *
     * @return self
     */
    public function setOutTaxSalesTotal($out_tax_sales_total)
    {

        if (!is_null($out_tax_sales_total) && (mb_strlen($out_tax_sales_total) < 1)) {
            throw new \InvalidArgumentException('invalid length for $out_tax_sales_total when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['out_tax_sales_total'] = $out_tax_sales_total;

        return $this;
    }

    /**
     * Gets non_tax_sales_total
     *
     * @return string|null
     */
    public function getNonTaxSalesTotal()
    {
        return $this->container['non_tax_sales_total'];
    }

    /**
     * Sets non_tax_sales_total
     *
     * @param string|null $non_tax_sales_total non_tax_sales_total
     *
     * @return self
     */
    public function setNonTaxSalesTotal($non_tax_sales_total)
    {

        if (!is_null($non_tax_sales_total) && (mb_strlen($non_tax_sales_total) < 1)) {
            throw new \InvalidArgumentException('invalid length for $non_tax_sales_total when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['non_tax_sales_total'] = $non_tax_sales_total;

        return $this;
    }

    /**
     * Gets non_sales_target_total
     *
     * @return string|null
     */
    public function getNonSalesTargetTotal()
    {
        return $this->container['non_sales_target_total'];
    }

    /**
     * Sets non_sales_target_total
     *
     * @param string|null $non_sales_target_total non_sales_target_total
     *
     * @return self
     */
    public function setNonSalesTargetTotal($non_sales_target_total)
    {

        if (!is_null($non_sales_target_total) && (mb_strlen($non_sales_target_total) < 1)) {
            throw new \InvalidArgumentException('invalid length for $non_sales_target_total when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['non_sales_target_total'] = $non_sales_target_total;

        return $this;
    }

    /**
     * Gets non_sales_target_in_tax_total
     *
     * @return string|null
     */
    public function getNonSalesTargetInTaxTotal()
    {
        return $this->container['non_sales_target_in_tax_total'];
    }

    /**
     * Sets non_sales_target_in_tax_total
     *
     * @param string|null $non_sales_target_in_tax_total non_sales_target_in_tax_total
     *
     * @return self
     */
    public function setNonSalesTargetInTaxTotal($non_sales_target_in_tax_total)
    {

        if (!is_null($non_sales_target_in_tax_total) && (mb_strlen($non_sales_target_in_tax_total) < 1)) {
            throw new \InvalidArgumentException('invalid length for $non_sales_target_in_tax_total when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['non_sales_target_in_tax_total'] = $non_sales_target_in_tax_total;

        return $this;
    }

    /**
     * Gets non_sales_target_out_tax_total
     *
     * @return string|null
     */
    public function getNonSalesTargetOutTaxTotal()
    {
        return $this->container['non_sales_target_out_tax_total'];
    }

    /**
     * Sets non_sales_target_out_tax_total
     *
     * @param string|null $non_sales_target_out_tax_total non_sales_target_out_tax_total
     *
     * @return self
     */
    public function setNonSalesTargetOutTaxTotal($non_sales_target_out_tax_total)
    {

        if (!is_null($non_sales_target_out_tax_total) && (mb_strlen($non_sales_target_out_tax_total) < 1)) {
            throw new \InvalidArgumentException('invalid length for $non_sales_target_out_tax_total when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['non_sales_target_out_tax_total'] = $non_sales_target_out_tax_total;

        return $this;
    }

    /**
     * Gets non_sales_target_tax_free_total
     *
     * @return string|null
     */
    public function getNonSalesTargetTaxFreeTotal()
    {
        return $this->container['non_sales_target_tax_free_total'];
    }

    /**
     * Sets non_sales_target_tax_free_total
     *
     * @param string|null $non_sales_target_tax_free_total non_sales_target_tax_free_total
     *
     * @return self
     */
    public function setNonSalesTargetTaxFreeTotal($non_sales_target_tax_free_total)
    {

        if (!is_null($non_sales_target_tax_free_total) && (mb_strlen($non_sales_target_tax_free_total) < 1)) {
            throw new \InvalidArgumentException('invalid length for $non_sales_target_tax_free_total when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['non_sales_target_tax_free_total'] = $non_sales_target_tax_free_total;

        return $this;
    }

    /**
     * Gets non_sales_target_cost_total
     *
     * @return string|null
     */
    public function getNonSalesTargetCostTotal()
    {
        return $this->container['non_sales_target_cost_total'];
    }

    /**
     * Sets non_sales_target_cost_total
     *
     * @param string|null $non_sales_target_cost_total non_sales_target_cost_total
     *
     * @return self
     */
    public function setNonSalesTargetCostTotal($non_sales_target_cost_total)
    {

        if (!is_null($non_sales_target_cost_total) && (mb_strlen($non_sales_target_cost_total) < 1)) {
            throw new \InvalidArgumentException('invalid length for $non_sales_target_cost_total when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['non_sales_target_cost_total'] = $non_sales_target_cost_total;

        return $this;
    }

    /**
     * Gets non_sales_target_amount
     *
     * @return string|null
     */
    public function getNonSalesTargetAmount()
    {
        return $this->container['non_sales_target_amount'];
    }

    /**
     * Sets non_sales_target_amount
     *
     * @param string|null $non_sales_target_amount non_sales_target_amount
     *
     * @return self
     */
    public function setNonSalesTargetAmount($non_sales_target_amount)
    {

        if (!is_null($non_sales_target_amount) && (mb_strlen($non_sales_target_amount) < 1)) {
            throw new \InvalidArgumentException('invalid length for $non_sales_target_amount when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['non_sales_target_amount'] = $non_sales_target_amount;

        return $this;
    }

    /**
     * Gets non_sales_target_return_amount
     *
     * @return string|null
     */
    public function getNonSalesTargetReturnAmount()
    {
        return $this->container['non_sales_target_return_amount'];
    }

    /**
     * Sets non_sales_target_return_amount
     *
     * @param string|null $non_sales_target_return_amount non_sales_target_return_amount
     *
     * @return self
     */
    public function setNonSalesTargetReturnAmount($non_sales_target_return_amount)
    {

        if (!is_null($non_sales_target_return_amount) && (mb_strlen($non_sales_target_return_amount) < 1)) {
            throw new \InvalidArgumentException('invalid length for $non_sales_target_return_amount when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['non_sales_target_return_amount'] = $non_sales_target_return_amount;

        return $this;
    }

    /**
     * Gets new_point
     *
     * @return string|null
     */
    public function getNewPoint()
    {
        return $this->container['new_point'];
    }

    /**
     * Sets new_point
     *
     * @param string|null $new_point new_point
     *
     * @return self
     */
    public function setNewPoint($new_point)
    {

        if (!is_null($new_point) && (mb_strlen($new_point) < 1)) {
            throw new \InvalidArgumentException('invalid length for $new_point when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['new_point'] = $new_point;

        return $this;
    }

    /**
     * Gets spend_point
     *
     * @return string|null
     */
    public function getSpendPoint()
    {
        return $this->container['spend_point'];
    }

    /**
     * Sets spend_point
     *
     * @param string|null $spend_point spend_point
     *
     * @return self
     */
    public function setSpendPoint($spend_point)
    {

        if (!is_null($spend_point) && (mb_strlen($spend_point) < 1)) {
            throw new \InvalidArgumentException('invalid length for $spend_point when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['spend_point'] = $spend_point;

        return $this;
    }

    /**
     * Gets point
     *
     * @return string|null
     */
    public function getPoint()
    {
        return $this->container['point'];
    }

    /**
     * Sets point
     *
     * @param string|null $point point
     *
     * @return self
     */
    public function setPoint($point)
    {

        if (!is_null($point) && (mb_strlen($point) < 1)) {
            throw new \InvalidArgumentException('invalid length for $point when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['point'] = $point;

        return $this;
    }

    /**
     * Gets total_point
     *
     * @return string|null
     */
    public function getTotalPoint()
    {
        return $this->container['total_point'];
    }

    /**
     * Sets total_point
     *
     * @param string|null $total_point total_point
     *
     * @return self
     */
    public function setTotalPoint($total_point)
    {

        if (!is_null($total_point) && (mb_strlen($total_point) < 1)) {
            throw new \InvalidArgumentException('invalid length for $total_point when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['total_point'] = $total_point;

        return $this;
    }

    /**
     * Gets current_mile
     *
     * @return string|null
     */
    public function getCurrentMile()
    {
        return $this->container['current_mile'];
    }

    /**
     * Sets current_mile
     *
     * @param string|null $current_mile current_mile
     *
     * @return self
     */
    public function setCurrentMile($current_mile)
    {

        if (!is_null($current_mile) && (mb_strlen($current_mile) < 1)) {
            throw new \InvalidArgumentException('invalid length for $current_mile when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['current_mile'] = $current_mile;

        return $this;
    }

    /**
     * Gets earn_mile
     *
     * @return string|null
     */
    public function getEarnMile()
    {
        return $this->container['earn_mile'];
    }

    /**
     * Sets earn_mile
     *
     * @param string|null $earn_mile earn_mile
     *
     * @return self
     */
    public function setEarnMile($earn_mile)
    {

        if (!is_null($earn_mile) && (mb_strlen($earn_mile) < 1)) {
            throw new \InvalidArgumentException('invalid length for $earn_mile when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['earn_mile'] = $earn_mile;

        return $this;
    }

    /**
     * Gets total_mile
     *
     * @return string|null
     */
    public function getTotalMile()
    {
        return $this->container['total_mile'];
    }

    /**
     * Sets total_mile
     *
     * @param string|null $total_mile total_mile
     *
     * @return self
     */
    public function setTotalMile($total_mile)
    {

        if (!is_null($total_mile) && (mb_strlen($total_mile) < 1)) {
            throw new \InvalidArgumentException('invalid length for $total_mile when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['total_mile'] = $total_mile;

        return $this;
    }

    /**
     * Gets adjustment_mile
     *
     * @return string|null
     */
    public function getAdjustmentMile()
    {
        return $this->container['adjustment_mile'];
    }

    /**
     * Sets adjustment_mile
     *
     * @param string|null $adjustment_mile adjustment_mile
     *
     * @return self
     */
    public function setAdjustmentMile($adjustment_mile)
    {

        if (!is_null($adjustment_mile) && (mb_strlen($adjustment_mile) < 1)) {
            throw new \InvalidArgumentException('invalid length for $adjustment_mile when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['adjustment_mile'] = $adjustment_mile;

        return $this;
    }

    /**
     * Gets adjustment_mile_division
     *
     * @return string|null
     */
    public function getAdjustmentMileDivision()
    {
        return $this->container['adjustment_mile_division'];
    }

    /**
     * Sets adjustment_mile_division
     *
     * @param string|null $adjustment_mile_division adjustment_mile_division
     *
     * @return self
     */
    public function setAdjustmentMileDivision($adjustment_mile_division)
    {

        if (!is_null($adjustment_mile_division) && (mb_strlen($adjustment_mile_division) < 1)) {
            throw new \InvalidArgumentException('invalid length for $adjustment_mile_division when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['adjustment_mile_division'] = $adjustment_mile_division;

        return $this;
    }

    /**
     * Gets adjustment_mile_value
     *
     * @return string|null
     */
    public function getAdjustmentMileValue()
    {
        return $this->container['adjustment_mile_value'];
    }

    /**
     * Sets adjustment_mile_value
     *
     * @param string|null $adjustment_mile_value adjustment_mile_value
     *
     * @return self
     */
    public function setAdjustmentMileValue($adjustment_mile_value)
    {

        if (!is_null($adjustment_mile_value) && (mb_strlen($adjustment_mile_value) < 1)) {
            throw new \InvalidArgumentException('invalid length for $adjustment_mile_value when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['adjustment_mile_value'] = $adjustment_mile_value;

        return $this;
    }

    /**
     * Gets store_id
     *
     * @return string|null
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param string|null $store_id store_id
     *
     * @return self
     */
    public function setStoreId($store_id)
    {

        if (!is_null($store_id) && (mb_strlen($store_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $store_id when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets terminal_id
     *
     * @return string|null
     */
    public function getTerminalId()
    {
        return $this->container['terminal_id'];
    }

    /**
     * Sets terminal_id
     *
     * @param string|null $terminal_id terminal_id
     *
     * @return self
     */
    public function setTerminalId($terminal_id)
    {

        if (!is_null($terminal_id) && (mb_strlen($terminal_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $terminal_id when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['terminal_id'] = $terminal_id;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return string|null
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string|null $customer_id customer_id
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {

        if (!is_null($customer_id) && (mb_strlen($customer_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_id when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets terminal_tran_id
     *
     * @return string|null
     */
    public function getTerminalTranId()
    {
        return $this->container['terminal_tran_id'];
    }

    /**
     * Sets terminal_tran_id
     *
     * @param string|null $terminal_tran_id terminal_tran_id
     *
     * @return self
     */
    public function setTerminalTranId($terminal_tran_id)
    {

        if (!is_null($terminal_tran_id) && (mb_strlen($terminal_tran_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $terminal_tran_id when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['terminal_tran_id'] = $terminal_tran_id;

        return $this;
    }

    /**
     * Gets terminal_tran_date_time
     *
     * @return string
     */
    public function getTerminalTranDateTime()
    {
        return $this->container['terminal_tran_date_time'];
    }

    /**
     * Sets terminal_tran_date_time
     *
     * @param string $terminal_tran_date_time terminal_tran_date_time
     *
     * @return self
     */
    public function setTerminalTranDateTime($terminal_tran_date_time)
    {

        if ((mb_strlen($terminal_tran_date_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $terminal_tran_date_time when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['terminal_tran_date_time'] = $terminal_tran_date_time;

        return $this;
    }

    /**
     * Gets sum_division
     *
     * @return string|null
     */
    public function getSumDivision()
    {
        return $this->container['sum_division'];
    }

    /**
     * Sets sum_division
     *
     * @param string|null $sum_division sum_division
     *
     * @return self
     */
    public function setSumDivision($sum_division)
    {

        if (!is_null($sum_division) && (mb_strlen($sum_division) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sum_division when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['sum_division'] = $sum_division;

        return $this;
    }

    /**
     * Gets adjustment_date_time
     *
     * @return string|null
     */
    public function getAdjustmentDateTime()
    {
        return $this->container['adjustment_date_time'];
    }

    /**
     * Sets adjustment_date_time
     *
     * @param string|null $adjustment_date_time adjustment_date_time
     *
     * @return self
     */
    public function setAdjustmentDateTime($adjustment_date_time)
    {

        if (!is_null($adjustment_date_time) && (mb_strlen($adjustment_date_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $adjustment_date_time when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['adjustment_date_time'] = $adjustment_date_time;

        return $this;
    }

    /**
     * Gets sum_date
     *
     * @return string|null
     */
    public function getSumDate()
    {
        return $this->container['sum_date'];
    }

    /**
     * Sets sum_date
     *
     * @param string|null $sum_date sum_date
     *
     * @return self
     */
    public function setSumDate($sum_date)
    {

        if (!is_null($sum_date) && (mb_strlen($sum_date) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sum_date when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['sum_date'] = $sum_date;

        return $this;
    }

    /**
     * Gets customer_rank
     *
     * @return string|null
     */
    public function getCustomerRank()
    {
        return $this->container['customer_rank'];
    }

    /**
     * Sets customer_rank
     *
     * @param string|null $customer_rank customer_rank
     *
     * @return self
     */
    public function setCustomerRank($customer_rank)
    {

        if (!is_null($customer_rank) && (mb_strlen($customer_rank) < 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_rank when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['customer_rank'] = $customer_rank;

        return $this;
    }

    /**
     * Gets customer_group_id
     *
     * @return string|null
     */
    public function getCustomerGroupId()
    {
        return $this->container['customer_group_id'];
    }

    /**
     * Sets customer_group_id
     *
     * @param string|null $customer_group_id customer_group_id
     *
     * @return self
     */
    public function setCustomerGroupId($customer_group_id)
    {

        if (!is_null($customer_group_id) && (mb_strlen($customer_group_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_group_id when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['customer_group_id'] = $customer_group_id;

        return $this;
    }

    /**
     * Gets customer_group_id2
     *
     * @return string|null
     */
    public function getCustomerGroupId2()
    {
        return $this->container['customer_group_id2'];
    }

    /**
     * Sets customer_group_id2
     *
     * @param string|null $customer_group_id2 customer_group_id2
     *
     * @return self
     */
    public function setCustomerGroupId2($customer_group_id2)
    {

        if (!is_null($customer_group_id2) && (mb_strlen($customer_group_id2) < 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_group_id2 when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['customer_group_id2'] = $customer_group_id2;

        return $this;
    }

    /**
     * Gets customer_group_id3
     *
     * @return string|null
     */
    public function getCustomerGroupId3()
    {
        return $this->container['customer_group_id3'];
    }

    /**
     * Sets customer_group_id3
     *
     * @param string|null $customer_group_id3 customer_group_id3
     *
     * @return self
     */
    public function setCustomerGroupId3($customer_group_id3)
    {

        if (!is_null($customer_group_id3) && (mb_strlen($customer_group_id3) < 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_group_id3 when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['customer_group_id3'] = $customer_group_id3;

        return $this;
    }

    /**
     * Gets customer_group_id4
     *
     * @return string|null
     */
    public function getCustomerGroupId4()
    {
        return $this->container['customer_group_id4'];
    }

    /**
     * Sets customer_group_id4
     *
     * @param string|null $customer_group_id4 customer_group_id4
     *
     * @return self
     */
    public function setCustomerGroupId4($customer_group_id4)
    {

        if (!is_null($customer_group_id4) && (mb_strlen($customer_group_id4) < 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_group_id4 when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['customer_group_id4'] = $customer_group_id4;

        return $this;
    }

    /**
     * Gets customer_group_id5
     *
     * @return string|null
     */
    public function getCustomerGroupId5()
    {
        return $this->container['customer_group_id5'];
    }

    /**
     * Sets customer_group_id5
     *
     * @param string|null $customer_group_id5 customer_group_id5
     *
     * @return self
     */
    public function setCustomerGroupId5($customer_group_id5)
    {

        if (!is_null($customer_group_id5) && (mb_strlen($customer_group_id5) < 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_group_id5 when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['customer_group_id5'] = $customer_group_id5;

        return $this;
    }

    /**
     * Gets staff_id
     *
     * @return string|null
     */
    public function getStaffId()
    {
        return $this->container['staff_id'];
    }

    /**
     * Sets staff_id
     *
     * @param string|null $staff_id staff_id
     *
     * @return self
     */
    public function setStaffId($staff_id)
    {

        if (!is_null($staff_id) && (mb_strlen($staff_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $staff_id when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['staff_id'] = $staff_id;

        return $this;
    }

    /**
     * Gets staff_name
     *
     * @return string|null
     */
    public function getStaffName()
    {
        return $this->container['staff_name'];
    }

    /**
     * Sets staff_name
     *
     * @param string|null $staff_name staff_name
     *
     * @return self
     */
    public function setStaffName($staff_name)
    {

        if (!is_null($staff_name) && (mb_strlen($staff_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $staff_name when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['staff_name'] = $staff_name;

        return $this;
    }

    /**
     * Gets credit_division
     *
     * @return string|null
     */
    public function getCreditDivision()
    {
        return $this->container['credit_division'];
    }

    /**
     * Sets credit_division
     *
     * @param string|null $credit_division credit_division
     *
     * @return self
     */
    public function setCreditDivision($credit_division)
    {

        if (!is_null($credit_division) && (mb_strlen($credit_division) < 1)) {
            throw new \InvalidArgumentException('invalid length for $credit_division when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['credit_division'] = $credit_division;

        return $this;
    }

    /**
     * Gets payment_count
     *
     * @return string|null
     */
    public function getPaymentCount()
    {
        return $this->container['payment_count'];
    }

    /**
     * Sets payment_count
     *
     * @param string|null $payment_count payment_count
     *
     * @return self
     */
    public function setPaymentCount($payment_count)
    {

        if (!is_null($payment_count) && (mb_strlen($payment_count) < 1)) {
            throw new \InvalidArgumentException('invalid length for $payment_count when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['payment_count'] = $payment_count;

        return $this;
    }

    /**
     * Gets slip_number
     *
     * @return string|null
     */
    public function getSlipNumber()
    {
        return $this->container['slip_number'];
    }

    /**
     * Sets slip_number
     *
     * @param string|null $slip_number slip_number
     *
     * @return self
     */
    public function setSlipNumber($slip_number)
    {

        if (!is_null($slip_number) && (mb_strlen($slip_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $slip_number when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['slip_number'] = $slip_number;

        return $this;
    }

    /**
     * Gets cancel_slip_number
     *
     * @return string|null
     */
    public function getCancelSlipNumber()
    {
        return $this->container['cancel_slip_number'];
    }

    /**
     * Sets cancel_slip_number
     *
     * @param string|null $cancel_slip_number cancel_slip_number
     *
     * @return self
     */
    public function setCancelSlipNumber($cancel_slip_number)
    {

        if (!is_null($cancel_slip_number) && (mb_strlen($cancel_slip_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $cancel_slip_number when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['cancel_slip_number'] = $cancel_slip_number;

        return $this;
    }

    /**
     * Gets auth_number
     *
     * @return string|null
     */
    public function getAuthNumber()
    {
        return $this->container['auth_number'];
    }

    /**
     * Sets auth_number
     *
     * @param string|null $auth_number auth_number
     *
     * @return self
     */
    public function setAuthNumber($auth_number)
    {

        if (!is_null($auth_number) && (mb_strlen($auth_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $auth_number when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['auth_number'] = $auth_number;

        return $this;
    }

    /**
     * Gets auth_date
     *
     * @return string|null
     */
    public function getAuthDate()
    {
        return $this->container['auth_date'];
    }

    /**
     * Sets auth_date
     *
     * @param string|null $auth_date auth_date
     *
     * @return self
     */
    public function setAuthDate($auth_date)
    {

        if (!is_null($auth_date) && (mb_strlen($auth_date) < 1)) {
            throw new \InvalidArgumentException('invalid length for $auth_date when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['auth_date'] = $auth_date;

        return $this;
    }

    /**
     * Gets card_company
     *
     * @return string|null
     */
    public function getCardCompany()
    {
        return $this->container['card_company'];
    }

    /**
     * Sets card_company
     *
     * @param string|null $card_company card_company
     *
     * @return self
     */
    public function setCardCompany($card_company)
    {

        if (!is_null($card_company) && (mb_strlen($card_company) < 1)) {
            throw new \InvalidArgumentException('invalid length for $card_company when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['card_company'] = $card_company;

        return $this;
    }

    /**
     * Gets denomination
     *
     * @return string|null
     */
    public function getDenomination()
    {
        return $this->container['denomination'];
    }

    /**
     * Sets denomination
     *
     * @param string|null $denomination denomination
     *
     * @return self
     */
    public function setDenomination($denomination)
    {

        if (!is_null($denomination) && (mb_strlen($denomination) < 1)) {
            throw new \InvalidArgumentException('invalid length for $denomination when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['denomination'] = $denomination;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string|null
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string|null $memo memo
     *
     * @return self
     */
    public function setMemo($memo)
    {

        if (!is_null($memo) && (mb_strlen($memo) < 1)) {
            throw new \InvalidArgumentException('invalid length for $memo when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets receipt_memo
     *
     * @return string|null
     */
    public function getReceiptMemo()
    {
        return $this->container['receipt_memo'];
    }

    /**
     * Sets receipt_memo
     *
     * @param string|null $receipt_memo receipt_memo
     *
     * @return self
     */
    public function setReceiptMemo($receipt_memo)
    {

        if (!is_null($receipt_memo) && (mb_strlen($receipt_memo) < 1)) {
            throw new \InvalidArgumentException('invalid length for $receipt_memo when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['receipt_memo'] = $receipt_memo;

        return $this;
    }

    /**
     * Gets carriage
     *
     * @return string|null
     */
    public function getCarriage()
    {
        return $this->container['carriage'];
    }

    /**
     * Sets carriage
     *
     * @param string|null $carriage carriage
     *
     * @return self
     */
    public function setCarriage($carriage)
    {

        if (!is_null($carriage) && (mb_strlen($carriage) < 1)) {
            throw new \InvalidArgumentException('invalid length for $carriage when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['carriage'] = $carriage;

        return $this;
    }

    /**
     * Gets commission
     *
     * @return string|null
     */
    public function getCommission()
    {
        return $this->container['commission'];
    }

    /**
     * Sets commission
     *
     * @param string|null $commission commission
     *
     * @return self
     */
    public function setCommission($commission)
    {

        if (!is_null($commission) && (mb_strlen($commission) < 1)) {
            throw new \InvalidArgumentException('invalid length for $commission when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['commission'] = $commission;

        return $this;
    }

    /**
     * Gets guest_numbers
     *
     * @return string|null
     */
    public function getGuestNumbers()
    {
        return $this->container['guest_numbers'];
    }

    /**
     * Sets guest_numbers
     *
     * @param string|null $guest_numbers guest_numbers
     *
     * @return self
     */
    public function setGuestNumbers($guest_numbers)
    {

        if (!is_null($guest_numbers) && (mb_strlen($guest_numbers) < 1)) {
            throw new \InvalidArgumentException('invalid length for $guest_numbers when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['guest_numbers'] = $guest_numbers;

        return $this;
    }

    /**
     * Gets guest_numbers_male
     *
     * @return string|null
     */
    public function getGuestNumbersMale()
    {
        return $this->container['guest_numbers_male'];
    }

    /**
     * Sets guest_numbers_male
     *
     * @param string|null $guest_numbers_male guest_numbers_male
     *
     * @return self
     */
    public function setGuestNumbersMale($guest_numbers_male)
    {

        if (!is_null($guest_numbers_male) && (mb_strlen($guest_numbers_male) < 1)) {
            throw new \InvalidArgumentException('invalid length for $guest_numbers_male when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['guest_numbers_male'] = $guest_numbers_male;

        return $this;
    }

    /**
     * Gets guest_numbers_female
     *
     * @return string|null
     */
    public function getGuestNumbersFemale()
    {
        return $this->container['guest_numbers_female'];
    }

    /**
     * Sets guest_numbers_female
     *
     * @param string|null $guest_numbers_female guest_numbers_female
     *
     * @return self
     */
    public function setGuestNumbersFemale($guest_numbers_female)
    {

        if (!is_null($guest_numbers_female) && (mb_strlen($guest_numbers_female) < 1)) {
            throw new \InvalidArgumentException('invalid length for $guest_numbers_female when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['guest_numbers_female'] = $guest_numbers_female;

        return $this;
    }

    /**
     * Gets guest_numbers_unknown
     *
     * @return mixed|null
     */
    public function getGuestNumbersUnknown()
    {
        return $this->container['guest_numbers_unknown'];
    }

    /**
     * Sets guest_numbers_unknown
     *
     * @param mixed|null $guest_numbers_unknown guest_numbers_unknown
     *
     * @return self
     */
    public function setGuestNumbersUnknown($guest_numbers_unknown)
    {
        $this->container['guest_numbers_unknown'] = $guest_numbers_unknown;

        return $this;
    }

    /**
     * Gets enter_date_time
     *
     * @return string|null
     */
    public function getEnterDateTime()
    {
        return $this->container['enter_date_time'];
    }

    /**
     * Sets enter_date_time
     *
     * @param string|null $enter_date_time enter_date_time
     *
     * @return self
     */
    public function setEnterDateTime($enter_date_time)
    {

        if (!is_null($enter_date_time) && (mb_strlen($enter_date_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $enter_date_time when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['enter_date_time'] = $enter_date_time;

        return $this;
    }

    /**
     * Gets tax_free_sales_division
     *
     * @return string|null
     */
    public function getTaxFreeSalesDivision()
    {
        return $this->container['tax_free_sales_division'];
    }

    /**
     * Sets tax_free_sales_division
     *
     * @param string|null $tax_free_sales_division tax_free_sales_division
     *
     * @return self
     */
    public function setTaxFreeSalesDivision($tax_free_sales_division)
    {

        if (!is_null($tax_free_sales_division) && (mb_strlen($tax_free_sales_division) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tax_free_sales_division when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['tax_free_sales_division'] = $tax_free_sales_division;

        return $this;
    }

    /**
     * Gets net_tax_free_general_tax_include
     *
     * @return string|null
     */
    public function getNetTaxFreeGeneralTaxInclude()
    {
        return $this->container['net_tax_free_general_tax_include'];
    }

    /**
     * Sets net_tax_free_general_tax_include
     *
     * @param string|null $net_tax_free_general_tax_include net_tax_free_general_tax_include
     *
     * @return self
     */
    public function setNetTaxFreeGeneralTaxInclude($net_tax_free_general_tax_include)
    {

        if (!is_null($net_tax_free_general_tax_include) && (mb_strlen($net_tax_free_general_tax_include) < 1)) {
            throw new \InvalidArgumentException('invalid length for $net_tax_free_general_tax_include when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['net_tax_free_general_tax_include'] = $net_tax_free_general_tax_include;

        return $this;
    }

    /**
     * Gets net_tax_free_general_tax_exclude
     *
     * @return string|null
     */
    public function getNetTaxFreeGeneralTaxExclude()
    {
        return $this->container['net_tax_free_general_tax_exclude'];
    }

    /**
     * Sets net_tax_free_general_tax_exclude
     *
     * @param string|null $net_tax_free_general_tax_exclude net_tax_free_general_tax_exclude
     *
     * @return self
     */
    public function setNetTaxFreeGeneralTaxExclude($net_tax_free_general_tax_exclude)
    {

        if (!is_null($net_tax_free_general_tax_exclude) && (mb_strlen($net_tax_free_general_tax_exclude) < 1)) {
            throw new \InvalidArgumentException('invalid length for $net_tax_free_general_tax_exclude when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['net_tax_free_general_tax_exclude'] = $net_tax_free_general_tax_exclude;

        return $this;
    }

    /**
     * Gets net_tax_free_consumable_tax_include
     *
     * @return string|null
     */
    public function getNetTaxFreeConsumableTaxInclude()
    {
        return $this->container['net_tax_free_consumable_tax_include'];
    }

    /**
     * Sets net_tax_free_consumable_tax_include
     *
     * @param string|null $net_tax_free_consumable_tax_include net_tax_free_consumable_tax_include
     *
     * @return self
     */
    public function setNetTaxFreeConsumableTaxInclude($net_tax_free_consumable_tax_include)
    {

        if (!is_null($net_tax_free_consumable_tax_include) && (mb_strlen($net_tax_free_consumable_tax_include) < 1)) {
            throw new \InvalidArgumentException('invalid length for $net_tax_free_consumable_tax_include when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['net_tax_free_consumable_tax_include'] = $net_tax_free_consumable_tax_include;

        return $this;
    }

    /**
     * Gets net_tax_free_consumable_tax_exclude
     *
     * @return string|null
     */
    public function getNetTaxFreeConsumableTaxExclude()
    {
        return $this->container['net_tax_free_consumable_tax_exclude'];
    }

    /**
     * Sets net_tax_free_consumable_tax_exclude
     *
     * @param string|null $net_tax_free_consumable_tax_exclude net_tax_free_consumable_tax_exclude
     *
     * @return self
     */
    public function setNetTaxFreeConsumableTaxExclude($net_tax_free_consumable_tax_exclude)
    {

        if (!is_null($net_tax_free_consumable_tax_exclude) && (mb_strlen($net_tax_free_consumable_tax_exclude) < 1)) {
            throw new \InvalidArgumentException('invalid length for $net_tax_free_consumable_tax_exclude when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['net_tax_free_consumable_tax_exclude'] = $net_tax_free_consumable_tax_exclude;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {

        if (!is_null($tags) && (mb_strlen($tags) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tags when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets point_giving_division
     *
     * @return string|null
     */
    public function getPointGivingDivision()
    {
        return $this->container['point_giving_division'];
    }

    /**
     * Sets point_giving_division
     *
     * @param string|null $point_giving_division point_giving_division
     *
     * @return self
     */
    public function setPointGivingDivision($point_giving_division)
    {

        if (!is_null($point_giving_division) && (mb_strlen($point_giving_division) < 1)) {
            throw new \InvalidArgumentException('invalid length for $point_giving_division when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['point_giving_division'] = $point_giving_division;

        return $this;
    }

    /**
     * Gets point_giving_unit_price
     *
     * @return string|null
     */
    public function getPointGivingUnitPrice()
    {
        return $this->container['point_giving_unit_price'];
    }

    /**
     * Sets point_giving_unit_price
     *
     * @param string|null $point_giving_unit_price point_giving_unit_price
     *
     * @return self
     */
    public function setPointGivingUnitPrice($point_giving_unit_price)
    {

        if (!is_null($point_giving_unit_price) && (mb_strlen($point_giving_unit_price) < 1)) {
            throw new \InvalidArgumentException('invalid length for $point_giving_unit_price when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['point_giving_unit_price'] = $point_giving_unit_price;

        return $this;
    }

    /**
     * Gets point_giving_unit
     *
     * @return string|null
     */
    public function getPointGivingUnit()
    {
        return $this->container['point_giving_unit'];
    }

    /**
     * Sets point_giving_unit
     *
     * @param string|null $point_giving_unit point_giving_unit
     *
     * @return self
     */
    public function setPointGivingUnit($point_giving_unit)
    {

        if (!is_null($point_giving_unit) && (mb_strlen($point_giving_unit) < 1)) {
            throw new \InvalidArgumentException('invalid length for $point_giving_unit when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['point_giving_unit'] = $point_giving_unit;

        return $this;
    }

    /**
     * Gets point_spend_division
     *
     * @return string|null
     */
    public function getPointSpendDivision()
    {
        return $this->container['point_spend_division'];
    }

    /**
     * Sets point_spend_division
     *
     * @param string|null $point_spend_division point_spend_division
     *
     * @return self
     */
    public function setPointSpendDivision($point_spend_division)
    {

        if (!is_null($point_spend_division) && (mb_strlen($point_spend_division) < 1)) {
            throw new \InvalidArgumentException('invalid length for $point_spend_division when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['point_spend_division'] = $point_spend_division;

        return $this;
    }

    /**
     * Gets mileage_division
     *
     * @return string|null
     */
    public function getMileageDivision()
    {
        return $this->container['mileage_division'];
    }

    /**
     * Sets mileage_division
     *
     * @param string|null $mileage_division mileage_division
     *
     * @return self
     */
    public function setMileageDivision($mileage_division)
    {

        if (!is_null($mileage_division) && (mb_strlen($mileage_division) < 1)) {
            throw new \InvalidArgumentException('invalid length for $mileage_division when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['mileage_division'] = $mileage_division;

        return $this;
    }

    /**
     * Gets mileage_label
     *
     * @return string|null
     */
    public function getMileageLabel()
    {
        return $this->container['mileage_label'];
    }

    /**
     * Sets mileage_label
     *
     * @param string|null $mileage_label mileage_label
     *
     * @return self
     */
    public function setMileageLabel($mileage_label)
    {

        if (!is_null($mileage_label) && (mb_strlen($mileage_label) < 1)) {
            throw new \InvalidArgumentException('invalid length for $mileage_label when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['mileage_label'] = $mileage_label;

        return $this;
    }

    /**
     * Gets customer_pin_code
     *
     * @return string|null
     */
    public function getCustomerPinCode()
    {
        return $this->container['customer_pin_code'];
    }

    /**
     * Sets customer_pin_code
     *
     * @param string|null $customer_pin_code customer_pin_code
     *
     * @return self
     */
    public function setCustomerPinCode($customer_pin_code)
    {

        if (!is_null($customer_pin_code) && (mb_strlen($customer_pin_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_pin_code when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['customer_pin_code'] = $customer_pin_code;

        return $this;
    }

    /**
     * Gets return_sales
     *
     * @return \OpenAPI\Client\Model\ReturnSales
     */
    public function getReturnSales()
    {
        return $this->container['return_sales'];
    }

    /**
     * Sets return_sales
     *
     * @param \OpenAPI\Client\Model\ReturnSales $return_sales return_sales
     *
     * @return self
     */
    public function setReturnSales($return_sales)
    {
        $this->container['return_sales'] = $return_sales;

        return $this;
    }

    /**
     * Gets dispose_division
     *
     * @return \OpenAPI\Client\Model\DisposeDivision|null
     */
    public function getDisposeDivision()
    {
        return $this->container['dispose_division'];
    }

    /**
     * Sets dispose_division
     *
     * @param \OpenAPI\Client\Model\DisposeDivision|null $dispose_division dispose_division
     *
     * @return self
     */
    public function setDisposeDivision($dispose_division)
    {
        $this->container['dispose_division'] = $dispose_division;

        return $this;
    }

    /**
     * Gets dispose_server_transaction_head_id
     *
     * @return string|null
     */
    public function getDisposeServerTransactionHeadId()
    {
        return $this->container['dispose_server_transaction_head_id'];
    }

    /**
     * Sets dispose_server_transaction_head_id
     *
     * @param string|null $dispose_server_transaction_head_id dispose_server_transaction_head_id
     *
     * @return self
     */
    public function setDisposeServerTransactionHeadId($dispose_server_transaction_head_id)
    {

        if (!is_null($dispose_server_transaction_head_id) && (mb_strlen($dispose_server_transaction_head_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $dispose_server_transaction_head_id when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['dispose_server_transaction_head_id'] = $dispose_server_transaction_head_id;

        return $this;
    }

    /**
     * Gets cancel_date_time
     *
     * @return string|null
     */
    public function getCancelDateTime()
    {
        return $this->container['cancel_date_time'];
    }

    /**
     * Sets cancel_date_time
     *
     * @param string|null $cancel_date_time cancel_date_time
     *
     * @return self
     */
    public function setCancelDateTime($cancel_date_time)
    {

        if (!is_null($cancel_date_time) && (mb_strlen($cancel_date_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $cancel_date_time when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['cancel_date_time'] = $cancel_date_time;

        return $this;
    }

    /**
     * Gets sell_division
     *
     * @return string|null
     */
    public function getSellDivision()
    {
        return $this->container['sell_division'];
    }

    /**
     * Sets sell_division
     *
     * @param string|null $sell_division sell_division
     *
     * @return self
     */
    public function setSellDivision($sell_division)
    {

        if (!is_null($sell_division) && (mb_strlen($sell_division) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sell_division when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['sell_division'] = $sell_division;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return string|null
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param string|null $tax_rate tax_rate
     *
     * @return self
     */
    public function setTaxRate($tax_rate)
    {

        if (!is_null($tax_rate) && (mb_strlen($tax_rate) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tax_rate when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets tax_rounding
     *
     * @return string|null
     */
    public function getTaxRounding()
    {
        return $this->container['tax_rounding'];
    }

    /**
     * Sets tax_rounding
     *
     * @param string|null $tax_rounding tax_rounding
     *
     * @return self
     */
    public function setTaxRounding($tax_rounding)
    {

        if (!is_null($tax_rounding) && (mb_strlen($tax_rounding) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tax_rounding when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['tax_rounding'] = $tax_rounding;

        return $this;
    }

    /**
     * Gets discount_rounding_division
     *
     * @return string|null
     */
    public function getDiscountRoundingDivision()
    {
        return $this->container['discount_rounding_division'];
    }

    /**
     * Sets discount_rounding_division
     *
     * @param string|null $discount_rounding_division discount_rounding_division
     *
     * @return self
     */
    public function setDiscountRoundingDivision($discount_rounding_division)
    {

        if (!is_null($discount_rounding_division) && (mb_strlen($discount_rounding_division) < 1)) {
            throw new \InvalidArgumentException('invalid length for $discount_rounding_division when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['discount_rounding_division'] = $discount_rounding_division;

        return $this;
    }

    /**
     * Gets transaction_uuid
     *
     * @return string|null
     */
    public function getTransactionUuid()
    {
        return $this->container['transaction_uuid'];
    }

    /**
     * Sets transaction_uuid
     *
     * @param string|null $transaction_uuid transaction_uuid
     *
     * @return self
     */
    public function setTransactionUuid($transaction_uuid)
    {

        if (!is_null($transaction_uuid) && (mb_strlen($transaction_uuid) < 1)) {
            throw new \InvalidArgumentException('invalid length for $transaction_uuid when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['transaction_uuid'] = $transaction_uuid;

        return $this;
    }

    /**
     * Gets exchange_ticket_no
     *
     * @return string|null
     */
    public function getExchangeTicketNo()
    {
        return $this->container['exchange_ticket_no'];
    }

    /**
     * Sets exchange_ticket_no
     *
     * @param string|null $exchange_ticket_no exchange_ticket_no
     *
     * @return self
     */
    public function setExchangeTicketNo($exchange_ticket_no)
    {

        if (!is_null($exchange_ticket_no) && (mb_strlen($exchange_ticket_no) < 1)) {
            throw new \InvalidArgumentException('invalid length for $exchange_ticket_no when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['exchange_ticket_no'] = $exchange_ticket_no;

        return $this;
    }

    /**
     * Gets gift_receipt_valid_days
     *
     * @return string|null
     */
    public function getGiftReceiptValidDays()
    {
        return $this->container['gift_receipt_valid_days'];
    }

    /**
     * Sets gift_receipt_valid_days
     *
     * @param string|null $gift_receipt_valid_days gift_receipt_valid_days
     *
     * @return self
     */
    public function setGiftReceiptValidDays($gift_receipt_valid_days)
    {

        if (!is_null($gift_receipt_valid_days) && (mb_strlen($gift_receipt_valid_days) < 1)) {
            throw new \InvalidArgumentException('invalid length for $gift_receipt_valid_days when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['gift_receipt_valid_days'] = $gift_receipt_valid_days;

        return $this;
    }

    /**
     * Gets upd_date_time
     *
     * @return string|null
     */
    public function getUpdDateTime()
    {
        return $this->container['upd_date_time'];
    }

    /**
     * Sets upd_date_time
     *
     * @param string|null $upd_date_time upd_date_time
     *
     * @return self
     */
    public function setUpdDateTime($upd_date_time)
    {

        if (!is_null($upd_date_time) && (mb_strlen($upd_date_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $upd_date_time when calling GetLayawayById., must be bigger than or equal to 1.');
        }

        $this->container['upd_date_time'] = $upd_date_time;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \OpenAPI\Client\Model\TransactionDetail[]|null
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \OpenAPI\Client\Model\TransactionDetail[]|null $details details
     *
     * @return self
     */
    public function setDetails($details)
    {


        if (!is_null($details) && (count($details) < 1)) {
            throw new \InvalidArgumentException('invalid length for $details when calling GetLayawayById., number of items must be greater than or equal to 1.');
        }
        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets layaway
     *
     * @return \OpenAPI\Client\Model\Layaway|null
     */
    public function getLayaway()
    {
        return $this->container['layaway'];
    }

    /**
     * Sets layaway
     *
     * @param \OpenAPI\Client\Model\Layaway|null $layaway layaway
     *
     * @return self
     */
    public function setLayaway($layaway)
    {
        $this->container['layaway'] = $layaway;

        return $this;
    }

    /**
     * Gets layaway_pick_up
     *
     * @return \OpenAPI\Client\Model\LayawayPickUp|null
     */
    public function getLayawayPickUp()
    {
        return $this->container['layaway_pick_up'];
    }

    /**
     * Sets layaway_pick_up
     *
     * @param \OpenAPI\Client\Model\LayawayPickUp|null $layaway_pick_up layaway_pick_up
     *
     * @return self
     */
    public function setLayawayPickUp($layaway_pick_up)
    {
        $this->container['layaway_pick_up'] = $layaway_pick_up;

        return $this;
    }

    /**
     * Gets store
     *
     * @return \OpenAPI\Client\Model\Store|null
     */
    public function getStore()
    {
        return $this->container['store'];
    }

    /**
     * Sets store
     *
     * @param \OpenAPI\Client\Model\Store|null $store store
     *
     * @return self
     */
    public function setStore($store)
    {
        $this->container['store'] = $store;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \OpenAPI\Client\Model\Customer|null
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \OpenAPI\Client\Model\Customer|null $customer customer
     *
     * @return self
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets customer_groups
     *
     * @return \OpenAPI\Client\Model\CustomerGroup[]|null
     */
    public function getCustomerGroups()
    {
        return $this->container['customer_groups'];
    }

    /**
     * Sets customer_groups
     *
     * @param \OpenAPI\Client\Model\CustomerGroup[]|null $customer_groups customer_groups
     *
     * @return self
     */
    public function setCustomerGroups($customer_groups)
    {


        if (!is_null($customer_groups) && (count($customer_groups) < 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_groups when calling GetLayawayById., number of items must be greater than or equal to 1.');
        }
        $this->container['customer_groups'] = $customer_groups;

        return $this;
    }

    /**
     * Gets staff
     *
     * @return \OpenAPI\Client\Model\Staff|null
     */
    public function getStaff()
    {
        return $this->container['staff'];
    }

    /**
     * Sets staff
     *
     * @param \OpenAPI\Client\Model\Staff|null $staff staff
     *
     * @return self
     */
    public function setStaff($staff)
    {
        $this->container['staff'] = $staff;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


