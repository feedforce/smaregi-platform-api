<?php
/**
 * TransactionDetail
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * スマレジ
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TransactionDetail Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class TransactionDetail implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'transactionDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'transaction_head_id' => 'string',
        'transaction_detail_id' => 'string',
        'parent_transaction_detail_id' => 'string',
        'transaction_detail_division' => '\OpenAPI\Client\Model\TransactionDetailDivision',
        'product_id' => 'string',
        'product_code' => 'string',
        'product_name' => 'string',
        'print_receipt_product_name' => 'string',
        'color' => 'string',
        'size' => 'string',
        'group_code' => 'string',
        'tax_division' => '\OpenAPI\Client\Model\TaxDivision',
        'price' => 'string',
        'sales_price' => 'string',
        'unit_discount_price' => 'string',
        'unit_discount_rate' => 'string',
        'unit_discount_division' => 'string',
        'cost' => 'string',
        'quantity' => 'string',
        'unit_non_discount_sum' => 'string',
        'unit_discount_sum' => 'string',
        'unit_discounted_sum' => 'string',
        'cost_sum' => 'string',
        'category_id' => 'string',
        'category_name' => 'string',
        'discrimination_no' => 'string',
        'sales_division' => '\OpenAPI\Client\Model\SalesDivision',
        'product_division' => '\OpenAPI\Client\Model\ProductDivision',
        'inventory_reservation_division' => 'string',
        'point_not_applicable' => 'string',
        'calc_discount' => 'string',
        'tax_free_division' => 'string',
        'tax_free_commodity_price' => 'string',
        'tax_free' => 'string',
        'product_bundle_group_id' => 'string',
        'discount_price_proportional' => 'string',
        'discount_point_proportional' => 'string',
        'discount_coupon_proportional' => 'string',
        'tax_include_proportional' => 'string',
        'tax_exclude_proportional' => 'string',
        'product_bundle_proportional' => 'string',
        'staff_discount_proportional' => 'string',
        'bargain_discount_proportional' => 'string',
        'rounding_price_proportional' => 'string',
        'product_staff_discount_rate' => 'string',
        'staff_rank' => 'string',
        'staff_rank_name' => 'string',
        'staff_discount_rate' => 'string',
        'staff_discount_division' => 'string',
        'apply_staff_discount_rate' => 'string',
        'apply_staff_discount_price' => 'string',
        'bargain_id' => 'string',
        'bargain_name' => 'string',
        'bargain_division' => 'string',
        'bargain_value' => 'string',
        'apply_bargain_value' => 'string',
        'apply_bargain_discount_price' => 'string',
        'tax_rate' => 'string',
        'standard_tax_rate' => 'string',
        'modified_tax_rate' => 'string',
        'reduce_tax_id' => 'string',
        'reduce_tax_name' => 'string',
        'reduce_tax_rate' => 'string',
        'reduce_tax_price' => 'string',
        'reduce_tax_member_price' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'transaction_head_id' => null,
        'transaction_detail_id' => null,
        'parent_transaction_detail_id' => null,
        'transaction_detail_division' => null,
        'product_id' => null,
        'product_code' => null,
        'product_name' => null,
        'print_receipt_product_name' => null,
        'color' => null,
        'size' => null,
        'group_code' => null,
        'tax_division' => null,
        'price' => null,
        'sales_price' => null,
        'unit_discount_price' => null,
        'unit_discount_rate' => null,
        'unit_discount_division' => null,
        'cost' => null,
        'quantity' => null,
        'unit_non_discount_sum' => null,
        'unit_discount_sum' => null,
        'unit_discounted_sum' => null,
        'cost_sum' => null,
        'category_id' => null,
        'category_name' => null,
        'discrimination_no' => null,
        'sales_division' => null,
        'product_division' => null,
        'inventory_reservation_division' => null,
        'point_not_applicable' => null,
        'calc_discount' => null,
        'tax_free_division' => null,
        'tax_free_commodity_price' => null,
        'tax_free' => null,
        'product_bundle_group_id' => null,
        'discount_price_proportional' => null,
        'discount_point_proportional' => null,
        'discount_coupon_proportional' => null,
        'tax_include_proportional' => null,
        'tax_exclude_proportional' => null,
        'product_bundle_proportional' => null,
        'staff_discount_proportional' => null,
        'bargain_discount_proportional' => null,
        'rounding_price_proportional' => null,
        'product_staff_discount_rate' => null,
        'staff_rank' => null,
        'staff_rank_name' => null,
        'staff_discount_rate' => null,
        'staff_discount_division' => null,
        'apply_staff_discount_rate' => null,
        'apply_staff_discount_price' => null,
        'bargain_id' => null,
        'bargain_name' => null,
        'bargain_division' => null,
        'bargain_value' => null,
        'apply_bargain_value' => null,
        'apply_bargain_discount_price' => null,
        'tax_rate' => null,
        'standard_tax_rate' => null,
        'modified_tax_rate' => null,
        'reduce_tax_id' => null,
        'reduce_tax_name' => null,
        'reduce_tax_rate' => null,
        'reduce_tax_price' => null,
        'reduce_tax_member_price' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_head_id' => 'transactionHeadId',
        'transaction_detail_id' => 'transactionDetailId',
        'parent_transaction_detail_id' => 'parentTransactionDetailId',
        'transaction_detail_division' => 'transactionDetailDivision',
        'product_id' => 'productId',
        'product_code' => 'productCode',
        'product_name' => 'productName',
        'print_receipt_product_name' => 'printReceiptProductName',
        'color' => 'color',
        'size' => 'size',
        'group_code' => 'groupCode',
        'tax_division' => 'taxDivision',
        'price' => 'price',
        'sales_price' => 'salesPrice',
        'unit_discount_price' => 'unitDiscountPrice',
        'unit_discount_rate' => 'unitDiscountRate',
        'unit_discount_division' => 'unitDiscountDivision',
        'cost' => 'cost',
        'quantity' => 'quantity',
        'unit_non_discount_sum' => 'unitNonDiscountSum',
        'unit_discount_sum' => 'unitDiscountSum',
        'unit_discounted_sum' => 'unitDiscountedSum',
        'cost_sum' => 'costSum',
        'category_id' => 'categoryId',
        'category_name' => 'categoryName',
        'discrimination_no' => 'discriminationNo',
        'sales_division' => 'salesDivision',
        'product_division' => 'productDivision',
        'inventory_reservation_division' => 'inventoryReservationDivision',
        'point_not_applicable' => 'pointNotApplicable',
        'calc_discount' => 'calcDiscount',
        'tax_free_division' => 'taxFreeDivision',
        'tax_free_commodity_price' => 'taxFreeCommodityPrice',
        'tax_free' => 'taxFree',
        'product_bundle_group_id' => 'productBundleGroupId',
        'discount_price_proportional' => 'discountPriceProportional',
        'discount_point_proportional' => 'discountPointProportional',
        'discount_coupon_proportional' => 'discountCouponProportional',
        'tax_include_proportional' => 'taxIncludeProportional',
        'tax_exclude_proportional' => 'taxExcludeProportional',
        'product_bundle_proportional' => 'productBundleProportional',
        'staff_discount_proportional' => 'staffDiscountProportional',
        'bargain_discount_proportional' => 'bargainDiscountProportional',
        'rounding_price_proportional' => 'roundingPriceProportional',
        'product_staff_discount_rate' => 'productStaffDiscountRate',
        'staff_rank' => 'staffRank',
        'staff_rank_name' => 'staffRankName',
        'staff_discount_rate' => 'staffDiscountRate',
        'staff_discount_division' => 'staffDiscountDivision',
        'apply_staff_discount_rate' => 'applyStaffDiscountRate',
        'apply_staff_discount_price' => 'applyStaffDiscountPrice',
        'bargain_id' => 'bargainId',
        'bargain_name' => 'bargainName',
        'bargain_division' => 'bargainDivision',
        'bargain_value' => 'bargainValue',
        'apply_bargain_value' => 'applyBargainValue',
        'apply_bargain_discount_price' => 'applyBargainDiscountPrice',
        'tax_rate' => 'taxRate',
        'standard_tax_rate' => 'standardTaxRate',
        'modified_tax_rate' => 'modifiedTaxRate',
        'reduce_tax_id' => 'reduceTaxId',
        'reduce_tax_name' => 'reduceTaxName',
        'reduce_tax_rate' => 'reduceTaxRate',
        'reduce_tax_price' => 'reduceTaxPrice',
        'reduce_tax_member_price' => 'reduceTaxMemberPrice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_head_id' => 'setTransactionHeadId',
        'transaction_detail_id' => 'setTransactionDetailId',
        'parent_transaction_detail_id' => 'setParentTransactionDetailId',
        'transaction_detail_division' => 'setTransactionDetailDivision',
        'product_id' => 'setProductId',
        'product_code' => 'setProductCode',
        'product_name' => 'setProductName',
        'print_receipt_product_name' => 'setPrintReceiptProductName',
        'color' => 'setColor',
        'size' => 'setSize',
        'group_code' => 'setGroupCode',
        'tax_division' => 'setTaxDivision',
        'price' => 'setPrice',
        'sales_price' => 'setSalesPrice',
        'unit_discount_price' => 'setUnitDiscountPrice',
        'unit_discount_rate' => 'setUnitDiscountRate',
        'unit_discount_division' => 'setUnitDiscountDivision',
        'cost' => 'setCost',
        'quantity' => 'setQuantity',
        'unit_non_discount_sum' => 'setUnitNonDiscountSum',
        'unit_discount_sum' => 'setUnitDiscountSum',
        'unit_discounted_sum' => 'setUnitDiscountedSum',
        'cost_sum' => 'setCostSum',
        'category_id' => 'setCategoryId',
        'category_name' => 'setCategoryName',
        'discrimination_no' => 'setDiscriminationNo',
        'sales_division' => 'setSalesDivision',
        'product_division' => 'setProductDivision',
        'inventory_reservation_division' => 'setInventoryReservationDivision',
        'point_not_applicable' => 'setPointNotApplicable',
        'calc_discount' => 'setCalcDiscount',
        'tax_free_division' => 'setTaxFreeDivision',
        'tax_free_commodity_price' => 'setTaxFreeCommodityPrice',
        'tax_free' => 'setTaxFree',
        'product_bundle_group_id' => 'setProductBundleGroupId',
        'discount_price_proportional' => 'setDiscountPriceProportional',
        'discount_point_proportional' => 'setDiscountPointProportional',
        'discount_coupon_proportional' => 'setDiscountCouponProportional',
        'tax_include_proportional' => 'setTaxIncludeProportional',
        'tax_exclude_proportional' => 'setTaxExcludeProportional',
        'product_bundle_proportional' => 'setProductBundleProportional',
        'staff_discount_proportional' => 'setStaffDiscountProportional',
        'bargain_discount_proportional' => 'setBargainDiscountProportional',
        'rounding_price_proportional' => 'setRoundingPriceProportional',
        'product_staff_discount_rate' => 'setProductStaffDiscountRate',
        'staff_rank' => 'setStaffRank',
        'staff_rank_name' => 'setStaffRankName',
        'staff_discount_rate' => 'setStaffDiscountRate',
        'staff_discount_division' => 'setStaffDiscountDivision',
        'apply_staff_discount_rate' => 'setApplyStaffDiscountRate',
        'apply_staff_discount_price' => 'setApplyStaffDiscountPrice',
        'bargain_id' => 'setBargainId',
        'bargain_name' => 'setBargainName',
        'bargain_division' => 'setBargainDivision',
        'bargain_value' => 'setBargainValue',
        'apply_bargain_value' => 'setApplyBargainValue',
        'apply_bargain_discount_price' => 'setApplyBargainDiscountPrice',
        'tax_rate' => 'setTaxRate',
        'standard_tax_rate' => 'setStandardTaxRate',
        'modified_tax_rate' => 'setModifiedTaxRate',
        'reduce_tax_id' => 'setReduceTaxId',
        'reduce_tax_name' => 'setReduceTaxName',
        'reduce_tax_rate' => 'setReduceTaxRate',
        'reduce_tax_price' => 'setReduceTaxPrice',
        'reduce_tax_member_price' => 'setReduceTaxMemberPrice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_head_id' => 'getTransactionHeadId',
        'transaction_detail_id' => 'getTransactionDetailId',
        'parent_transaction_detail_id' => 'getParentTransactionDetailId',
        'transaction_detail_division' => 'getTransactionDetailDivision',
        'product_id' => 'getProductId',
        'product_code' => 'getProductCode',
        'product_name' => 'getProductName',
        'print_receipt_product_name' => 'getPrintReceiptProductName',
        'color' => 'getColor',
        'size' => 'getSize',
        'group_code' => 'getGroupCode',
        'tax_division' => 'getTaxDivision',
        'price' => 'getPrice',
        'sales_price' => 'getSalesPrice',
        'unit_discount_price' => 'getUnitDiscountPrice',
        'unit_discount_rate' => 'getUnitDiscountRate',
        'unit_discount_division' => 'getUnitDiscountDivision',
        'cost' => 'getCost',
        'quantity' => 'getQuantity',
        'unit_non_discount_sum' => 'getUnitNonDiscountSum',
        'unit_discount_sum' => 'getUnitDiscountSum',
        'unit_discounted_sum' => 'getUnitDiscountedSum',
        'cost_sum' => 'getCostSum',
        'category_id' => 'getCategoryId',
        'category_name' => 'getCategoryName',
        'discrimination_no' => 'getDiscriminationNo',
        'sales_division' => 'getSalesDivision',
        'product_division' => 'getProductDivision',
        'inventory_reservation_division' => 'getInventoryReservationDivision',
        'point_not_applicable' => 'getPointNotApplicable',
        'calc_discount' => 'getCalcDiscount',
        'tax_free_division' => 'getTaxFreeDivision',
        'tax_free_commodity_price' => 'getTaxFreeCommodityPrice',
        'tax_free' => 'getTaxFree',
        'product_bundle_group_id' => 'getProductBundleGroupId',
        'discount_price_proportional' => 'getDiscountPriceProportional',
        'discount_point_proportional' => 'getDiscountPointProportional',
        'discount_coupon_proportional' => 'getDiscountCouponProportional',
        'tax_include_proportional' => 'getTaxIncludeProportional',
        'tax_exclude_proportional' => 'getTaxExcludeProportional',
        'product_bundle_proportional' => 'getProductBundleProportional',
        'staff_discount_proportional' => 'getStaffDiscountProportional',
        'bargain_discount_proportional' => 'getBargainDiscountProportional',
        'rounding_price_proportional' => 'getRoundingPriceProportional',
        'product_staff_discount_rate' => 'getProductStaffDiscountRate',
        'staff_rank' => 'getStaffRank',
        'staff_rank_name' => 'getStaffRankName',
        'staff_discount_rate' => 'getStaffDiscountRate',
        'staff_discount_division' => 'getStaffDiscountDivision',
        'apply_staff_discount_rate' => 'getApplyStaffDiscountRate',
        'apply_staff_discount_price' => 'getApplyStaffDiscountPrice',
        'bargain_id' => 'getBargainId',
        'bargain_name' => 'getBargainName',
        'bargain_division' => 'getBargainDivision',
        'bargain_value' => 'getBargainValue',
        'apply_bargain_value' => 'getApplyBargainValue',
        'apply_bargain_discount_price' => 'getApplyBargainDiscountPrice',
        'tax_rate' => 'getTaxRate',
        'standard_tax_rate' => 'getStandardTaxRate',
        'modified_tax_rate' => 'getModifiedTaxRate',
        'reduce_tax_id' => 'getReduceTaxId',
        'reduce_tax_name' => 'getReduceTaxName',
        'reduce_tax_rate' => 'getReduceTaxRate',
        'reduce_tax_price' => 'getReduceTaxPrice',
        'reduce_tax_member_price' => 'getReduceTaxMemberPrice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_head_id'] = $data['transaction_head_id'] ?? null;
        $this->container['transaction_detail_id'] = $data['transaction_detail_id'] ?? null;
        $this->container['parent_transaction_detail_id'] = $data['parent_transaction_detail_id'] ?? null;
        $this->container['transaction_detail_division'] = $data['transaction_detail_division'] ?? null;
        $this->container['product_id'] = $data['product_id'] ?? null;
        $this->container['product_code'] = $data['product_code'] ?? null;
        $this->container['product_name'] = $data['product_name'] ?? null;
        $this->container['print_receipt_product_name'] = $data['print_receipt_product_name'] ?? null;
        $this->container['color'] = $data['color'] ?? null;
        $this->container['size'] = $data['size'] ?? null;
        $this->container['group_code'] = $data['group_code'] ?? null;
        $this->container['tax_division'] = $data['tax_division'] ?? null;
        $this->container['price'] = $data['price'] ?? null;
        $this->container['sales_price'] = $data['sales_price'] ?? null;
        $this->container['unit_discount_price'] = $data['unit_discount_price'] ?? null;
        $this->container['unit_discount_rate'] = $data['unit_discount_rate'] ?? null;
        $this->container['unit_discount_division'] = $data['unit_discount_division'] ?? null;
        $this->container['cost'] = $data['cost'] ?? null;
        $this->container['quantity'] = $data['quantity'] ?? null;
        $this->container['unit_non_discount_sum'] = $data['unit_non_discount_sum'] ?? null;
        $this->container['unit_discount_sum'] = $data['unit_discount_sum'] ?? null;
        $this->container['unit_discounted_sum'] = $data['unit_discounted_sum'] ?? null;
        $this->container['cost_sum'] = $data['cost_sum'] ?? null;
        $this->container['category_id'] = $data['category_id'] ?? null;
        $this->container['category_name'] = $data['category_name'] ?? null;
        $this->container['discrimination_no'] = $data['discrimination_no'] ?? null;
        $this->container['sales_division'] = $data['sales_division'] ?? null;
        $this->container['product_division'] = $data['product_division'] ?? null;
        $this->container['inventory_reservation_division'] = $data['inventory_reservation_division'] ?? null;
        $this->container['point_not_applicable'] = $data['point_not_applicable'] ?? null;
        $this->container['calc_discount'] = $data['calc_discount'] ?? null;
        $this->container['tax_free_division'] = $data['tax_free_division'] ?? null;
        $this->container['tax_free_commodity_price'] = $data['tax_free_commodity_price'] ?? null;
        $this->container['tax_free'] = $data['tax_free'] ?? null;
        $this->container['product_bundle_group_id'] = $data['product_bundle_group_id'] ?? null;
        $this->container['discount_price_proportional'] = $data['discount_price_proportional'] ?? null;
        $this->container['discount_point_proportional'] = $data['discount_point_proportional'] ?? null;
        $this->container['discount_coupon_proportional'] = $data['discount_coupon_proportional'] ?? null;
        $this->container['tax_include_proportional'] = $data['tax_include_proportional'] ?? null;
        $this->container['tax_exclude_proportional'] = $data['tax_exclude_proportional'] ?? null;
        $this->container['product_bundle_proportional'] = $data['product_bundle_proportional'] ?? null;
        $this->container['staff_discount_proportional'] = $data['staff_discount_proportional'] ?? null;
        $this->container['bargain_discount_proportional'] = $data['bargain_discount_proportional'] ?? null;
        $this->container['rounding_price_proportional'] = $data['rounding_price_proportional'] ?? null;
        $this->container['product_staff_discount_rate'] = $data['product_staff_discount_rate'] ?? null;
        $this->container['staff_rank'] = $data['staff_rank'] ?? null;
        $this->container['staff_rank_name'] = $data['staff_rank_name'] ?? null;
        $this->container['staff_discount_rate'] = $data['staff_discount_rate'] ?? null;
        $this->container['staff_discount_division'] = $data['staff_discount_division'] ?? null;
        $this->container['apply_staff_discount_rate'] = $data['apply_staff_discount_rate'] ?? null;
        $this->container['apply_staff_discount_price'] = $data['apply_staff_discount_price'] ?? null;
        $this->container['bargain_id'] = $data['bargain_id'] ?? null;
        $this->container['bargain_name'] = $data['bargain_name'] ?? null;
        $this->container['bargain_division'] = $data['bargain_division'] ?? null;
        $this->container['bargain_value'] = $data['bargain_value'] ?? null;
        $this->container['apply_bargain_value'] = $data['apply_bargain_value'] ?? null;
        $this->container['apply_bargain_discount_price'] = $data['apply_bargain_discount_price'] ?? null;
        $this->container['tax_rate'] = $data['tax_rate'] ?? null;
        $this->container['standard_tax_rate'] = $data['standard_tax_rate'] ?? null;
        $this->container['modified_tax_rate'] = $data['modified_tax_rate'] ?? null;
        $this->container['reduce_tax_id'] = $data['reduce_tax_id'] ?? null;
        $this->container['reduce_tax_name'] = $data['reduce_tax_name'] ?? null;
        $this->container['reduce_tax_rate'] = $data['reduce_tax_rate'] ?? null;
        $this->container['reduce_tax_price'] = $data['reduce_tax_price'] ?? null;
        $this->container['reduce_tax_member_price'] = $data['reduce_tax_member_price'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['transaction_head_id'] === null) {
            $invalidProperties[] = "'transaction_head_id' can't be null";
        }
        if ((mb_strlen($this->container['transaction_head_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'transaction_head_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['transaction_detail_id'] === null) {
            $invalidProperties[] = "'transaction_detail_id' can't be null";
        }
        if ((mb_strlen($this->container['transaction_detail_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'transaction_detail_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['parent_transaction_detail_id']) && (mb_strlen($this->container['parent_transaction_detail_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'parent_transaction_detail_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['transaction_detail_division'] === null) {
            $invalidProperties[] = "'transaction_detail_division' can't be null";
        }
        if (!is_null($this->container['product_id']) && (mb_strlen($this->container['product_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'product_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['product_code']) && (mb_strlen($this->container['product_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'product_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['product_name']) && (mb_strlen($this->container['product_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'product_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['print_receipt_product_name']) && (mb_strlen($this->container['print_receipt_product_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'print_receipt_product_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['color']) && (mb_strlen($this->container['color']) < 1)) {
            $invalidProperties[] = "invalid value for 'color', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['size']) && (mb_strlen($this->container['size']) < 1)) {
            $invalidProperties[] = "invalid value for 'size', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['group_code']) && (mb_strlen($this->container['group_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'group_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['price']) && (mb_strlen($this->container['price']) < 1)) {
            $invalidProperties[] = "invalid value for 'price', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sales_price']) && (mb_strlen($this->container['sales_price']) < 1)) {
            $invalidProperties[] = "invalid value for 'sales_price', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['unit_discount_price']) && (mb_strlen($this->container['unit_discount_price']) < 1)) {
            $invalidProperties[] = "invalid value for 'unit_discount_price', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['unit_discount_rate']) && (mb_strlen($this->container['unit_discount_rate']) < 1)) {
            $invalidProperties[] = "invalid value for 'unit_discount_rate', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['unit_discount_division']) && (mb_strlen($this->container['unit_discount_division']) < 1)) {
            $invalidProperties[] = "invalid value for 'unit_discount_division', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cost']) && (mb_strlen($this->container['cost']) < 1)) {
            $invalidProperties[] = "invalid value for 'cost', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ((mb_strlen($this->container['quantity']) < 1)) {
            $invalidProperties[] = "invalid value for 'quantity', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['unit_non_discount_sum']) && (mb_strlen($this->container['unit_non_discount_sum']) < 1)) {
            $invalidProperties[] = "invalid value for 'unit_non_discount_sum', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['unit_discount_sum']) && (mb_strlen($this->container['unit_discount_sum']) < 1)) {
            $invalidProperties[] = "invalid value for 'unit_discount_sum', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['unit_discounted_sum']) && (mb_strlen($this->container['unit_discounted_sum']) < 1)) {
            $invalidProperties[] = "invalid value for 'unit_discounted_sum', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cost_sum']) && (mb_strlen($this->container['cost_sum']) < 1)) {
            $invalidProperties[] = "invalid value for 'cost_sum', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['category_id']) && (mb_strlen($this->container['category_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'category_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['category_name']) && (mb_strlen($this->container['category_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'category_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['discrimination_no']) && (mb_strlen($this->container['discrimination_no']) < 1)) {
            $invalidProperties[] = "invalid value for 'discrimination_no', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['inventory_reservation_division']) && (mb_strlen($this->container['inventory_reservation_division']) < 1)) {
            $invalidProperties[] = "invalid value for 'inventory_reservation_division', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['point_not_applicable']) && (mb_strlen($this->container['point_not_applicable']) < 1)) {
            $invalidProperties[] = "invalid value for 'point_not_applicable', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['calc_discount']) && (mb_strlen($this->container['calc_discount']) < 1)) {
            $invalidProperties[] = "invalid value for 'calc_discount', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['tax_free_division']) && (mb_strlen($this->container['tax_free_division']) < 1)) {
            $invalidProperties[] = "invalid value for 'tax_free_division', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['tax_free_commodity_price']) && (mb_strlen($this->container['tax_free_commodity_price']) < 1)) {
            $invalidProperties[] = "invalid value for 'tax_free_commodity_price', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['tax_free']) && (mb_strlen($this->container['tax_free']) < 1)) {
            $invalidProperties[] = "invalid value for 'tax_free', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['product_bundle_group_id']) && (mb_strlen($this->container['product_bundle_group_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'product_bundle_group_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['discount_price_proportional']) && (mb_strlen($this->container['discount_price_proportional']) < 1)) {
            $invalidProperties[] = "invalid value for 'discount_price_proportional', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['discount_point_proportional']) && (mb_strlen($this->container['discount_point_proportional']) < 1)) {
            $invalidProperties[] = "invalid value for 'discount_point_proportional', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['discount_coupon_proportional']) && (mb_strlen($this->container['discount_coupon_proportional']) < 1)) {
            $invalidProperties[] = "invalid value for 'discount_coupon_proportional', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['tax_include_proportional']) && (mb_strlen($this->container['tax_include_proportional']) < 1)) {
            $invalidProperties[] = "invalid value for 'tax_include_proportional', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['tax_exclude_proportional']) && (mb_strlen($this->container['tax_exclude_proportional']) < 1)) {
            $invalidProperties[] = "invalid value for 'tax_exclude_proportional', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['product_bundle_proportional']) && (mb_strlen($this->container['product_bundle_proportional']) < 1)) {
            $invalidProperties[] = "invalid value for 'product_bundle_proportional', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['staff_discount_proportional']) && (mb_strlen($this->container['staff_discount_proportional']) < 1)) {
            $invalidProperties[] = "invalid value for 'staff_discount_proportional', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['bargain_discount_proportional']) && (mb_strlen($this->container['bargain_discount_proportional']) < 1)) {
            $invalidProperties[] = "invalid value for 'bargain_discount_proportional', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['rounding_price_proportional']) && (mb_strlen($this->container['rounding_price_proportional']) < 1)) {
            $invalidProperties[] = "invalid value for 'rounding_price_proportional', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['product_staff_discount_rate']) && (mb_strlen($this->container['product_staff_discount_rate']) < 1)) {
            $invalidProperties[] = "invalid value for 'product_staff_discount_rate', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['staff_rank']) && (mb_strlen($this->container['staff_rank']) < 1)) {
            $invalidProperties[] = "invalid value for 'staff_rank', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['staff_rank_name']) && (mb_strlen($this->container['staff_rank_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'staff_rank_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['staff_discount_rate']) && (mb_strlen($this->container['staff_discount_rate']) < 1)) {
            $invalidProperties[] = "invalid value for 'staff_discount_rate', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['staff_discount_division']) && (mb_strlen($this->container['staff_discount_division']) < 1)) {
            $invalidProperties[] = "invalid value for 'staff_discount_division', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['apply_staff_discount_rate']) && (mb_strlen($this->container['apply_staff_discount_rate']) < 1)) {
            $invalidProperties[] = "invalid value for 'apply_staff_discount_rate', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['apply_staff_discount_price']) && (mb_strlen($this->container['apply_staff_discount_price']) < 1)) {
            $invalidProperties[] = "invalid value for 'apply_staff_discount_price', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['bargain_id']) && (mb_strlen($this->container['bargain_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'bargain_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['bargain_name']) && (mb_strlen($this->container['bargain_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'bargain_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['bargain_division']) && (mb_strlen($this->container['bargain_division']) < 1)) {
            $invalidProperties[] = "invalid value for 'bargain_division', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['bargain_value']) && (mb_strlen($this->container['bargain_value']) < 1)) {
            $invalidProperties[] = "invalid value for 'bargain_value', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['apply_bargain_value']) && (mb_strlen($this->container['apply_bargain_value']) < 1)) {
            $invalidProperties[] = "invalid value for 'apply_bargain_value', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['apply_bargain_discount_price']) && (mb_strlen($this->container['apply_bargain_discount_price']) < 1)) {
            $invalidProperties[] = "invalid value for 'apply_bargain_discount_price', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['tax_rate']) && (mb_strlen($this->container['tax_rate']) < 1)) {
            $invalidProperties[] = "invalid value for 'tax_rate', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['standard_tax_rate']) && (mb_strlen($this->container['standard_tax_rate']) < 1)) {
            $invalidProperties[] = "invalid value for 'standard_tax_rate', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['modified_tax_rate']) && (mb_strlen($this->container['modified_tax_rate']) < 1)) {
            $invalidProperties[] = "invalid value for 'modified_tax_rate', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['reduce_tax_id']) && (mb_strlen($this->container['reduce_tax_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'reduce_tax_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['reduce_tax_name']) && (mb_strlen($this->container['reduce_tax_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'reduce_tax_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['reduce_tax_rate']) && (mb_strlen($this->container['reduce_tax_rate']) < 1)) {
            $invalidProperties[] = "invalid value for 'reduce_tax_rate', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['reduce_tax_price']) && (mb_strlen($this->container['reduce_tax_price']) < 1)) {
            $invalidProperties[] = "invalid value for 'reduce_tax_price', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['reduce_tax_member_price']) && (mb_strlen($this->container['reduce_tax_member_price']) < 1)) {
            $invalidProperties[] = "invalid value for 'reduce_tax_member_price', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_head_id
     *
     * @return string
     */
    public function getTransactionHeadId()
    {
        return $this->container['transaction_head_id'];
    }

    /**
     * Sets transaction_head_id
     *
     * @param string $transaction_head_id transaction_head_id
     *
     * @return self
     */
    public function setTransactionHeadId($transaction_head_id)
    {

        if ((mb_strlen($transaction_head_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $transaction_head_id when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['transaction_head_id'] = $transaction_head_id;

        return $this;
    }

    /**
     * Gets transaction_detail_id
     *
     * @return string
     */
    public function getTransactionDetailId()
    {
        return $this->container['transaction_detail_id'];
    }

    /**
     * Sets transaction_detail_id
     *
     * @param string $transaction_detail_id transaction_detail_id
     *
     * @return self
     */
    public function setTransactionDetailId($transaction_detail_id)
    {

        if ((mb_strlen($transaction_detail_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $transaction_detail_id when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['transaction_detail_id'] = $transaction_detail_id;

        return $this;
    }

    /**
     * Gets parent_transaction_detail_id
     *
     * @return string|null
     */
    public function getParentTransactionDetailId()
    {
        return $this->container['parent_transaction_detail_id'];
    }

    /**
     * Sets parent_transaction_detail_id
     *
     * @param string|null $parent_transaction_detail_id parent_transaction_detail_id
     *
     * @return self
     */
    public function setParentTransactionDetailId($parent_transaction_detail_id)
    {

        if (!is_null($parent_transaction_detail_id) && (mb_strlen($parent_transaction_detail_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $parent_transaction_detail_id when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['parent_transaction_detail_id'] = $parent_transaction_detail_id;

        return $this;
    }

    /**
     * Gets transaction_detail_division
     *
     * @return \OpenAPI\Client\Model\TransactionDetailDivision
     */
    public function getTransactionDetailDivision()
    {
        return $this->container['transaction_detail_division'];
    }

    /**
     * Sets transaction_detail_division
     *
     * @param \OpenAPI\Client\Model\TransactionDetailDivision $transaction_detail_division transaction_detail_division
     *
     * @return self
     */
    public function setTransactionDetailDivision($transaction_detail_division)
    {
        $this->container['transaction_detail_division'] = $transaction_detail_division;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string|null
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string|null $product_id product_id
     *
     * @return self
     */
    public function setProductId($product_id)
    {

        if (!is_null($product_id) && (mb_strlen($product_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $product_id when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets product_code
     *
     * @return string|null
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string|null $product_code product_code
     *
     * @return self
     */
    public function setProductCode($product_code)
    {

        if (!is_null($product_code) && (mb_strlen($product_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $product_code when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string|null
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string|null $product_name product_name
     *
     * @return self
     */
    public function setProductName($product_name)
    {

        if (!is_null($product_name) && (mb_strlen($product_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $product_name when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets print_receipt_product_name
     *
     * @return string|null
     */
    public function getPrintReceiptProductName()
    {
        return $this->container['print_receipt_product_name'];
    }

    /**
     * Sets print_receipt_product_name
     *
     * @param string|null $print_receipt_product_name print_receipt_product_name
     *
     * @return self
     */
    public function setPrintReceiptProductName($print_receipt_product_name)
    {

        if (!is_null($print_receipt_product_name) && (mb_strlen($print_receipt_product_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $print_receipt_product_name when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['print_receipt_product_name'] = $print_receipt_product_name;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string|null
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string|null $color color
     *
     * @return self
     */
    public function setColor($color)
    {

        if (!is_null($color) && (mb_strlen($color) < 1)) {
            throw new \InvalidArgumentException('invalid length for $color when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets size
     *
     * @return string|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param string|null $size size
     *
     * @return self
     */
    public function setSize($size)
    {

        if (!is_null($size) && (mb_strlen($size) < 1)) {
            throw new \InvalidArgumentException('invalid length for $size when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets group_code
     *
     * @return string|null
     */
    public function getGroupCode()
    {
        return $this->container['group_code'];
    }

    /**
     * Sets group_code
     *
     * @param string|null $group_code group_code
     *
     * @return self
     */
    public function setGroupCode($group_code)
    {

        if (!is_null($group_code) && (mb_strlen($group_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $group_code when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['group_code'] = $group_code;

        return $this;
    }

    /**
     * Gets tax_division
     *
     * @return \OpenAPI\Client\Model\TaxDivision|null
     */
    public function getTaxDivision()
    {
        return $this->container['tax_division'];
    }

    /**
     * Sets tax_division
     *
     * @param \OpenAPI\Client\Model\TaxDivision|null $tax_division tax_division
     *
     * @return self
     */
    public function setTaxDivision($tax_division)
    {
        $this->container['tax_division'] = $tax_division;

        return $this;
    }

    /**
     * Gets price
     *
     * @return string|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param string|null $price price
     *
     * @return self
     */
    public function setPrice($price)
    {

        if (!is_null($price) && (mb_strlen($price) < 1)) {
            throw new \InvalidArgumentException('invalid length for $price when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets sales_price
     *
     * @return string|null
     */
    public function getSalesPrice()
    {
        return $this->container['sales_price'];
    }

    /**
     * Sets sales_price
     *
     * @param string|null $sales_price sales_price
     *
     * @return self
     */
    public function setSalesPrice($sales_price)
    {

        if (!is_null($sales_price) && (mb_strlen($sales_price) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sales_price when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['sales_price'] = $sales_price;

        return $this;
    }

    /**
     * Gets unit_discount_price
     *
     * @return string|null
     */
    public function getUnitDiscountPrice()
    {
        return $this->container['unit_discount_price'];
    }

    /**
     * Sets unit_discount_price
     *
     * @param string|null $unit_discount_price unit_discount_price
     *
     * @return self
     */
    public function setUnitDiscountPrice($unit_discount_price)
    {

        if (!is_null($unit_discount_price) && (mb_strlen($unit_discount_price) < 1)) {
            throw new \InvalidArgumentException('invalid length for $unit_discount_price when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['unit_discount_price'] = $unit_discount_price;

        return $this;
    }

    /**
     * Gets unit_discount_rate
     *
     * @return string|null
     */
    public function getUnitDiscountRate()
    {
        return $this->container['unit_discount_rate'];
    }

    /**
     * Sets unit_discount_rate
     *
     * @param string|null $unit_discount_rate unit_discount_rate
     *
     * @return self
     */
    public function setUnitDiscountRate($unit_discount_rate)
    {

        if (!is_null($unit_discount_rate) && (mb_strlen($unit_discount_rate) < 1)) {
            throw new \InvalidArgumentException('invalid length for $unit_discount_rate when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['unit_discount_rate'] = $unit_discount_rate;

        return $this;
    }

    /**
     * Gets unit_discount_division
     *
     * @return string|null
     */
    public function getUnitDiscountDivision()
    {
        return $this->container['unit_discount_division'];
    }

    /**
     * Sets unit_discount_division
     *
     * @param string|null $unit_discount_division unit_discount_division
     *
     * @return self
     */
    public function setUnitDiscountDivision($unit_discount_division)
    {

        if (!is_null($unit_discount_division) && (mb_strlen($unit_discount_division) < 1)) {
            throw new \InvalidArgumentException('invalid length for $unit_discount_division when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['unit_discount_division'] = $unit_discount_division;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return string|null
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param string|null $cost cost
     *
     * @return self
     */
    public function setCost($cost)
    {

        if (!is_null($cost) && (mb_strlen($cost) < 1)) {
            throw new \InvalidArgumentException('invalid length for $cost when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return string
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param string $quantity quantity
     *
     * @return self
     */
    public function setQuantity($quantity)
    {

        if ((mb_strlen($quantity) < 1)) {
            throw new \InvalidArgumentException('invalid length for $quantity when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets unit_non_discount_sum
     *
     * @return string|null
     */
    public function getUnitNonDiscountSum()
    {
        return $this->container['unit_non_discount_sum'];
    }

    /**
     * Sets unit_non_discount_sum
     *
     * @param string|null $unit_non_discount_sum unit_non_discount_sum
     *
     * @return self
     */
    public function setUnitNonDiscountSum($unit_non_discount_sum)
    {

        if (!is_null($unit_non_discount_sum) && (mb_strlen($unit_non_discount_sum) < 1)) {
            throw new \InvalidArgumentException('invalid length for $unit_non_discount_sum when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['unit_non_discount_sum'] = $unit_non_discount_sum;

        return $this;
    }

    /**
     * Gets unit_discount_sum
     *
     * @return string|null
     */
    public function getUnitDiscountSum()
    {
        return $this->container['unit_discount_sum'];
    }

    /**
     * Sets unit_discount_sum
     *
     * @param string|null $unit_discount_sum unit_discount_sum
     *
     * @return self
     */
    public function setUnitDiscountSum($unit_discount_sum)
    {

        if (!is_null($unit_discount_sum) && (mb_strlen($unit_discount_sum) < 1)) {
            throw new \InvalidArgumentException('invalid length for $unit_discount_sum when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['unit_discount_sum'] = $unit_discount_sum;

        return $this;
    }

    /**
     * Gets unit_discounted_sum
     *
     * @return string|null
     */
    public function getUnitDiscountedSum()
    {
        return $this->container['unit_discounted_sum'];
    }

    /**
     * Sets unit_discounted_sum
     *
     * @param string|null $unit_discounted_sum unit_discounted_sum
     *
     * @return self
     */
    public function setUnitDiscountedSum($unit_discounted_sum)
    {

        if (!is_null($unit_discounted_sum) && (mb_strlen($unit_discounted_sum) < 1)) {
            throw new \InvalidArgumentException('invalid length for $unit_discounted_sum when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['unit_discounted_sum'] = $unit_discounted_sum;

        return $this;
    }

    /**
     * Gets cost_sum
     *
     * @return string|null
     */
    public function getCostSum()
    {
        return $this->container['cost_sum'];
    }

    /**
     * Sets cost_sum
     *
     * @param string|null $cost_sum cost_sum
     *
     * @return self
     */
    public function setCostSum($cost_sum)
    {

        if (!is_null($cost_sum) && (mb_strlen($cost_sum) < 1)) {
            throw new \InvalidArgumentException('invalid length for $cost_sum when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['cost_sum'] = $cost_sum;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return string|null
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param string|null $category_id category_id
     *
     * @return self
     */
    public function setCategoryId($category_id)
    {

        if (!is_null($category_id) && (mb_strlen($category_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $category_id when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets category_name
     *
     * @return string|null
     */
    public function getCategoryName()
    {
        return $this->container['category_name'];
    }

    /**
     * Sets category_name
     *
     * @param string|null $category_name category_name
     *
     * @return self
     */
    public function setCategoryName($category_name)
    {

        if (!is_null($category_name) && (mb_strlen($category_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $category_name when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['category_name'] = $category_name;

        return $this;
    }

    /**
     * Gets discrimination_no
     *
     * @return string|null
     */
    public function getDiscriminationNo()
    {
        return $this->container['discrimination_no'];
    }

    /**
     * Sets discrimination_no
     *
     * @param string|null $discrimination_no discrimination_no
     *
     * @return self
     */
    public function setDiscriminationNo($discrimination_no)
    {

        if (!is_null($discrimination_no) && (mb_strlen($discrimination_no) < 1)) {
            throw new \InvalidArgumentException('invalid length for $discrimination_no when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['discrimination_no'] = $discrimination_no;

        return $this;
    }

    /**
     * Gets sales_division
     *
     * @return \OpenAPI\Client\Model\SalesDivision|null
     */
    public function getSalesDivision()
    {
        return $this->container['sales_division'];
    }

    /**
     * Sets sales_division
     *
     * @param \OpenAPI\Client\Model\SalesDivision|null $sales_division sales_division
     *
     * @return self
     */
    public function setSalesDivision($sales_division)
    {
        $this->container['sales_division'] = $sales_division;

        return $this;
    }

    /**
     * Gets product_division
     *
     * @return \OpenAPI\Client\Model\ProductDivision|null
     */
    public function getProductDivision()
    {
        return $this->container['product_division'];
    }

    /**
     * Sets product_division
     *
     * @param \OpenAPI\Client\Model\ProductDivision|null $product_division product_division
     *
     * @return self
     */
    public function setProductDivision($product_division)
    {
        $this->container['product_division'] = $product_division;

        return $this;
    }

    /**
     * Gets inventory_reservation_division
     *
     * @return string|null
     */
    public function getInventoryReservationDivision()
    {
        return $this->container['inventory_reservation_division'];
    }

    /**
     * Sets inventory_reservation_division
     *
     * @param string|null $inventory_reservation_division inventory_reservation_division
     *
     * @return self
     */
    public function setInventoryReservationDivision($inventory_reservation_division)
    {

        if (!is_null($inventory_reservation_division) && (mb_strlen($inventory_reservation_division) < 1)) {
            throw new \InvalidArgumentException('invalid length for $inventory_reservation_division when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['inventory_reservation_division'] = $inventory_reservation_division;

        return $this;
    }

    /**
     * Gets point_not_applicable
     *
     * @return string|null
     */
    public function getPointNotApplicable()
    {
        return $this->container['point_not_applicable'];
    }

    /**
     * Sets point_not_applicable
     *
     * @param string|null $point_not_applicable point_not_applicable
     *
     * @return self
     */
    public function setPointNotApplicable($point_not_applicable)
    {

        if (!is_null($point_not_applicable) && (mb_strlen($point_not_applicable) < 1)) {
            throw new \InvalidArgumentException('invalid length for $point_not_applicable when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['point_not_applicable'] = $point_not_applicable;

        return $this;
    }

    /**
     * Gets calc_discount
     *
     * @return string|null
     */
    public function getCalcDiscount()
    {
        return $this->container['calc_discount'];
    }

    /**
     * Sets calc_discount
     *
     * @param string|null $calc_discount calc_discount
     *
     * @return self
     */
    public function setCalcDiscount($calc_discount)
    {

        if (!is_null($calc_discount) && (mb_strlen($calc_discount) < 1)) {
            throw new \InvalidArgumentException('invalid length for $calc_discount when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['calc_discount'] = $calc_discount;

        return $this;
    }

    /**
     * Gets tax_free_division
     *
     * @return string|null
     */
    public function getTaxFreeDivision()
    {
        return $this->container['tax_free_division'];
    }

    /**
     * Sets tax_free_division
     *
     * @param string|null $tax_free_division tax_free_division
     *
     * @return self
     */
    public function setTaxFreeDivision($tax_free_division)
    {

        if (!is_null($tax_free_division) && (mb_strlen($tax_free_division) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tax_free_division when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['tax_free_division'] = $tax_free_division;

        return $this;
    }

    /**
     * Gets tax_free_commodity_price
     *
     * @return string|null
     */
    public function getTaxFreeCommodityPrice()
    {
        return $this->container['tax_free_commodity_price'];
    }

    /**
     * Sets tax_free_commodity_price
     *
     * @param string|null $tax_free_commodity_price tax_free_commodity_price
     *
     * @return self
     */
    public function setTaxFreeCommodityPrice($tax_free_commodity_price)
    {

        if (!is_null($tax_free_commodity_price) && (mb_strlen($tax_free_commodity_price) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tax_free_commodity_price when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['tax_free_commodity_price'] = $tax_free_commodity_price;

        return $this;
    }

    /**
     * Gets tax_free
     *
     * @return string|null
     */
    public function getTaxFree()
    {
        return $this->container['tax_free'];
    }

    /**
     * Sets tax_free
     *
     * @param string|null $tax_free tax_free
     *
     * @return self
     */
    public function setTaxFree($tax_free)
    {

        if (!is_null($tax_free) && (mb_strlen($tax_free) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tax_free when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['tax_free'] = $tax_free;

        return $this;
    }

    /**
     * Gets product_bundle_group_id
     *
     * @return string|null
     */
    public function getProductBundleGroupId()
    {
        return $this->container['product_bundle_group_id'];
    }

    /**
     * Sets product_bundle_group_id
     *
     * @param string|null $product_bundle_group_id product_bundle_group_id
     *
     * @return self
     */
    public function setProductBundleGroupId($product_bundle_group_id)
    {

        if (!is_null($product_bundle_group_id) && (mb_strlen($product_bundle_group_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $product_bundle_group_id when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['product_bundle_group_id'] = $product_bundle_group_id;

        return $this;
    }

    /**
     * Gets discount_price_proportional
     *
     * @return string|null
     */
    public function getDiscountPriceProportional()
    {
        return $this->container['discount_price_proportional'];
    }

    /**
     * Sets discount_price_proportional
     *
     * @param string|null $discount_price_proportional discount_price_proportional
     *
     * @return self
     */
    public function setDiscountPriceProportional($discount_price_proportional)
    {

        if (!is_null($discount_price_proportional) && (mb_strlen($discount_price_proportional) < 1)) {
            throw new \InvalidArgumentException('invalid length for $discount_price_proportional when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['discount_price_proportional'] = $discount_price_proportional;

        return $this;
    }

    /**
     * Gets discount_point_proportional
     *
     * @return string|null
     */
    public function getDiscountPointProportional()
    {
        return $this->container['discount_point_proportional'];
    }

    /**
     * Sets discount_point_proportional
     *
     * @param string|null $discount_point_proportional discount_point_proportional
     *
     * @return self
     */
    public function setDiscountPointProportional($discount_point_proportional)
    {

        if (!is_null($discount_point_proportional) && (mb_strlen($discount_point_proportional) < 1)) {
            throw new \InvalidArgumentException('invalid length for $discount_point_proportional when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['discount_point_proportional'] = $discount_point_proportional;

        return $this;
    }

    /**
     * Gets discount_coupon_proportional
     *
     * @return string|null
     */
    public function getDiscountCouponProportional()
    {
        return $this->container['discount_coupon_proportional'];
    }

    /**
     * Sets discount_coupon_proportional
     *
     * @param string|null $discount_coupon_proportional discount_coupon_proportional
     *
     * @return self
     */
    public function setDiscountCouponProportional($discount_coupon_proportional)
    {

        if (!is_null($discount_coupon_proportional) && (mb_strlen($discount_coupon_proportional) < 1)) {
            throw new \InvalidArgumentException('invalid length for $discount_coupon_proportional when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['discount_coupon_proportional'] = $discount_coupon_proportional;

        return $this;
    }

    /**
     * Gets tax_include_proportional
     *
     * @return string|null
     */
    public function getTaxIncludeProportional()
    {
        return $this->container['tax_include_proportional'];
    }

    /**
     * Sets tax_include_proportional
     *
     * @param string|null $tax_include_proportional tax_include_proportional
     *
     * @return self
     */
    public function setTaxIncludeProportional($tax_include_proportional)
    {

        if (!is_null($tax_include_proportional) && (mb_strlen($tax_include_proportional) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tax_include_proportional when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['tax_include_proportional'] = $tax_include_proportional;

        return $this;
    }

    /**
     * Gets tax_exclude_proportional
     *
     * @return string|null
     */
    public function getTaxExcludeProportional()
    {
        return $this->container['tax_exclude_proportional'];
    }

    /**
     * Sets tax_exclude_proportional
     *
     * @param string|null $tax_exclude_proportional tax_exclude_proportional
     *
     * @return self
     */
    public function setTaxExcludeProportional($tax_exclude_proportional)
    {

        if (!is_null($tax_exclude_proportional) && (mb_strlen($tax_exclude_proportional) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tax_exclude_proportional when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['tax_exclude_proportional'] = $tax_exclude_proportional;

        return $this;
    }

    /**
     * Gets product_bundle_proportional
     *
     * @return string|null
     */
    public function getProductBundleProportional()
    {
        return $this->container['product_bundle_proportional'];
    }

    /**
     * Sets product_bundle_proportional
     *
     * @param string|null $product_bundle_proportional product_bundle_proportional
     *
     * @return self
     */
    public function setProductBundleProportional($product_bundle_proportional)
    {

        if (!is_null($product_bundle_proportional) && (mb_strlen($product_bundle_proportional) < 1)) {
            throw new \InvalidArgumentException('invalid length for $product_bundle_proportional when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['product_bundle_proportional'] = $product_bundle_proportional;

        return $this;
    }

    /**
     * Gets staff_discount_proportional
     *
     * @return string|null
     */
    public function getStaffDiscountProportional()
    {
        return $this->container['staff_discount_proportional'];
    }

    /**
     * Sets staff_discount_proportional
     *
     * @param string|null $staff_discount_proportional staff_discount_proportional
     *
     * @return self
     */
    public function setStaffDiscountProportional($staff_discount_proportional)
    {

        if (!is_null($staff_discount_proportional) && (mb_strlen($staff_discount_proportional) < 1)) {
            throw new \InvalidArgumentException('invalid length for $staff_discount_proportional when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['staff_discount_proportional'] = $staff_discount_proportional;

        return $this;
    }

    /**
     * Gets bargain_discount_proportional
     *
     * @return string|null
     */
    public function getBargainDiscountProportional()
    {
        return $this->container['bargain_discount_proportional'];
    }

    /**
     * Sets bargain_discount_proportional
     *
     * @param string|null $bargain_discount_proportional bargain_discount_proportional
     *
     * @return self
     */
    public function setBargainDiscountProportional($bargain_discount_proportional)
    {

        if (!is_null($bargain_discount_proportional) && (mb_strlen($bargain_discount_proportional) < 1)) {
            throw new \InvalidArgumentException('invalid length for $bargain_discount_proportional when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['bargain_discount_proportional'] = $bargain_discount_proportional;

        return $this;
    }

    /**
     * Gets rounding_price_proportional
     *
     * @return string|null
     */
    public function getRoundingPriceProportional()
    {
        return $this->container['rounding_price_proportional'];
    }

    /**
     * Sets rounding_price_proportional
     *
     * @param string|null $rounding_price_proportional rounding_price_proportional
     *
     * @return self
     */
    public function setRoundingPriceProportional($rounding_price_proportional)
    {

        if (!is_null($rounding_price_proportional) && (mb_strlen($rounding_price_proportional) < 1)) {
            throw new \InvalidArgumentException('invalid length for $rounding_price_proportional when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['rounding_price_proportional'] = $rounding_price_proportional;

        return $this;
    }

    /**
     * Gets product_staff_discount_rate
     *
     * @return string|null
     */
    public function getProductStaffDiscountRate()
    {
        return $this->container['product_staff_discount_rate'];
    }

    /**
     * Sets product_staff_discount_rate
     *
     * @param string|null $product_staff_discount_rate product_staff_discount_rate
     *
     * @return self
     */
    public function setProductStaffDiscountRate($product_staff_discount_rate)
    {

        if (!is_null($product_staff_discount_rate) && (mb_strlen($product_staff_discount_rate) < 1)) {
            throw new \InvalidArgumentException('invalid length for $product_staff_discount_rate when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['product_staff_discount_rate'] = $product_staff_discount_rate;

        return $this;
    }

    /**
     * Gets staff_rank
     *
     * @return string|null
     */
    public function getStaffRank()
    {
        return $this->container['staff_rank'];
    }

    /**
     * Sets staff_rank
     *
     * @param string|null $staff_rank staff_rank
     *
     * @return self
     */
    public function setStaffRank($staff_rank)
    {

        if (!is_null($staff_rank) && (mb_strlen($staff_rank) < 1)) {
            throw new \InvalidArgumentException('invalid length for $staff_rank when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['staff_rank'] = $staff_rank;

        return $this;
    }

    /**
     * Gets staff_rank_name
     *
     * @return string|null
     */
    public function getStaffRankName()
    {
        return $this->container['staff_rank_name'];
    }

    /**
     * Sets staff_rank_name
     *
     * @param string|null $staff_rank_name staff_rank_name
     *
     * @return self
     */
    public function setStaffRankName($staff_rank_name)
    {

        if (!is_null($staff_rank_name) && (mb_strlen($staff_rank_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $staff_rank_name when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['staff_rank_name'] = $staff_rank_name;

        return $this;
    }

    /**
     * Gets staff_discount_rate
     *
     * @return string|null
     */
    public function getStaffDiscountRate()
    {
        return $this->container['staff_discount_rate'];
    }

    /**
     * Sets staff_discount_rate
     *
     * @param string|null $staff_discount_rate staff_discount_rate
     *
     * @return self
     */
    public function setStaffDiscountRate($staff_discount_rate)
    {

        if (!is_null($staff_discount_rate) && (mb_strlen($staff_discount_rate) < 1)) {
            throw new \InvalidArgumentException('invalid length for $staff_discount_rate when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['staff_discount_rate'] = $staff_discount_rate;

        return $this;
    }

    /**
     * Gets staff_discount_division
     *
     * @return string|null
     */
    public function getStaffDiscountDivision()
    {
        return $this->container['staff_discount_division'];
    }

    /**
     * Sets staff_discount_division
     *
     * @param string|null $staff_discount_division staff_discount_division
     *
     * @return self
     */
    public function setStaffDiscountDivision($staff_discount_division)
    {

        if (!is_null($staff_discount_division) && (mb_strlen($staff_discount_division) < 1)) {
            throw new \InvalidArgumentException('invalid length for $staff_discount_division when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['staff_discount_division'] = $staff_discount_division;

        return $this;
    }

    /**
     * Gets apply_staff_discount_rate
     *
     * @return string|null
     */
    public function getApplyStaffDiscountRate()
    {
        return $this->container['apply_staff_discount_rate'];
    }

    /**
     * Sets apply_staff_discount_rate
     *
     * @param string|null $apply_staff_discount_rate apply_staff_discount_rate
     *
     * @return self
     */
    public function setApplyStaffDiscountRate($apply_staff_discount_rate)
    {

        if (!is_null($apply_staff_discount_rate) && (mb_strlen($apply_staff_discount_rate) < 1)) {
            throw new \InvalidArgumentException('invalid length for $apply_staff_discount_rate when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['apply_staff_discount_rate'] = $apply_staff_discount_rate;

        return $this;
    }

    /**
     * Gets apply_staff_discount_price
     *
     * @return string|null
     */
    public function getApplyStaffDiscountPrice()
    {
        return $this->container['apply_staff_discount_price'];
    }

    /**
     * Sets apply_staff_discount_price
     *
     * @param string|null $apply_staff_discount_price apply_staff_discount_price
     *
     * @return self
     */
    public function setApplyStaffDiscountPrice($apply_staff_discount_price)
    {

        if (!is_null($apply_staff_discount_price) && (mb_strlen($apply_staff_discount_price) < 1)) {
            throw new \InvalidArgumentException('invalid length for $apply_staff_discount_price when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['apply_staff_discount_price'] = $apply_staff_discount_price;

        return $this;
    }

    /**
     * Gets bargain_id
     *
     * @return string|null
     */
    public function getBargainId()
    {
        return $this->container['bargain_id'];
    }

    /**
     * Sets bargain_id
     *
     * @param string|null $bargain_id bargain_id
     *
     * @return self
     */
    public function setBargainId($bargain_id)
    {

        if (!is_null($bargain_id) && (mb_strlen($bargain_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $bargain_id when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['bargain_id'] = $bargain_id;

        return $this;
    }

    /**
     * Gets bargain_name
     *
     * @return string|null
     */
    public function getBargainName()
    {
        return $this->container['bargain_name'];
    }

    /**
     * Sets bargain_name
     *
     * @param string|null $bargain_name bargain_name
     *
     * @return self
     */
    public function setBargainName($bargain_name)
    {

        if (!is_null($bargain_name) && (mb_strlen($bargain_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $bargain_name when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['bargain_name'] = $bargain_name;

        return $this;
    }

    /**
     * Gets bargain_division
     *
     * @return string|null
     */
    public function getBargainDivision()
    {
        return $this->container['bargain_division'];
    }

    /**
     * Sets bargain_division
     *
     * @param string|null $bargain_division bargain_division
     *
     * @return self
     */
    public function setBargainDivision($bargain_division)
    {

        if (!is_null($bargain_division) && (mb_strlen($bargain_division) < 1)) {
            throw new \InvalidArgumentException('invalid length for $bargain_division when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['bargain_division'] = $bargain_division;

        return $this;
    }

    /**
     * Gets bargain_value
     *
     * @return string|null
     */
    public function getBargainValue()
    {
        return $this->container['bargain_value'];
    }

    /**
     * Sets bargain_value
     *
     * @param string|null $bargain_value bargain_value
     *
     * @return self
     */
    public function setBargainValue($bargain_value)
    {

        if (!is_null($bargain_value) && (mb_strlen($bargain_value) < 1)) {
            throw new \InvalidArgumentException('invalid length for $bargain_value when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['bargain_value'] = $bargain_value;

        return $this;
    }

    /**
     * Gets apply_bargain_value
     *
     * @return string|null
     */
    public function getApplyBargainValue()
    {
        return $this->container['apply_bargain_value'];
    }

    /**
     * Sets apply_bargain_value
     *
     * @param string|null $apply_bargain_value apply_bargain_value
     *
     * @return self
     */
    public function setApplyBargainValue($apply_bargain_value)
    {

        if (!is_null($apply_bargain_value) && (mb_strlen($apply_bargain_value) < 1)) {
            throw new \InvalidArgumentException('invalid length for $apply_bargain_value when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['apply_bargain_value'] = $apply_bargain_value;

        return $this;
    }

    /**
     * Gets apply_bargain_discount_price
     *
     * @return string|null
     */
    public function getApplyBargainDiscountPrice()
    {
        return $this->container['apply_bargain_discount_price'];
    }

    /**
     * Sets apply_bargain_discount_price
     *
     * @param string|null $apply_bargain_discount_price apply_bargain_discount_price
     *
     * @return self
     */
    public function setApplyBargainDiscountPrice($apply_bargain_discount_price)
    {

        if (!is_null($apply_bargain_discount_price) && (mb_strlen($apply_bargain_discount_price) < 1)) {
            throw new \InvalidArgumentException('invalid length for $apply_bargain_discount_price when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['apply_bargain_discount_price'] = $apply_bargain_discount_price;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return string|null
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param string|null $tax_rate tax_rate
     *
     * @return self
     */
    public function setTaxRate($tax_rate)
    {

        if (!is_null($tax_rate) && (mb_strlen($tax_rate) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tax_rate when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets standard_tax_rate
     *
     * @return string|null
     */
    public function getStandardTaxRate()
    {
        return $this->container['standard_tax_rate'];
    }

    /**
     * Sets standard_tax_rate
     *
     * @param string|null $standard_tax_rate standard_tax_rate
     *
     * @return self
     */
    public function setStandardTaxRate($standard_tax_rate)
    {

        if (!is_null($standard_tax_rate) && (mb_strlen($standard_tax_rate) < 1)) {
            throw new \InvalidArgumentException('invalid length for $standard_tax_rate when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['standard_tax_rate'] = $standard_tax_rate;

        return $this;
    }

    /**
     * Gets modified_tax_rate
     *
     * @return string|null
     */
    public function getModifiedTaxRate()
    {
        return $this->container['modified_tax_rate'];
    }

    /**
     * Sets modified_tax_rate
     *
     * @param string|null $modified_tax_rate modified_tax_rate
     *
     * @return self
     */
    public function setModifiedTaxRate($modified_tax_rate)
    {

        if (!is_null($modified_tax_rate) && (mb_strlen($modified_tax_rate) < 1)) {
            throw new \InvalidArgumentException('invalid length for $modified_tax_rate when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['modified_tax_rate'] = $modified_tax_rate;

        return $this;
    }

    /**
     * Gets reduce_tax_id
     *
     * @return string|null
     */
    public function getReduceTaxId()
    {
        return $this->container['reduce_tax_id'];
    }

    /**
     * Sets reduce_tax_id
     *
     * @param string|null $reduce_tax_id reduce_tax_id
     *
     * @return self
     */
    public function setReduceTaxId($reduce_tax_id)
    {

        if (!is_null($reduce_tax_id) && (mb_strlen($reduce_tax_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $reduce_tax_id when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['reduce_tax_id'] = $reduce_tax_id;

        return $this;
    }

    /**
     * Gets reduce_tax_name
     *
     * @return string|null
     */
    public function getReduceTaxName()
    {
        return $this->container['reduce_tax_name'];
    }

    /**
     * Sets reduce_tax_name
     *
     * @param string|null $reduce_tax_name reduce_tax_name
     *
     * @return self
     */
    public function setReduceTaxName($reduce_tax_name)
    {

        if (!is_null($reduce_tax_name) && (mb_strlen($reduce_tax_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $reduce_tax_name when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['reduce_tax_name'] = $reduce_tax_name;

        return $this;
    }

    /**
     * Gets reduce_tax_rate
     *
     * @return string|null
     */
    public function getReduceTaxRate()
    {
        return $this->container['reduce_tax_rate'];
    }

    /**
     * Sets reduce_tax_rate
     *
     * @param string|null $reduce_tax_rate reduce_tax_rate
     *
     * @return self
     */
    public function setReduceTaxRate($reduce_tax_rate)
    {

        if (!is_null($reduce_tax_rate) && (mb_strlen($reduce_tax_rate) < 1)) {
            throw new \InvalidArgumentException('invalid length for $reduce_tax_rate when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['reduce_tax_rate'] = $reduce_tax_rate;

        return $this;
    }

    /**
     * Gets reduce_tax_price
     *
     * @return string|null
     */
    public function getReduceTaxPrice()
    {
        return $this->container['reduce_tax_price'];
    }

    /**
     * Sets reduce_tax_price
     *
     * @param string|null $reduce_tax_price reduce_tax_price
     *
     * @return self
     */
    public function setReduceTaxPrice($reduce_tax_price)
    {

        if (!is_null($reduce_tax_price) && (mb_strlen($reduce_tax_price) < 1)) {
            throw new \InvalidArgumentException('invalid length for $reduce_tax_price when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['reduce_tax_price'] = $reduce_tax_price;

        return $this;
    }

    /**
     * Gets reduce_tax_member_price
     *
     * @return string|null
     */
    public function getReduceTaxMemberPrice()
    {
        return $this->container['reduce_tax_member_price'];
    }

    /**
     * Sets reduce_tax_member_price
     *
     * @param string|null $reduce_tax_member_price reduce_tax_member_price
     *
     * @return self
     */
    public function setReduceTaxMemberPrice($reduce_tax_member_price)
    {

        if (!is_null($reduce_tax_member_price) && (mb_strlen($reduce_tax_member_price) < 1)) {
            throw new \InvalidArgumentException('invalid length for $reduce_tax_member_price when calling TransactionDetail., must be bigger than or equal to 1.');
        }

        $this->container['reduce_tax_member_price'] = $reduce_tax_member_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


