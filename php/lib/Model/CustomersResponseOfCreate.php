<?php
/**
 * CustomersResponseOfCreate
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * スマレジ
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CustomersResponseOfCreate Class Doc Comment
 *
 * @category Class
 * @description POS APIの型表現にバグと思われる矛盾があるため、CustomersResponseを流用できない
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CustomersResponseOfCreate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CustomersResponseOfCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'customer_id' => 'object',
        'customer_code' => 'string',
        'customer_no' => 'string',
        'rank' => 'string',
        'staff_rank' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'first_kana' => 'string',
        'last_kana' => 'string',
        'post_code' => 'string',
        'address' => 'string',
        'phone_number' => 'string',
        'fax_number' => 'string',
        'mobile_number' => 'string',
        'mail_address' => 'string',
        'mail_address2' => 'string',
        'mail_address3' => 'string',
        'company_name' => 'string',
        'department_name' => 'string',
        'managerial_position' => 'string',
        'sex' => '\OpenAPI\Client\Model\Sex',
        'birth_date' => 'string',
        'point_expire_date' => 'string',
        'last_come_date_time' => 'string',
        'entry_date' => 'string',
        'leave_date' => 'string',
        'point_giving_unit_price' => 'string',
        'point_giving_unit' => 'string',
        'pin_code' => 'string',
        'passport_no' => 'string',
        'nationality' => 'string',
        'alphabet_name' => 'string',
        'mail_receive_flag' => '\OpenAPI\Client\Model\MailReceiveFlag',
        'note' => 'string',
        'note2' => 'string',
        'favorite_list' => 'string',
        'browsing_list' => 'string',
        'status' => '\OpenAPI\Client\Model\Status',
        'store_id' => 'string',
        'ins_date_time' => 'string',
        'upd_date_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'customer_id' => null,
        'customer_code' => null,
        'customer_no' => null,
        'rank' => null,
        'staff_rank' => null,
        'first_name' => null,
        'last_name' => null,
        'first_kana' => null,
        'last_kana' => null,
        'post_code' => null,
        'address' => null,
        'phone_number' => null,
        'fax_number' => null,
        'mobile_number' => null,
        'mail_address' => null,
        'mail_address2' => null,
        'mail_address3' => null,
        'company_name' => null,
        'department_name' => null,
        'managerial_position' => null,
        'sex' => null,
        'birth_date' => null,
        'point_expire_date' => null,
        'last_come_date_time' => null,
        'entry_date' => null,
        'leave_date' => null,
        'point_giving_unit_price' => null,
        'point_giving_unit' => null,
        'pin_code' => null,
        'passport_no' => null,
        'nationality' => null,
        'alphabet_name' => null,
        'mail_receive_flag' => null,
        'note' => null,
        'note2' => null,
        'favorite_list' => null,
        'browsing_list' => null,
        'status' => null,
        'store_id' => null,
        'ins_date_time' => null,
        'upd_date_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_id' => 'customerId',
        'customer_code' => 'customerCode',
        'customer_no' => 'customerNo',
        'rank' => 'rank',
        'staff_rank' => 'staffRank',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'first_kana' => 'firstKana',
        'last_kana' => 'lastKana',
        'post_code' => 'postCode',
        'address' => 'address',
        'phone_number' => 'phoneNumber',
        'fax_number' => 'faxNumber',
        'mobile_number' => 'mobileNumber',
        'mail_address' => 'mailAddress',
        'mail_address2' => 'mailAddress2',
        'mail_address3' => 'mailAddress3',
        'company_name' => 'companyName',
        'department_name' => 'departmentName',
        'managerial_position' => 'managerialPosition',
        'sex' => 'sex',
        'birth_date' => 'birthDate',
        'point_expire_date' => 'pointExpireDate',
        'last_come_date_time' => 'lastComeDateTime',
        'entry_date' => 'entryDate',
        'leave_date' => 'leaveDate',
        'point_giving_unit_price' => 'pointGivingUnitPrice',
        'point_giving_unit' => 'pointGivingUnit',
        'pin_code' => 'pinCode',
        'passport_no' => 'passportNo',
        'nationality' => 'nationality',
        'alphabet_name' => 'alphabetName',
        'mail_receive_flag' => 'mailReceiveFlag',
        'note' => 'note',
        'note2' => 'note2',
        'favorite_list' => 'favoriteList',
        'browsing_list' => 'browsingList',
        'status' => 'status',
        'store_id' => 'storeId',
        'ins_date_time' => 'insDateTime',
        'upd_date_time' => 'updDateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_id' => 'setCustomerId',
        'customer_code' => 'setCustomerCode',
        'customer_no' => 'setCustomerNo',
        'rank' => 'setRank',
        'staff_rank' => 'setStaffRank',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'first_kana' => 'setFirstKana',
        'last_kana' => 'setLastKana',
        'post_code' => 'setPostCode',
        'address' => 'setAddress',
        'phone_number' => 'setPhoneNumber',
        'fax_number' => 'setFaxNumber',
        'mobile_number' => 'setMobileNumber',
        'mail_address' => 'setMailAddress',
        'mail_address2' => 'setMailAddress2',
        'mail_address3' => 'setMailAddress3',
        'company_name' => 'setCompanyName',
        'department_name' => 'setDepartmentName',
        'managerial_position' => 'setManagerialPosition',
        'sex' => 'setSex',
        'birth_date' => 'setBirthDate',
        'point_expire_date' => 'setPointExpireDate',
        'last_come_date_time' => 'setLastComeDateTime',
        'entry_date' => 'setEntryDate',
        'leave_date' => 'setLeaveDate',
        'point_giving_unit_price' => 'setPointGivingUnitPrice',
        'point_giving_unit' => 'setPointGivingUnit',
        'pin_code' => 'setPinCode',
        'passport_no' => 'setPassportNo',
        'nationality' => 'setNationality',
        'alphabet_name' => 'setAlphabetName',
        'mail_receive_flag' => 'setMailReceiveFlag',
        'note' => 'setNote',
        'note2' => 'setNote2',
        'favorite_list' => 'setFavoriteList',
        'browsing_list' => 'setBrowsingList',
        'status' => 'setStatus',
        'store_id' => 'setStoreId',
        'ins_date_time' => 'setInsDateTime',
        'upd_date_time' => 'setUpdDateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_id' => 'getCustomerId',
        'customer_code' => 'getCustomerCode',
        'customer_no' => 'getCustomerNo',
        'rank' => 'getRank',
        'staff_rank' => 'getStaffRank',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'first_kana' => 'getFirstKana',
        'last_kana' => 'getLastKana',
        'post_code' => 'getPostCode',
        'address' => 'getAddress',
        'phone_number' => 'getPhoneNumber',
        'fax_number' => 'getFaxNumber',
        'mobile_number' => 'getMobileNumber',
        'mail_address' => 'getMailAddress',
        'mail_address2' => 'getMailAddress2',
        'mail_address3' => 'getMailAddress3',
        'company_name' => 'getCompanyName',
        'department_name' => 'getDepartmentName',
        'managerial_position' => 'getManagerialPosition',
        'sex' => 'getSex',
        'birth_date' => 'getBirthDate',
        'point_expire_date' => 'getPointExpireDate',
        'last_come_date_time' => 'getLastComeDateTime',
        'entry_date' => 'getEntryDate',
        'leave_date' => 'getLeaveDate',
        'point_giving_unit_price' => 'getPointGivingUnitPrice',
        'point_giving_unit' => 'getPointGivingUnit',
        'pin_code' => 'getPinCode',
        'passport_no' => 'getPassportNo',
        'nationality' => 'getNationality',
        'alphabet_name' => 'getAlphabetName',
        'mail_receive_flag' => 'getMailReceiveFlag',
        'note' => 'getNote',
        'note2' => 'getNote2',
        'favorite_list' => 'getFavoriteList',
        'browsing_list' => 'getBrowsingList',
        'status' => 'getStatus',
        'store_id' => 'getStoreId',
        'ins_date_time' => 'getInsDateTime',
        'upd_date_time' => 'getUpdDateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer_id'] = $data['customer_id'] ?? null;
        $this->container['customer_code'] = $data['customer_code'] ?? null;
        $this->container['customer_no'] = $data['customer_no'] ?? null;
        $this->container['rank'] = $data['rank'] ?? null;
        $this->container['staff_rank'] = $data['staff_rank'] ?? null;
        $this->container['first_name'] = $data['first_name'] ?? null;
        $this->container['last_name'] = $data['last_name'] ?? null;
        $this->container['first_kana'] = $data['first_kana'] ?? null;
        $this->container['last_kana'] = $data['last_kana'] ?? null;
        $this->container['post_code'] = $data['post_code'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['phone_number'] = $data['phone_number'] ?? null;
        $this->container['fax_number'] = $data['fax_number'] ?? null;
        $this->container['mobile_number'] = $data['mobile_number'] ?? null;
        $this->container['mail_address'] = $data['mail_address'] ?? null;
        $this->container['mail_address2'] = $data['mail_address2'] ?? null;
        $this->container['mail_address3'] = $data['mail_address3'] ?? null;
        $this->container['company_name'] = $data['company_name'] ?? null;
        $this->container['department_name'] = $data['department_name'] ?? null;
        $this->container['managerial_position'] = $data['managerial_position'] ?? null;
        $this->container['sex'] = $data['sex'] ?? null;
        $this->container['birth_date'] = $data['birth_date'] ?? null;
        $this->container['point_expire_date'] = $data['point_expire_date'] ?? null;
        $this->container['last_come_date_time'] = $data['last_come_date_time'] ?? null;
        $this->container['entry_date'] = $data['entry_date'] ?? null;
        $this->container['leave_date'] = $data['leave_date'] ?? null;
        $this->container['point_giving_unit_price'] = $data['point_giving_unit_price'] ?? null;
        $this->container['point_giving_unit'] = $data['point_giving_unit'] ?? null;
        $this->container['pin_code'] = $data['pin_code'] ?? null;
        $this->container['passport_no'] = $data['passport_no'] ?? null;
        $this->container['nationality'] = $data['nationality'] ?? null;
        $this->container['alphabet_name'] = $data['alphabet_name'] ?? null;
        $this->container['mail_receive_flag'] = $data['mail_receive_flag'] ?? null;
        $this->container['note'] = $data['note'] ?? null;
        $this->container['note2'] = $data['note2'] ?? null;
        $this->container['favorite_list'] = $data['favorite_list'] ?? null;
        $this->container['browsing_list'] = $data['browsing_list'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['store_id'] = $data['store_id'] ?? null;
        $this->container['ins_date_time'] = $data['ins_date_time'] ?? null;
        $this->container['upd_date_time'] = $data['upd_date_time'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['customer_id'] === null) {
            $invalidProperties[] = "'customer_id' can't be null";
        }
        if (!is_null($this->container['customer_code']) && (mb_strlen($this->container['customer_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'customer_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['customer_no']) && (mb_strlen($this->container['customer_no']) < 1)) {
            $invalidProperties[] = "invalid value for 'customer_no', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['rank']) && (mb_strlen($this->container['rank']) < 1)) {
            $invalidProperties[] = "invalid value for 'rank', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['staff_rank']) && (mb_strlen($this->container['staff_rank']) < 1)) {
            $invalidProperties[] = "invalid value for 'staff_rank', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['first_name']) && (mb_strlen($this->container['first_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'first_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['last_name']) && (mb_strlen($this->container['last_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'last_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['first_kana']) && (mb_strlen($this->container['first_kana']) < 1)) {
            $invalidProperties[] = "invalid value for 'first_kana', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['last_kana']) && (mb_strlen($this->container['last_kana']) < 1)) {
            $invalidProperties[] = "invalid value for 'last_kana', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['post_code']) && (mb_strlen($this->container['post_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'post_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['address']) && (mb_strlen($this->container['address']) < 1)) {
            $invalidProperties[] = "invalid value for 'address', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['phone_number']) && (mb_strlen($this->container['phone_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['fax_number']) && (mb_strlen($this->container['fax_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'fax_number', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['mobile_number']) && (mb_strlen($this->container['mobile_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'mobile_number', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['mail_address']) && (mb_strlen($this->container['mail_address']) < 1)) {
            $invalidProperties[] = "invalid value for 'mail_address', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['mail_address2']) && (mb_strlen($this->container['mail_address2']) < 1)) {
            $invalidProperties[] = "invalid value for 'mail_address2', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['mail_address3']) && (mb_strlen($this->container['mail_address3']) < 1)) {
            $invalidProperties[] = "invalid value for 'mail_address3', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['company_name']) && (mb_strlen($this->container['company_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'company_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['department_name']) && (mb_strlen($this->container['department_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'department_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['managerial_position']) && (mb_strlen($this->container['managerial_position']) < 1)) {
            $invalidProperties[] = "invalid value for 'managerial_position', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['birth_date']) && (mb_strlen($this->container['birth_date']) < 1)) {
            $invalidProperties[] = "invalid value for 'birth_date', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['point_expire_date']) && (mb_strlen($this->container['point_expire_date']) < 1)) {
            $invalidProperties[] = "invalid value for 'point_expire_date', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['last_come_date_time']) && (mb_strlen($this->container['last_come_date_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'last_come_date_time', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['entry_date']) && (mb_strlen($this->container['entry_date']) < 1)) {
            $invalidProperties[] = "invalid value for 'entry_date', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['leave_date']) && (mb_strlen($this->container['leave_date']) < 1)) {
            $invalidProperties[] = "invalid value for 'leave_date', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['point_giving_unit_price']) && (mb_strlen($this->container['point_giving_unit_price']) < 1)) {
            $invalidProperties[] = "invalid value for 'point_giving_unit_price', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['point_giving_unit']) && (mb_strlen($this->container['point_giving_unit']) < 1)) {
            $invalidProperties[] = "invalid value for 'point_giving_unit', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['pin_code']) && (mb_strlen($this->container['pin_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'pin_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['passport_no']) && (mb_strlen($this->container['passport_no']) < 1)) {
            $invalidProperties[] = "invalid value for 'passport_no', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['nationality']) && (mb_strlen($this->container['nationality']) < 1)) {
            $invalidProperties[] = "invalid value for 'nationality', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['alphabet_name']) && (mb_strlen($this->container['alphabet_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'alphabet_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['note']) && (mb_strlen($this->container['note']) < 1)) {
            $invalidProperties[] = "invalid value for 'note', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['note2']) && (mb_strlen($this->container['note2']) < 1)) {
            $invalidProperties[] = "invalid value for 'note2', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['favorite_list']) && (mb_strlen($this->container['favorite_list']) < 1)) {
            $invalidProperties[] = "invalid value for 'favorite_list', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['browsing_list']) && (mb_strlen($this->container['browsing_list']) < 1)) {
            $invalidProperties[] = "invalid value for 'browsing_list', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['store_id']) && (mb_strlen($this->container['store_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'store_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ins_date_time']) && (mb_strlen($this->container['ins_date_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'ins_date_time', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['upd_date_time']) && (mb_strlen($this->container['upd_date_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'upd_date_time', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_id
     *
     * @return object
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param object $customer_id customer_id
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {


        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets customer_code
     *
     * @return string|null
     */
    public function getCustomerCode()
    {
        return $this->container['customer_code'];
    }

    /**
     * Sets customer_code
     *
     * @param string|null $customer_code customer_code
     *
     * @return self
     */
    public function setCustomerCode($customer_code)
    {

        if (!is_null($customer_code) && (mb_strlen($customer_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_code when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['customer_code'] = $customer_code;

        return $this;
    }

    /**
     * Gets customer_no
     *
     * @return string|null
     */
    public function getCustomerNo()
    {
        return $this->container['customer_no'];
    }

    /**
     * Sets customer_no
     *
     * @param string|null $customer_no customer_no
     *
     * @return self
     */
    public function setCustomerNo($customer_no)
    {

        if (!is_null($customer_no) && (mb_strlen($customer_no) < 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_no when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['customer_no'] = $customer_no;

        return $this;
    }

    /**
     * Gets rank
     *
     * @return string|null
     */
    public function getRank()
    {
        return $this->container['rank'];
    }

    /**
     * Sets rank
     *
     * @param string|null $rank rank
     *
     * @return self
     */
    public function setRank($rank)
    {

        if (!is_null($rank) && (mb_strlen($rank) < 1)) {
            throw new \InvalidArgumentException('invalid length for $rank when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['rank'] = $rank;

        return $this;
    }

    /**
     * Gets staff_rank
     *
     * @return string|null
     */
    public function getStaffRank()
    {
        return $this->container['staff_rank'];
    }

    /**
     * Sets staff_rank
     *
     * @param string|null $staff_rank staff_rank
     *
     * @return self
     */
    public function setStaffRank($staff_rank)
    {

        if (!is_null($staff_rank) && (mb_strlen($staff_rank) < 1)) {
            throw new \InvalidArgumentException('invalid length for $staff_rank when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['staff_rank'] = $staff_rank;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string|null
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string|null $first_name first_name
     *
     * @return self
     */
    public function setFirstName($first_name)
    {

        if (!is_null($first_name) && (mb_strlen($first_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $first_name when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string|null
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string|null $last_name last_name
     *
     * @return self
     */
    public function setLastName($last_name)
    {

        if (!is_null($last_name) && (mb_strlen($last_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $last_name when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets first_kana
     *
     * @return string|null
     */
    public function getFirstKana()
    {
        return $this->container['first_kana'];
    }

    /**
     * Sets first_kana
     *
     * @param string|null $first_kana first_kana
     *
     * @return self
     */
    public function setFirstKana($first_kana)
    {

        if (!is_null($first_kana) && (mb_strlen($first_kana) < 1)) {
            throw new \InvalidArgumentException('invalid length for $first_kana when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['first_kana'] = $first_kana;

        return $this;
    }

    /**
     * Gets last_kana
     *
     * @return string|null
     */
    public function getLastKana()
    {
        return $this->container['last_kana'];
    }

    /**
     * Sets last_kana
     *
     * @param string|null $last_kana last_kana
     *
     * @return self
     */
    public function setLastKana($last_kana)
    {

        if (!is_null($last_kana) && (mb_strlen($last_kana) < 1)) {
            throw new \InvalidArgumentException('invalid length for $last_kana when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['last_kana'] = $last_kana;

        return $this;
    }

    /**
     * Gets post_code
     *
     * @return string|null
     */
    public function getPostCode()
    {
        return $this->container['post_code'];
    }

    /**
     * Sets post_code
     *
     * @param string|null $post_code post_code
     *
     * @return self
     */
    public function setPostCode($post_code)
    {

        if (!is_null($post_code) && (mb_strlen($post_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $post_code when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['post_code'] = $post_code;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {

        if (!is_null($address) && (mb_strlen($address) < 1)) {
            throw new \InvalidArgumentException('invalid length for $address when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number phone_number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {

        if (!is_null($phone_number) && (mb_strlen($phone_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets fax_number
     *
     * @return string|null
     */
    public function getFaxNumber()
    {
        return $this->container['fax_number'];
    }

    /**
     * Sets fax_number
     *
     * @param string|null $fax_number fax_number
     *
     * @return self
     */
    public function setFaxNumber($fax_number)
    {

        if (!is_null($fax_number) && (mb_strlen($fax_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $fax_number when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['fax_number'] = $fax_number;

        return $this;
    }

    /**
     * Gets mobile_number
     *
     * @return string|null
     */
    public function getMobileNumber()
    {
        return $this->container['mobile_number'];
    }

    /**
     * Sets mobile_number
     *
     * @param string|null $mobile_number mobile_number
     *
     * @return self
     */
    public function setMobileNumber($mobile_number)
    {

        if (!is_null($mobile_number) && (mb_strlen($mobile_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $mobile_number when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['mobile_number'] = $mobile_number;

        return $this;
    }

    /**
     * Gets mail_address
     *
     * @return string|null
     */
    public function getMailAddress()
    {
        return $this->container['mail_address'];
    }

    /**
     * Sets mail_address
     *
     * @param string|null $mail_address mail_address
     *
     * @return self
     */
    public function setMailAddress($mail_address)
    {

        if (!is_null($mail_address) && (mb_strlen($mail_address) < 1)) {
            throw new \InvalidArgumentException('invalid length for $mail_address when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['mail_address'] = $mail_address;

        return $this;
    }

    /**
     * Gets mail_address2
     *
     * @return string|null
     */
    public function getMailAddress2()
    {
        return $this->container['mail_address2'];
    }

    /**
     * Sets mail_address2
     *
     * @param string|null $mail_address2 mail_address2
     *
     * @return self
     */
    public function setMailAddress2($mail_address2)
    {

        if (!is_null($mail_address2) && (mb_strlen($mail_address2) < 1)) {
            throw new \InvalidArgumentException('invalid length for $mail_address2 when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['mail_address2'] = $mail_address2;

        return $this;
    }

    /**
     * Gets mail_address3
     *
     * @return string|null
     */
    public function getMailAddress3()
    {
        return $this->container['mail_address3'];
    }

    /**
     * Sets mail_address3
     *
     * @param string|null $mail_address3 mail_address3
     *
     * @return self
     */
    public function setMailAddress3($mail_address3)
    {

        if (!is_null($mail_address3) && (mb_strlen($mail_address3) < 1)) {
            throw new \InvalidArgumentException('invalid length for $mail_address3 when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['mail_address3'] = $mail_address3;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string|null
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string|null $company_name company_name
     *
     * @return self
     */
    public function setCompanyName($company_name)
    {

        if (!is_null($company_name) && (mb_strlen($company_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $company_name when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets department_name
     *
     * @return string|null
     */
    public function getDepartmentName()
    {
        return $this->container['department_name'];
    }

    /**
     * Sets department_name
     *
     * @param string|null $department_name department_name
     *
     * @return self
     */
    public function setDepartmentName($department_name)
    {

        if (!is_null($department_name) && (mb_strlen($department_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $department_name when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['department_name'] = $department_name;

        return $this;
    }

    /**
     * Gets managerial_position
     *
     * @return string|null
     */
    public function getManagerialPosition()
    {
        return $this->container['managerial_position'];
    }

    /**
     * Sets managerial_position
     *
     * @param string|null $managerial_position managerial_position
     *
     * @return self
     */
    public function setManagerialPosition($managerial_position)
    {

        if (!is_null($managerial_position) && (mb_strlen($managerial_position) < 1)) {
            throw new \InvalidArgumentException('invalid length for $managerial_position when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['managerial_position'] = $managerial_position;

        return $this;
    }

    /**
     * Gets sex
     *
     * @return \OpenAPI\Client\Model\Sex|null
     */
    public function getSex()
    {
        return $this->container['sex'];
    }

    /**
     * Sets sex
     *
     * @param \OpenAPI\Client\Model\Sex|null $sex sex
     *
     * @return self
     */
    public function setSex($sex)
    {
        $this->container['sex'] = $sex;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return string|null
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param string|null $birth_date birth_date
     *
     * @return self
     */
    public function setBirthDate($birth_date)
    {

        if (!is_null($birth_date) && (mb_strlen($birth_date) < 1)) {
            throw new \InvalidArgumentException('invalid length for $birth_date when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets point_expire_date
     *
     * @return string|null
     */
    public function getPointExpireDate()
    {
        return $this->container['point_expire_date'];
    }

    /**
     * Sets point_expire_date
     *
     * @param string|null $point_expire_date point_expire_date
     *
     * @return self
     */
    public function setPointExpireDate($point_expire_date)
    {

        if (!is_null($point_expire_date) && (mb_strlen($point_expire_date) < 1)) {
            throw new \InvalidArgumentException('invalid length for $point_expire_date when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['point_expire_date'] = $point_expire_date;

        return $this;
    }

    /**
     * Gets last_come_date_time
     *
     * @return string|null
     */
    public function getLastComeDateTime()
    {
        return $this->container['last_come_date_time'];
    }

    /**
     * Sets last_come_date_time
     *
     * @param string|null $last_come_date_time last_come_date_time
     *
     * @return self
     */
    public function setLastComeDateTime($last_come_date_time)
    {

        if (!is_null($last_come_date_time) && (mb_strlen($last_come_date_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $last_come_date_time when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['last_come_date_time'] = $last_come_date_time;

        return $this;
    }

    /**
     * Gets entry_date
     *
     * @return string|null
     */
    public function getEntryDate()
    {
        return $this->container['entry_date'];
    }

    /**
     * Sets entry_date
     *
     * @param string|null $entry_date entry_date
     *
     * @return self
     */
    public function setEntryDate($entry_date)
    {

        if (!is_null($entry_date) && (mb_strlen($entry_date) < 1)) {
            throw new \InvalidArgumentException('invalid length for $entry_date when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['entry_date'] = $entry_date;

        return $this;
    }

    /**
     * Gets leave_date
     *
     * @return string|null
     */
    public function getLeaveDate()
    {
        return $this->container['leave_date'];
    }

    /**
     * Sets leave_date
     *
     * @param string|null $leave_date leave_date
     *
     * @return self
     */
    public function setLeaveDate($leave_date)
    {

        if (!is_null($leave_date) && (mb_strlen($leave_date) < 1)) {
            throw new \InvalidArgumentException('invalid length for $leave_date when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['leave_date'] = $leave_date;

        return $this;
    }

    /**
     * Gets point_giving_unit_price
     *
     * @return string|null
     */
    public function getPointGivingUnitPrice()
    {
        return $this->container['point_giving_unit_price'];
    }

    /**
     * Sets point_giving_unit_price
     *
     * @param string|null $point_giving_unit_price point_giving_unit_price
     *
     * @return self
     */
    public function setPointGivingUnitPrice($point_giving_unit_price)
    {

        if (!is_null($point_giving_unit_price) && (mb_strlen($point_giving_unit_price) < 1)) {
            throw new \InvalidArgumentException('invalid length for $point_giving_unit_price when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['point_giving_unit_price'] = $point_giving_unit_price;

        return $this;
    }

    /**
     * Gets point_giving_unit
     *
     * @return string|null
     */
    public function getPointGivingUnit()
    {
        return $this->container['point_giving_unit'];
    }

    /**
     * Sets point_giving_unit
     *
     * @param string|null $point_giving_unit point_giving_unit
     *
     * @return self
     */
    public function setPointGivingUnit($point_giving_unit)
    {

        if (!is_null($point_giving_unit) && (mb_strlen($point_giving_unit) < 1)) {
            throw new \InvalidArgumentException('invalid length for $point_giving_unit when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['point_giving_unit'] = $point_giving_unit;

        return $this;
    }

    /**
     * Gets pin_code
     *
     * @return string|null
     */
    public function getPinCode()
    {
        return $this->container['pin_code'];
    }

    /**
     * Sets pin_code
     *
     * @param string|null $pin_code pin_code
     *
     * @return self
     */
    public function setPinCode($pin_code)
    {

        if (!is_null($pin_code) && (mb_strlen($pin_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $pin_code when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['pin_code'] = $pin_code;

        return $this;
    }

    /**
     * Gets passport_no
     *
     * @return string|null
     */
    public function getPassportNo()
    {
        return $this->container['passport_no'];
    }

    /**
     * Sets passport_no
     *
     * @param string|null $passport_no passport_no
     *
     * @return self
     */
    public function setPassportNo($passport_no)
    {

        if (!is_null($passport_no) && (mb_strlen($passport_no) < 1)) {
            throw new \InvalidArgumentException('invalid length for $passport_no when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['passport_no'] = $passport_no;

        return $this;
    }

    /**
     * Gets nationality
     *
     * @return string|null
     */
    public function getNationality()
    {
        return $this->container['nationality'];
    }

    /**
     * Sets nationality
     *
     * @param string|null $nationality nationality
     *
     * @return self
     */
    public function setNationality($nationality)
    {

        if (!is_null($nationality) && (mb_strlen($nationality) < 1)) {
            throw new \InvalidArgumentException('invalid length for $nationality when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['nationality'] = $nationality;

        return $this;
    }

    /**
     * Gets alphabet_name
     *
     * @return string|null
     */
    public function getAlphabetName()
    {
        return $this->container['alphabet_name'];
    }

    /**
     * Sets alphabet_name
     *
     * @param string|null $alphabet_name alphabet_name
     *
     * @return self
     */
    public function setAlphabetName($alphabet_name)
    {

        if (!is_null($alphabet_name) && (mb_strlen($alphabet_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $alphabet_name when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['alphabet_name'] = $alphabet_name;

        return $this;
    }

    /**
     * Gets mail_receive_flag
     *
     * @return \OpenAPI\Client\Model\MailReceiveFlag|null
     */
    public function getMailReceiveFlag()
    {
        return $this->container['mail_receive_flag'];
    }

    /**
     * Sets mail_receive_flag
     *
     * @param \OpenAPI\Client\Model\MailReceiveFlag|null $mail_receive_flag mail_receive_flag
     *
     * @return self
     */
    public function setMailReceiveFlag($mail_receive_flag)
    {
        $this->container['mail_receive_flag'] = $mail_receive_flag;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return self
     */
    public function setNote($note)
    {

        if (!is_null($note) && (mb_strlen($note) < 1)) {
            throw new \InvalidArgumentException('invalid length for $note when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets note2
     *
     * @return string|null
     */
    public function getNote2()
    {
        return $this->container['note2'];
    }

    /**
     * Sets note2
     *
     * @param string|null $note2 note2
     *
     * @return self
     */
    public function setNote2($note2)
    {

        if (!is_null($note2) && (mb_strlen($note2) < 1)) {
            throw new \InvalidArgumentException('invalid length for $note2 when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['note2'] = $note2;

        return $this;
    }

    /**
     * Gets favorite_list
     *
     * @return string|null
     */
    public function getFavoriteList()
    {
        return $this->container['favorite_list'];
    }

    /**
     * Sets favorite_list
     *
     * @param string|null $favorite_list favorite_list
     *
     * @return self
     */
    public function setFavoriteList($favorite_list)
    {

        if (!is_null($favorite_list) && (mb_strlen($favorite_list) < 1)) {
            throw new \InvalidArgumentException('invalid length for $favorite_list when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['favorite_list'] = $favorite_list;

        return $this;
    }

    /**
     * Gets browsing_list
     *
     * @return string|null
     */
    public function getBrowsingList()
    {
        return $this->container['browsing_list'];
    }

    /**
     * Sets browsing_list
     *
     * @param string|null $browsing_list browsing_list
     *
     * @return self
     */
    public function setBrowsingList($browsing_list)
    {

        if (!is_null($browsing_list) && (mb_strlen($browsing_list) < 1)) {
            throw new \InvalidArgumentException('invalid length for $browsing_list when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['browsing_list'] = $browsing_list;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\Status|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\Status|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets store_id
     *
     * @return string|null
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param string|null $store_id store_id
     *
     * @return self
     */
    public function setStoreId($store_id)
    {

        if (!is_null($store_id) && (mb_strlen($store_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $store_id when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets ins_date_time
     *
     * @return string|null
     */
    public function getInsDateTime()
    {
        return $this->container['ins_date_time'];
    }

    /**
     * Sets ins_date_time
     *
     * @param string|null $ins_date_time ins_date_time
     *
     * @return self
     */
    public function setInsDateTime($ins_date_time)
    {

        if (!is_null($ins_date_time) && (mb_strlen($ins_date_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ins_date_time when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['ins_date_time'] = $ins_date_time;

        return $this;
    }

    /**
     * Gets upd_date_time
     *
     * @return string|null
     */
    public function getUpdDateTime()
    {
        return $this->container['upd_date_time'];
    }

    /**
     * Sets upd_date_time
     *
     * @param string|null $upd_date_time upd_date_time
     *
     * @return self
     */
    public function setUpdDateTime($upd_date_time)
    {

        if (!is_null($upd_date_time) && (mb_strlen($upd_date_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $upd_date_time when calling CustomersResponseOfCreate., must be bigger than or equal to 1.');
        }

        $this->container['upd_date_time'] = $upd_date_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


