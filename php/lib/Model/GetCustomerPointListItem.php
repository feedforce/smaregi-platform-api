<?php
/**
 * GetCustomerPointListItem
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * スマレジ
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GetCustomerPointListItem Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class GetCustomerPointListItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getCustomerPointListItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'customer_id' => 'string',
        'mile' => 'string',
        'point' => 'string',
        'point_expire_date' => 'string',
        'ins_date_time' => 'string',
        'upd_date_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'customer_id' => null,
        'mile' => null,
        'point' => null,
        'point_expire_date' => null,
        'ins_date_time' => null,
        'upd_date_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'customer_id' => 'customerId',
        'mile' => 'mile',
        'point' => 'point',
        'point_expire_date' => 'pointExpireDate',
        'ins_date_time' => 'insDateTime',
        'upd_date_time' => 'updDateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'customer_id' => 'setCustomerId',
        'mile' => 'setMile',
        'point' => 'setPoint',
        'point_expire_date' => 'setPointExpireDate',
        'ins_date_time' => 'setInsDateTime',
        'upd_date_time' => 'setUpdDateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'customer_id' => 'getCustomerId',
        'mile' => 'getMile',
        'point' => 'getPoint',
        'point_expire_date' => 'getPointExpireDate',
        'ins_date_time' => 'getInsDateTime',
        'upd_date_time' => 'getUpdDateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['customer_id'] = $data['customer_id'] ?? null;
        $this->container['mile'] = $data['mile'] ?? null;
        $this->container['point'] = $data['point'] ?? null;
        $this->container['point_expire_date'] = $data['point_expire_date'] ?? null;
        $this->container['ins_date_time'] = $data['ins_date_time'] ?? null;
        $this->container['upd_date_time'] = $data['upd_date_time'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['customer_id'] === null) {
            $invalidProperties[] = "'customer_id' can't be null";
        }
        if ((mb_strlen($this->container['customer_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'customer_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['mile']) && (mb_strlen($this->container['mile']) < 1)) {
            $invalidProperties[] = "invalid value for 'mile', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['point']) && (mb_strlen($this->container['point']) < 1)) {
            $invalidProperties[] = "invalid value for 'point', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['point_expire_date']) && (mb_strlen($this->container['point_expire_date']) < 1)) {
            $invalidProperties[] = "invalid value for 'point_expire_date', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['ins_date_time'] === null) {
            $invalidProperties[] = "'ins_date_time' can't be null";
        }
        if ((mb_strlen($this->container['ins_date_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'ins_date_time', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['upd_date_time'] === null) {
            $invalidProperties[] = "'upd_date_time' can't be null";
        }
        if ((mb_strlen($this->container['upd_date_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'upd_date_time', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets customer_id
     *
     * @return string
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param string $customer_id customer_id
     *
     * @return self
     */
    public function setCustomerId($customer_id)
    {

        if ((mb_strlen($customer_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $customer_id when calling GetCustomerPointListItem., must be bigger than or equal to 1.');
        }

        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets mile
     *
     * @return string|null
     */
    public function getMile()
    {
        return $this->container['mile'];
    }

    /**
     * Sets mile
     *
     * @param string|null $mile mile
     *
     * @return self
     */
    public function setMile($mile)
    {

        if (!is_null($mile) && (mb_strlen($mile) < 1)) {
            throw new \InvalidArgumentException('invalid length for $mile when calling GetCustomerPointListItem., must be bigger than or equal to 1.');
        }

        $this->container['mile'] = $mile;

        return $this;
    }

    /**
     * Gets point
     *
     * @return string|null
     */
    public function getPoint()
    {
        return $this->container['point'];
    }

    /**
     * Sets point
     *
     * @param string|null $point point
     *
     * @return self
     */
    public function setPoint($point)
    {

        if (!is_null($point) && (mb_strlen($point) < 1)) {
            throw new \InvalidArgumentException('invalid length for $point when calling GetCustomerPointListItem., must be bigger than or equal to 1.');
        }

        $this->container['point'] = $point;

        return $this;
    }

    /**
     * Gets point_expire_date
     *
     * @return string|null
     */
    public function getPointExpireDate()
    {
        return $this->container['point_expire_date'];
    }

    /**
     * Sets point_expire_date
     *
     * @param string|null $point_expire_date point_expire_date
     *
     * @return self
     */
    public function setPointExpireDate($point_expire_date)
    {

        if (!is_null($point_expire_date) && (mb_strlen($point_expire_date) < 1)) {
            throw new \InvalidArgumentException('invalid length for $point_expire_date when calling GetCustomerPointListItem., must be bigger than or equal to 1.');
        }

        $this->container['point_expire_date'] = $point_expire_date;

        return $this;
    }

    /**
     * Gets ins_date_time
     *
     * @return string
     */
    public function getInsDateTime()
    {
        return $this->container['ins_date_time'];
    }

    /**
     * Sets ins_date_time
     *
     * @param string $ins_date_time ins_date_time
     *
     * @return self
     */
    public function setInsDateTime($ins_date_time)
    {

        if ((mb_strlen($ins_date_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ins_date_time when calling GetCustomerPointListItem., must be bigger than or equal to 1.');
        }

        $this->container['ins_date_time'] = $ins_date_time;

        return $this;
    }

    /**
     * Gets upd_date_time
     *
     * @return string
     */
    public function getUpdDateTime()
    {
        return $this->container['upd_date_time'];
    }

    /**
     * Sets upd_date_time
     *
     * @param string $upd_date_time upd_date_time
     *
     * @return self
     */
    public function setUpdDateTime($upd_date_time)
    {

        if ((mb_strlen($upd_date_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $upd_date_time when calling GetCustomerPointListItem., must be bigger than or equal to 1.');
        }

        $this->container['upd_date_time'] = $upd_date_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


