<?php
/**
 * Staff
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * スマレジ
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Staff Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Staff implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'staff';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'staff_id' => 'string',
        'staff_code' => 'string',
        'staff_name' => 'string',
        'rank' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'staff_id' => null,
        'staff_code' => null,
        'staff_name' => null,
        'rank' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'staff_id' => 'staffId',
        'staff_code' => 'staffCode',
        'staff_name' => 'staffName',
        'rank' => 'rank'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'staff_id' => 'setStaffId',
        'staff_code' => 'setStaffCode',
        'staff_name' => 'setStaffName',
        'rank' => 'setRank'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'staff_id' => 'getStaffId',
        'staff_code' => 'getStaffCode',
        'staff_name' => 'getStaffName',
        'rank' => 'getRank'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['staff_id'] = $data['staff_id'] ?? null;
        $this->container['staff_code'] = $data['staff_code'] ?? null;
        $this->container['staff_name'] = $data['staff_name'] ?? null;
        $this->container['rank'] = $data['rank'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['staff_id']) && (mb_strlen($this->container['staff_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'staff_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['staff_code']) && (mb_strlen($this->container['staff_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'staff_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['staff_name']) && (mb_strlen($this->container['staff_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'staff_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['rank']) && (mb_strlen($this->container['rank']) < 1)) {
            $invalidProperties[] = "invalid value for 'rank', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets staff_id
     *
     * @return string|null
     */
    public function getStaffId()
    {
        return $this->container['staff_id'];
    }

    /**
     * Sets staff_id
     *
     * @param string|null $staff_id staff_id
     *
     * @return self
     */
    public function setStaffId($staff_id)
    {

        if (!is_null($staff_id) && (mb_strlen($staff_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $staff_id when calling Staff., must be bigger than or equal to 1.');
        }

        $this->container['staff_id'] = $staff_id;

        return $this;
    }

    /**
     * Gets staff_code
     *
     * @return string|null
     */
    public function getStaffCode()
    {
        return $this->container['staff_code'];
    }

    /**
     * Sets staff_code
     *
     * @param string|null $staff_code staff_code
     *
     * @return self
     */
    public function setStaffCode($staff_code)
    {

        if (!is_null($staff_code) && (mb_strlen($staff_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $staff_code when calling Staff., must be bigger than or equal to 1.');
        }

        $this->container['staff_code'] = $staff_code;

        return $this;
    }

    /**
     * Gets staff_name
     *
     * @return string|null
     */
    public function getStaffName()
    {
        return $this->container['staff_name'];
    }

    /**
     * Sets staff_name
     *
     * @param string|null $staff_name staff_name
     *
     * @return self
     */
    public function setStaffName($staff_name)
    {

        if (!is_null($staff_name) && (mb_strlen($staff_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $staff_name when calling Staff., must be bigger than or equal to 1.');
        }

        $this->container['staff_name'] = $staff_name;

        return $this;
    }

    /**
     * Gets rank
     *
     * @return string|null
     */
    public function getRank()
    {
        return $this->container['rank'];
    }

    /**
     * Sets rank
     *
     * @param string|null $rank rank
     *
     * @return self
     */
    public function setRank($rank)
    {

        if (!is_null($rank) && (mb_strlen($rank) < 1)) {
            throw new \InvalidArgumentException('invalid length for $rank when calling Staff., must be bigger than or equal to 1.');
        }

        $this->container['rank'] = $rank;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


