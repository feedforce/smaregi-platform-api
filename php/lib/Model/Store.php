<?php
/**
 * Store
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * スマレジ
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Store Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Store implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'store';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'store_id' => 'string',
        'store_code' => 'string',
        'store_name' => 'string',
        'store_abbr' => 'string',
        'print_receipt_store_name' => 'string',
        'display_sequence' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'store_id' => null,
        'store_code' => null,
        'store_name' => null,
        'store_abbr' => null,
        'print_receipt_store_name' => null,
        'display_sequence' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'store_id' => 'storeId',
        'store_code' => 'storeCode',
        'store_name' => 'storeName',
        'store_abbr' => 'storeAbbr',
        'print_receipt_store_name' => 'printReceiptStoreName',
        'display_sequence' => 'displaySequence'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'store_id' => 'setStoreId',
        'store_code' => 'setStoreCode',
        'store_name' => 'setStoreName',
        'store_abbr' => 'setStoreAbbr',
        'print_receipt_store_name' => 'setPrintReceiptStoreName',
        'display_sequence' => 'setDisplaySequence'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'store_id' => 'getStoreId',
        'store_code' => 'getStoreCode',
        'store_name' => 'getStoreName',
        'store_abbr' => 'getStoreAbbr',
        'print_receipt_store_name' => 'getPrintReceiptStoreName',
        'display_sequence' => 'getDisplaySequence'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['store_id'] = $data['store_id'] ?? null;
        $this->container['store_code'] = $data['store_code'] ?? null;
        $this->container['store_name'] = $data['store_name'] ?? null;
        $this->container['store_abbr'] = $data['store_abbr'] ?? null;
        $this->container['print_receipt_store_name'] = $data['print_receipt_store_name'] ?? null;
        $this->container['display_sequence'] = $data['display_sequence'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['store_id']) && (mb_strlen($this->container['store_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'store_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['store_code']) && (mb_strlen($this->container['store_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'store_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['store_name']) && (mb_strlen($this->container['store_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'store_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['store_abbr']) && (mb_strlen($this->container['store_abbr']) < 1)) {
            $invalidProperties[] = "invalid value for 'store_abbr', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['print_receipt_store_name']) && (mb_strlen($this->container['print_receipt_store_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'print_receipt_store_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['display_sequence']) && (mb_strlen($this->container['display_sequence']) < 1)) {
            $invalidProperties[] = "invalid value for 'display_sequence', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets store_id
     *
     * @return string|null
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param string|null $store_id store_id
     *
     * @return self
     */
    public function setStoreId($store_id)
    {

        if (!is_null($store_id) && (mb_strlen($store_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $store_id when calling Store., must be bigger than or equal to 1.');
        }

        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets store_code
     *
     * @return string|null
     */
    public function getStoreCode()
    {
        return $this->container['store_code'];
    }

    /**
     * Sets store_code
     *
     * @param string|null $store_code store_code
     *
     * @return self
     */
    public function setStoreCode($store_code)
    {

        if (!is_null($store_code) && (mb_strlen($store_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $store_code when calling Store., must be bigger than or equal to 1.');
        }

        $this->container['store_code'] = $store_code;

        return $this;
    }

    /**
     * Gets store_name
     *
     * @return string|null
     */
    public function getStoreName()
    {
        return $this->container['store_name'];
    }

    /**
     * Sets store_name
     *
     * @param string|null $store_name store_name
     *
     * @return self
     */
    public function setStoreName($store_name)
    {

        if (!is_null($store_name) && (mb_strlen($store_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $store_name when calling Store., must be bigger than or equal to 1.');
        }

        $this->container['store_name'] = $store_name;

        return $this;
    }

    /**
     * Gets store_abbr
     *
     * @return string|null
     */
    public function getStoreAbbr()
    {
        return $this->container['store_abbr'];
    }

    /**
     * Sets store_abbr
     *
     * @param string|null $store_abbr store_abbr
     *
     * @return self
     */
    public function setStoreAbbr($store_abbr)
    {

        if (!is_null($store_abbr) && (mb_strlen($store_abbr) < 1)) {
            throw new \InvalidArgumentException('invalid length for $store_abbr when calling Store., must be bigger than or equal to 1.');
        }

        $this->container['store_abbr'] = $store_abbr;

        return $this;
    }

    /**
     * Gets print_receipt_store_name
     *
     * @return string|null
     */
    public function getPrintReceiptStoreName()
    {
        return $this->container['print_receipt_store_name'];
    }

    /**
     * Sets print_receipt_store_name
     *
     * @param string|null $print_receipt_store_name print_receipt_store_name
     *
     * @return self
     */
    public function setPrintReceiptStoreName($print_receipt_store_name)
    {

        if (!is_null($print_receipt_store_name) && (mb_strlen($print_receipt_store_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $print_receipt_store_name when calling Store., must be bigger than or equal to 1.');
        }

        $this->container['print_receipt_store_name'] = $print_receipt_store_name;

        return $this;
    }

    /**
     * Gets display_sequence
     *
     * @return string|null
     */
    public function getDisplaySequence()
    {
        return $this->container['display_sequence'];
    }

    /**
     * Sets display_sequence
     *
     * @param string|null $display_sequence display_sequence
     *
     * @return self
     */
    public function setDisplaySequence($display_sequence)
    {

        if (!is_null($display_sequence) && (mb_strlen($display_sequence) < 1)) {
            throw new \InvalidArgumentException('invalid length for $display_sequence when calling Store., must be bigger than or equal to 1.');
        }

        $this->container['display_sequence'] = $display_sequence;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


