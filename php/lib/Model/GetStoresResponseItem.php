<?php
/**
 * GetStoresResponseItem
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * スマレジ
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * GetStoresResponseItem Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class GetStoresResponseItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'getStoresResponseItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'store_id' => 'string',
        'store_code' => 'string',
        'store_name' => 'string',
        'store_abbr' => 'string',
        'print_receipt_store_name' => 'string',
        'print_stock_receipt_store_name' => 'string',
        'division' => '\OpenAPI\Client\Model\StoreDivision',
        'post_code' => 'string',
        'address' => 'string',
        'phone_number' => 'string',
        'fax_number' => 'string',
        'mail_address' => 'string',
        'homepage' => 'string',
        'temp_tran_mail_address' => 'string',
        'price_change_flag' => 'string',
        'sell_division' => 'string',
        'sum_proc_division' => 'string',
        'sum_date_change_time' => 'string',
        'sum_ref_column' => 'string',
        'point_not_applicable' => 'string',
        'tax_free_division' => 'string',
        'max_bundle_product_count' => 'string',
        'max_discount_rate' => 'string',
        'carriage_display_flag' => 'string',
        'terminal_adjustment_cash_flag' => 'string',
        'terminal_check_cash_flag' => 'string',
        'waiter_adjustment_division' => 'string',
        'saving_auto_division' => 'string',
        'saving_auto_price' => 'string',
        'cancel_setting_division' => 'string',
        'rounding_division' => 'string',
        'discount_rounding_division' => 'string',
        'card_company_select_division' => 'string',
        'gift_receipt_valid_days' => 'string',
        'tax_label_normal' => 'string',
        'tax_label_reduce' => 'string',
        'pause_flag' => 'string',
        'display_sequence' => 'string',
        'face_payment_use_division' => 'string',
        'ins_date_time' => 'string',
        'upd_date_time' => 'string',
        'point_condition' => '\OpenAPI\Client\Model\PointCondition',
        'receipt_print_info' => '\OpenAPI\Client\Model\GetStoresResponseItemReceiptPrintInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'store_id' => null,
        'store_code' => null,
        'store_name' => null,
        'store_abbr' => null,
        'print_receipt_store_name' => null,
        'print_stock_receipt_store_name' => null,
        'division' => null,
        'post_code' => null,
        'address' => null,
        'phone_number' => null,
        'fax_number' => null,
        'mail_address' => null,
        'homepage' => null,
        'temp_tran_mail_address' => null,
        'price_change_flag' => null,
        'sell_division' => null,
        'sum_proc_division' => null,
        'sum_date_change_time' => null,
        'sum_ref_column' => null,
        'point_not_applicable' => null,
        'tax_free_division' => null,
        'max_bundle_product_count' => null,
        'max_discount_rate' => null,
        'carriage_display_flag' => null,
        'terminal_adjustment_cash_flag' => null,
        'terminal_check_cash_flag' => null,
        'waiter_adjustment_division' => null,
        'saving_auto_division' => null,
        'saving_auto_price' => null,
        'cancel_setting_division' => null,
        'rounding_division' => null,
        'discount_rounding_division' => null,
        'card_company_select_division' => null,
        'gift_receipt_valid_days' => null,
        'tax_label_normal' => null,
        'tax_label_reduce' => null,
        'pause_flag' => null,
        'display_sequence' => null,
        'face_payment_use_division' => null,
        'ins_date_time' => null,
        'upd_date_time' => null,
        'point_condition' => null,
        'receipt_print_info' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'store_id' => 'storeId',
        'store_code' => 'storeCode',
        'store_name' => 'storeName',
        'store_abbr' => 'storeAbbr',
        'print_receipt_store_name' => 'printReceiptStoreName',
        'print_stock_receipt_store_name' => 'printStockReceiptStoreName',
        'division' => 'division',
        'post_code' => 'postCode',
        'address' => 'address',
        'phone_number' => 'phoneNumber',
        'fax_number' => 'faxNumber',
        'mail_address' => 'mailAddress',
        'homepage' => 'homepage',
        'temp_tran_mail_address' => 'tempTranMailAddress',
        'price_change_flag' => 'priceChangeFlag',
        'sell_division' => 'sellDivision',
        'sum_proc_division' => 'sumProcDivision',
        'sum_date_change_time' => 'sumDateChangeTime',
        'sum_ref_column' => 'sumRefColumn',
        'point_not_applicable' => 'pointNotApplicable',
        'tax_free_division' => 'taxFreeDivision',
        'max_bundle_product_count' => 'maxBundleProductCount',
        'max_discount_rate' => 'maxDiscountRate',
        'carriage_display_flag' => 'carriageDisplayFlag',
        'terminal_adjustment_cash_flag' => 'terminalAdjustmentCashFlag',
        'terminal_check_cash_flag' => 'terminalCheckCashFlag',
        'waiter_adjustment_division' => 'waiterAdjustmentDivision',
        'saving_auto_division' => 'savingAutoDivision',
        'saving_auto_price' => 'savingAutoPrice',
        'cancel_setting_division' => 'cancelSettingDivision',
        'rounding_division' => 'roundingDivision',
        'discount_rounding_division' => 'discountRoundingDivision',
        'card_company_select_division' => 'cardCompanySelectDivision',
        'gift_receipt_valid_days' => 'giftReceiptValidDays',
        'tax_label_normal' => 'taxLabelNormal',
        'tax_label_reduce' => 'taxLabelReduce',
        'pause_flag' => 'pauseFlag',
        'display_sequence' => 'displaySequence',
        'face_payment_use_division' => 'facePaymentUseDivision',
        'ins_date_time' => 'insDateTime',
        'upd_date_time' => 'updDateTime',
        'point_condition' => 'pointCondition',
        'receipt_print_info' => 'receiptPrintInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'store_id' => 'setStoreId',
        'store_code' => 'setStoreCode',
        'store_name' => 'setStoreName',
        'store_abbr' => 'setStoreAbbr',
        'print_receipt_store_name' => 'setPrintReceiptStoreName',
        'print_stock_receipt_store_name' => 'setPrintStockReceiptStoreName',
        'division' => 'setDivision',
        'post_code' => 'setPostCode',
        'address' => 'setAddress',
        'phone_number' => 'setPhoneNumber',
        'fax_number' => 'setFaxNumber',
        'mail_address' => 'setMailAddress',
        'homepage' => 'setHomepage',
        'temp_tran_mail_address' => 'setTempTranMailAddress',
        'price_change_flag' => 'setPriceChangeFlag',
        'sell_division' => 'setSellDivision',
        'sum_proc_division' => 'setSumProcDivision',
        'sum_date_change_time' => 'setSumDateChangeTime',
        'sum_ref_column' => 'setSumRefColumn',
        'point_not_applicable' => 'setPointNotApplicable',
        'tax_free_division' => 'setTaxFreeDivision',
        'max_bundle_product_count' => 'setMaxBundleProductCount',
        'max_discount_rate' => 'setMaxDiscountRate',
        'carriage_display_flag' => 'setCarriageDisplayFlag',
        'terminal_adjustment_cash_flag' => 'setTerminalAdjustmentCashFlag',
        'terminal_check_cash_flag' => 'setTerminalCheckCashFlag',
        'waiter_adjustment_division' => 'setWaiterAdjustmentDivision',
        'saving_auto_division' => 'setSavingAutoDivision',
        'saving_auto_price' => 'setSavingAutoPrice',
        'cancel_setting_division' => 'setCancelSettingDivision',
        'rounding_division' => 'setRoundingDivision',
        'discount_rounding_division' => 'setDiscountRoundingDivision',
        'card_company_select_division' => 'setCardCompanySelectDivision',
        'gift_receipt_valid_days' => 'setGiftReceiptValidDays',
        'tax_label_normal' => 'setTaxLabelNormal',
        'tax_label_reduce' => 'setTaxLabelReduce',
        'pause_flag' => 'setPauseFlag',
        'display_sequence' => 'setDisplaySequence',
        'face_payment_use_division' => 'setFacePaymentUseDivision',
        'ins_date_time' => 'setInsDateTime',
        'upd_date_time' => 'setUpdDateTime',
        'point_condition' => 'setPointCondition',
        'receipt_print_info' => 'setReceiptPrintInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'store_id' => 'getStoreId',
        'store_code' => 'getStoreCode',
        'store_name' => 'getStoreName',
        'store_abbr' => 'getStoreAbbr',
        'print_receipt_store_name' => 'getPrintReceiptStoreName',
        'print_stock_receipt_store_name' => 'getPrintStockReceiptStoreName',
        'division' => 'getDivision',
        'post_code' => 'getPostCode',
        'address' => 'getAddress',
        'phone_number' => 'getPhoneNumber',
        'fax_number' => 'getFaxNumber',
        'mail_address' => 'getMailAddress',
        'homepage' => 'getHomepage',
        'temp_tran_mail_address' => 'getTempTranMailAddress',
        'price_change_flag' => 'getPriceChangeFlag',
        'sell_division' => 'getSellDivision',
        'sum_proc_division' => 'getSumProcDivision',
        'sum_date_change_time' => 'getSumDateChangeTime',
        'sum_ref_column' => 'getSumRefColumn',
        'point_not_applicable' => 'getPointNotApplicable',
        'tax_free_division' => 'getTaxFreeDivision',
        'max_bundle_product_count' => 'getMaxBundleProductCount',
        'max_discount_rate' => 'getMaxDiscountRate',
        'carriage_display_flag' => 'getCarriageDisplayFlag',
        'terminal_adjustment_cash_flag' => 'getTerminalAdjustmentCashFlag',
        'terminal_check_cash_flag' => 'getTerminalCheckCashFlag',
        'waiter_adjustment_division' => 'getWaiterAdjustmentDivision',
        'saving_auto_division' => 'getSavingAutoDivision',
        'saving_auto_price' => 'getSavingAutoPrice',
        'cancel_setting_division' => 'getCancelSettingDivision',
        'rounding_division' => 'getRoundingDivision',
        'discount_rounding_division' => 'getDiscountRoundingDivision',
        'card_company_select_division' => 'getCardCompanySelectDivision',
        'gift_receipt_valid_days' => 'getGiftReceiptValidDays',
        'tax_label_normal' => 'getTaxLabelNormal',
        'tax_label_reduce' => 'getTaxLabelReduce',
        'pause_flag' => 'getPauseFlag',
        'display_sequence' => 'getDisplaySequence',
        'face_payment_use_division' => 'getFacePaymentUseDivision',
        'ins_date_time' => 'getInsDateTime',
        'upd_date_time' => 'getUpdDateTime',
        'point_condition' => 'getPointCondition',
        'receipt_print_info' => 'getReceiptPrintInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['store_id'] = $data['store_id'] ?? null;
        $this->container['store_code'] = $data['store_code'] ?? null;
        $this->container['store_name'] = $data['store_name'] ?? null;
        $this->container['store_abbr'] = $data['store_abbr'] ?? null;
        $this->container['print_receipt_store_name'] = $data['print_receipt_store_name'] ?? null;
        $this->container['print_stock_receipt_store_name'] = $data['print_stock_receipt_store_name'] ?? null;
        $this->container['division'] = $data['division'] ?? null;
        $this->container['post_code'] = $data['post_code'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['phone_number'] = $data['phone_number'] ?? null;
        $this->container['fax_number'] = $data['fax_number'] ?? null;
        $this->container['mail_address'] = $data['mail_address'] ?? null;
        $this->container['homepage'] = $data['homepage'] ?? null;
        $this->container['temp_tran_mail_address'] = $data['temp_tran_mail_address'] ?? null;
        $this->container['price_change_flag'] = $data['price_change_flag'] ?? null;
        $this->container['sell_division'] = $data['sell_division'] ?? null;
        $this->container['sum_proc_division'] = $data['sum_proc_division'] ?? null;
        $this->container['sum_date_change_time'] = $data['sum_date_change_time'] ?? null;
        $this->container['sum_ref_column'] = $data['sum_ref_column'] ?? null;
        $this->container['point_not_applicable'] = $data['point_not_applicable'] ?? null;
        $this->container['tax_free_division'] = $data['tax_free_division'] ?? null;
        $this->container['max_bundle_product_count'] = $data['max_bundle_product_count'] ?? null;
        $this->container['max_discount_rate'] = $data['max_discount_rate'] ?? null;
        $this->container['carriage_display_flag'] = $data['carriage_display_flag'] ?? null;
        $this->container['terminal_adjustment_cash_flag'] = $data['terminal_adjustment_cash_flag'] ?? null;
        $this->container['terminal_check_cash_flag'] = $data['terminal_check_cash_flag'] ?? null;
        $this->container['waiter_adjustment_division'] = $data['waiter_adjustment_division'] ?? null;
        $this->container['saving_auto_division'] = $data['saving_auto_division'] ?? null;
        $this->container['saving_auto_price'] = $data['saving_auto_price'] ?? null;
        $this->container['cancel_setting_division'] = $data['cancel_setting_division'] ?? null;
        $this->container['rounding_division'] = $data['rounding_division'] ?? null;
        $this->container['discount_rounding_division'] = $data['discount_rounding_division'] ?? null;
        $this->container['card_company_select_division'] = $data['card_company_select_division'] ?? null;
        $this->container['gift_receipt_valid_days'] = $data['gift_receipt_valid_days'] ?? null;
        $this->container['tax_label_normal'] = $data['tax_label_normal'] ?? null;
        $this->container['tax_label_reduce'] = $data['tax_label_reduce'] ?? null;
        $this->container['pause_flag'] = $data['pause_flag'] ?? null;
        $this->container['display_sequence'] = $data['display_sequence'] ?? null;
        $this->container['face_payment_use_division'] = $data['face_payment_use_division'] ?? null;
        $this->container['ins_date_time'] = $data['ins_date_time'] ?? null;
        $this->container['upd_date_time'] = $data['upd_date_time'] ?? null;
        $this->container['point_condition'] = $data['point_condition'] ?? null;
        $this->container['receipt_print_info'] = $data['receipt_print_info'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['store_id'] === null) {
            $invalidProperties[] = "'store_id' can't be null";
        }
        if ((mb_strlen($this->container['store_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'store_id', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['store_code'] === null) {
            $invalidProperties[] = "'store_code' can't be null";
        }
        if ((mb_strlen($this->container['store_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'store_code', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['store_name'] === null) {
            $invalidProperties[] = "'store_name' can't be null";
        }
        if ((mb_strlen($this->container['store_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'store_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['store_abbr']) && (mb_strlen($this->container['store_abbr']) < 1)) {
            $invalidProperties[] = "invalid value for 'store_abbr', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['print_receipt_store_name']) && (mb_strlen($this->container['print_receipt_store_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'print_receipt_store_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['print_stock_receipt_store_name']) && (mb_strlen($this->container['print_stock_receipt_store_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'print_stock_receipt_store_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['division'] === null) {
            $invalidProperties[] = "'division' can't be null";
        }
        if (!is_null($this->container['post_code']) && (mb_strlen($this->container['post_code']) < 1)) {
            $invalidProperties[] = "invalid value for 'post_code', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['address']) && (mb_strlen($this->container['address']) < 1)) {
            $invalidProperties[] = "invalid value for 'address', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['phone_number']) && (mb_strlen($this->container['phone_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'phone_number', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['fax_number']) && (mb_strlen($this->container['fax_number']) < 1)) {
            $invalidProperties[] = "invalid value for 'fax_number', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['mail_address']) && (mb_strlen($this->container['mail_address']) < 1)) {
            $invalidProperties[] = "invalid value for 'mail_address', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['homepage']) && (mb_strlen($this->container['homepage']) < 1)) {
            $invalidProperties[] = "invalid value for 'homepage', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['temp_tran_mail_address']) && (mb_strlen($this->container['temp_tran_mail_address']) < 1)) {
            $invalidProperties[] = "invalid value for 'temp_tran_mail_address', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['price_change_flag']) && (mb_strlen($this->container['price_change_flag']) < 1)) {
            $invalidProperties[] = "invalid value for 'price_change_flag', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sell_division']) && (mb_strlen($this->container['sell_division']) < 1)) {
            $invalidProperties[] = "invalid value for 'sell_division', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sum_proc_division']) && (mb_strlen($this->container['sum_proc_division']) < 1)) {
            $invalidProperties[] = "invalid value for 'sum_proc_division', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sum_date_change_time']) && (mb_strlen($this->container['sum_date_change_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'sum_date_change_time', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['sum_ref_column']) && (mb_strlen($this->container['sum_ref_column']) < 1)) {
            $invalidProperties[] = "invalid value for 'sum_ref_column', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['point_not_applicable']) && (mb_strlen($this->container['point_not_applicable']) < 1)) {
            $invalidProperties[] = "invalid value for 'point_not_applicable', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['tax_free_division']) && (mb_strlen($this->container['tax_free_division']) < 1)) {
            $invalidProperties[] = "invalid value for 'tax_free_division', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['max_bundle_product_count']) && (mb_strlen($this->container['max_bundle_product_count']) < 1)) {
            $invalidProperties[] = "invalid value for 'max_bundle_product_count', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['max_discount_rate']) && (mb_strlen($this->container['max_discount_rate']) < 1)) {
            $invalidProperties[] = "invalid value for 'max_discount_rate', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['carriage_display_flag']) && (mb_strlen($this->container['carriage_display_flag']) < 1)) {
            $invalidProperties[] = "invalid value for 'carriage_display_flag', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['terminal_adjustment_cash_flag']) && (mb_strlen($this->container['terminal_adjustment_cash_flag']) < 1)) {
            $invalidProperties[] = "invalid value for 'terminal_adjustment_cash_flag', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['terminal_check_cash_flag']) && (mb_strlen($this->container['terminal_check_cash_flag']) < 1)) {
            $invalidProperties[] = "invalid value for 'terminal_check_cash_flag', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['waiter_adjustment_division']) && (mb_strlen($this->container['waiter_adjustment_division']) < 1)) {
            $invalidProperties[] = "invalid value for 'waiter_adjustment_division', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['saving_auto_division']) && (mb_strlen($this->container['saving_auto_division']) < 1)) {
            $invalidProperties[] = "invalid value for 'saving_auto_division', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['saving_auto_price']) && (mb_strlen($this->container['saving_auto_price']) < 1)) {
            $invalidProperties[] = "invalid value for 'saving_auto_price', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['cancel_setting_division']) && (mb_strlen($this->container['cancel_setting_division']) < 1)) {
            $invalidProperties[] = "invalid value for 'cancel_setting_division', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['rounding_division']) && (mb_strlen($this->container['rounding_division']) < 1)) {
            $invalidProperties[] = "invalid value for 'rounding_division', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['discount_rounding_division']) && (mb_strlen($this->container['discount_rounding_division']) < 1)) {
            $invalidProperties[] = "invalid value for 'discount_rounding_division', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['card_company_select_division']) && (mb_strlen($this->container['card_company_select_division']) < 1)) {
            $invalidProperties[] = "invalid value for 'card_company_select_division', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['gift_receipt_valid_days']) && (mb_strlen($this->container['gift_receipt_valid_days']) < 1)) {
            $invalidProperties[] = "invalid value for 'gift_receipt_valid_days', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['tax_label_normal']) && (mb_strlen($this->container['tax_label_normal']) < 1)) {
            $invalidProperties[] = "invalid value for 'tax_label_normal', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['tax_label_reduce']) && (mb_strlen($this->container['tax_label_reduce']) < 1)) {
            $invalidProperties[] = "invalid value for 'tax_label_reduce', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['pause_flag']) && (mb_strlen($this->container['pause_flag']) < 1)) {
            $invalidProperties[] = "invalid value for 'pause_flag', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['display_sequence']) && (mb_strlen($this->container['display_sequence']) < 1)) {
            $invalidProperties[] = "invalid value for 'display_sequence', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['face_payment_use_division']) && (mb_strlen($this->container['face_payment_use_division']) < 1)) {
            $invalidProperties[] = "invalid value for 'face_payment_use_division', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['ins_date_time']) && (mb_strlen($this->container['ins_date_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'ins_date_time', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['upd_date_time']) && (mb_strlen($this->container['upd_date_time']) < 1)) {
            $invalidProperties[] = "invalid value for 'upd_date_time', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets store_id
     *
     * @return string
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param string $store_id store_id
     *
     * @return self
     */
    public function setStoreId($store_id)
    {

        if ((mb_strlen($store_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $store_id when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets store_code
     *
     * @return string
     */
    public function getStoreCode()
    {
        return $this->container['store_code'];
    }

    /**
     * Sets store_code
     *
     * @param string $store_code store_code
     *
     * @return self
     */
    public function setStoreCode($store_code)
    {

        if ((mb_strlen($store_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $store_code when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['store_code'] = $store_code;

        return $this;
    }

    /**
     * Gets store_name
     *
     * @return string
     */
    public function getStoreName()
    {
        return $this->container['store_name'];
    }

    /**
     * Sets store_name
     *
     * @param string $store_name store_name
     *
     * @return self
     */
    public function setStoreName($store_name)
    {

        if ((mb_strlen($store_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $store_name when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['store_name'] = $store_name;

        return $this;
    }

    /**
     * Gets store_abbr
     *
     * @return string|null
     */
    public function getStoreAbbr()
    {
        return $this->container['store_abbr'];
    }

    /**
     * Sets store_abbr
     *
     * @param string|null $store_abbr store_abbr
     *
     * @return self
     */
    public function setStoreAbbr($store_abbr)
    {

        if (!is_null($store_abbr) && (mb_strlen($store_abbr) < 1)) {
            throw new \InvalidArgumentException('invalid length for $store_abbr when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['store_abbr'] = $store_abbr;

        return $this;
    }

    /**
     * Gets print_receipt_store_name
     *
     * @return string|null
     */
    public function getPrintReceiptStoreName()
    {
        return $this->container['print_receipt_store_name'];
    }

    /**
     * Sets print_receipt_store_name
     *
     * @param string|null $print_receipt_store_name print_receipt_store_name
     *
     * @return self
     */
    public function setPrintReceiptStoreName($print_receipt_store_name)
    {

        if (!is_null($print_receipt_store_name) && (mb_strlen($print_receipt_store_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $print_receipt_store_name when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['print_receipt_store_name'] = $print_receipt_store_name;

        return $this;
    }

    /**
     * Gets print_stock_receipt_store_name
     *
     * @return string|null
     */
    public function getPrintStockReceiptStoreName()
    {
        return $this->container['print_stock_receipt_store_name'];
    }

    /**
     * Sets print_stock_receipt_store_name
     *
     * @param string|null $print_stock_receipt_store_name print_stock_receipt_store_name
     *
     * @return self
     */
    public function setPrintStockReceiptStoreName($print_stock_receipt_store_name)
    {

        if (!is_null($print_stock_receipt_store_name) && (mb_strlen($print_stock_receipt_store_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $print_stock_receipt_store_name when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['print_stock_receipt_store_name'] = $print_stock_receipt_store_name;

        return $this;
    }

    /**
     * Gets division
     *
     * @return \OpenAPI\Client\Model\StoreDivision
     */
    public function getDivision()
    {
        return $this->container['division'];
    }

    /**
     * Sets division
     *
     * @param \OpenAPI\Client\Model\StoreDivision $division division
     *
     * @return self
     */
    public function setDivision($division)
    {
        $this->container['division'] = $division;

        return $this;
    }

    /**
     * Gets post_code
     *
     * @return string|null
     */
    public function getPostCode()
    {
        return $this->container['post_code'];
    }

    /**
     * Sets post_code
     *
     * @param string|null $post_code post_code
     *
     * @return self
     */
    public function setPostCode($post_code)
    {

        if (!is_null($post_code) && (mb_strlen($post_code) < 1)) {
            throw new \InvalidArgumentException('invalid length for $post_code when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['post_code'] = $post_code;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {

        if (!is_null($address) && (mb_strlen($address) < 1)) {
            throw new \InvalidArgumentException('invalid length for $address when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number phone_number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {

        if (!is_null($phone_number) && (mb_strlen($phone_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $phone_number when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets fax_number
     *
     * @return string|null
     */
    public function getFaxNumber()
    {
        return $this->container['fax_number'];
    }

    /**
     * Sets fax_number
     *
     * @param string|null $fax_number fax_number
     *
     * @return self
     */
    public function setFaxNumber($fax_number)
    {

        if (!is_null($fax_number) && (mb_strlen($fax_number) < 1)) {
            throw new \InvalidArgumentException('invalid length for $fax_number when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['fax_number'] = $fax_number;

        return $this;
    }

    /**
     * Gets mail_address
     *
     * @return string|null
     */
    public function getMailAddress()
    {
        return $this->container['mail_address'];
    }

    /**
     * Sets mail_address
     *
     * @param string|null $mail_address mail_address
     *
     * @return self
     */
    public function setMailAddress($mail_address)
    {

        if (!is_null($mail_address) && (mb_strlen($mail_address) < 1)) {
            throw new \InvalidArgumentException('invalid length for $mail_address when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['mail_address'] = $mail_address;

        return $this;
    }

    /**
     * Gets homepage
     *
     * @return string|null
     */
    public function getHomepage()
    {
        return $this->container['homepage'];
    }

    /**
     * Sets homepage
     *
     * @param string|null $homepage homepage
     *
     * @return self
     */
    public function setHomepage($homepage)
    {

        if (!is_null($homepage) && (mb_strlen($homepage) < 1)) {
            throw new \InvalidArgumentException('invalid length for $homepage when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['homepage'] = $homepage;

        return $this;
    }

    /**
     * Gets temp_tran_mail_address
     *
     * @return string|null
     */
    public function getTempTranMailAddress()
    {
        return $this->container['temp_tran_mail_address'];
    }

    /**
     * Sets temp_tran_mail_address
     *
     * @param string|null $temp_tran_mail_address temp_tran_mail_address
     *
     * @return self
     */
    public function setTempTranMailAddress($temp_tran_mail_address)
    {

        if (!is_null($temp_tran_mail_address) && (mb_strlen($temp_tran_mail_address) < 1)) {
            throw new \InvalidArgumentException('invalid length for $temp_tran_mail_address when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['temp_tran_mail_address'] = $temp_tran_mail_address;

        return $this;
    }

    /**
     * Gets price_change_flag
     *
     * @return string|null
     */
    public function getPriceChangeFlag()
    {
        return $this->container['price_change_flag'];
    }

    /**
     * Sets price_change_flag
     *
     * @param string|null $price_change_flag price_change_flag
     *
     * @return self
     */
    public function setPriceChangeFlag($price_change_flag)
    {

        if (!is_null($price_change_flag) && (mb_strlen($price_change_flag) < 1)) {
            throw new \InvalidArgumentException('invalid length for $price_change_flag when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['price_change_flag'] = $price_change_flag;

        return $this;
    }

    /**
     * Gets sell_division
     *
     * @return string|null
     */
    public function getSellDivision()
    {
        return $this->container['sell_division'];
    }

    /**
     * Sets sell_division
     *
     * @param string|null $sell_division sell_division
     *
     * @return self
     */
    public function setSellDivision($sell_division)
    {

        if (!is_null($sell_division) && (mb_strlen($sell_division) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sell_division when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['sell_division'] = $sell_division;

        return $this;
    }

    /**
     * Gets sum_proc_division
     *
     * @return string|null
     */
    public function getSumProcDivision()
    {
        return $this->container['sum_proc_division'];
    }

    /**
     * Sets sum_proc_division
     *
     * @param string|null $sum_proc_division sum_proc_division
     *
     * @return self
     */
    public function setSumProcDivision($sum_proc_division)
    {

        if (!is_null($sum_proc_division) && (mb_strlen($sum_proc_division) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sum_proc_division when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['sum_proc_division'] = $sum_proc_division;

        return $this;
    }

    /**
     * Gets sum_date_change_time
     *
     * @return string|null
     */
    public function getSumDateChangeTime()
    {
        return $this->container['sum_date_change_time'];
    }

    /**
     * Sets sum_date_change_time
     *
     * @param string|null $sum_date_change_time sum_date_change_time
     *
     * @return self
     */
    public function setSumDateChangeTime($sum_date_change_time)
    {

        if (!is_null($sum_date_change_time) && (mb_strlen($sum_date_change_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sum_date_change_time when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['sum_date_change_time'] = $sum_date_change_time;

        return $this;
    }

    /**
     * Gets sum_ref_column
     *
     * @return string|null
     */
    public function getSumRefColumn()
    {
        return $this->container['sum_ref_column'];
    }

    /**
     * Sets sum_ref_column
     *
     * @param string|null $sum_ref_column sum_ref_column
     *
     * @return self
     */
    public function setSumRefColumn($sum_ref_column)
    {

        if (!is_null($sum_ref_column) && (mb_strlen($sum_ref_column) < 1)) {
            throw new \InvalidArgumentException('invalid length for $sum_ref_column when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['sum_ref_column'] = $sum_ref_column;

        return $this;
    }

    /**
     * Gets point_not_applicable
     *
     * @return string|null
     */
    public function getPointNotApplicable()
    {
        return $this->container['point_not_applicable'];
    }

    /**
     * Sets point_not_applicable
     *
     * @param string|null $point_not_applicable point_not_applicable
     *
     * @return self
     */
    public function setPointNotApplicable($point_not_applicable)
    {

        if (!is_null($point_not_applicable) && (mb_strlen($point_not_applicable) < 1)) {
            throw new \InvalidArgumentException('invalid length for $point_not_applicable when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['point_not_applicable'] = $point_not_applicable;

        return $this;
    }

    /**
     * Gets tax_free_division
     *
     * @return string|null
     */
    public function getTaxFreeDivision()
    {
        return $this->container['tax_free_division'];
    }

    /**
     * Sets tax_free_division
     *
     * @param string|null $tax_free_division tax_free_division
     *
     * @return self
     */
    public function setTaxFreeDivision($tax_free_division)
    {

        if (!is_null($tax_free_division) && (mb_strlen($tax_free_division) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tax_free_division when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['tax_free_division'] = $tax_free_division;

        return $this;
    }

    /**
     * Gets max_bundle_product_count
     *
     * @return string|null
     */
    public function getMaxBundleProductCount()
    {
        return $this->container['max_bundle_product_count'];
    }

    /**
     * Sets max_bundle_product_count
     *
     * @param string|null $max_bundle_product_count max_bundle_product_count
     *
     * @return self
     */
    public function setMaxBundleProductCount($max_bundle_product_count)
    {

        if (!is_null($max_bundle_product_count) && (mb_strlen($max_bundle_product_count) < 1)) {
            throw new \InvalidArgumentException('invalid length for $max_bundle_product_count when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['max_bundle_product_count'] = $max_bundle_product_count;

        return $this;
    }

    /**
     * Gets max_discount_rate
     *
     * @return string|null
     */
    public function getMaxDiscountRate()
    {
        return $this->container['max_discount_rate'];
    }

    /**
     * Sets max_discount_rate
     *
     * @param string|null $max_discount_rate max_discount_rate
     *
     * @return self
     */
    public function setMaxDiscountRate($max_discount_rate)
    {

        if (!is_null($max_discount_rate) && (mb_strlen($max_discount_rate) < 1)) {
            throw new \InvalidArgumentException('invalid length for $max_discount_rate when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['max_discount_rate'] = $max_discount_rate;

        return $this;
    }

    /**
     * Gets carriage_display_flag
     *
     * @return string|null
     */
    public function getCarriageDisplayFlag()
    {
        return $this->container['carriage_display_flag'];
    }

    /**
     * Sets carriage_display_flag
     *
     * @param string|null $carriage_display_flag carriage_display_flag
     *
     * @return self
     */
    public function setCarriageDisplayFlag($carriage_display_flag)
    {

        if (!is_null($carriage_display_flag) && (mb_strlen($carriage_display_flag) < 1)) {
            throw new \InvalidArgumentException('invalid length for $carriage_display_flag when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['carriage_display_flag'] = $carriage_display_flag;

        return $this;
    }

    /**
     * Gets terminal_adjustment_cash_flag
     *
     * @return string|null
     */
    public function getTerminalAdjustmentCashFlag()
    {
        return $this->container['terminal_adjustment_cash_flag'];
    }

    /**
     * Sets terminal_adjustment_cash_flag
     *
     * @param string|null $terminal_adjustment_cash_flag terminal_adjustment_cash_flag
     *
     * @return self
     */
    public function setTerminalAdjustmentCashFlag($terminal_adjustment_cash_flag)
    {

        if (!is_null($terminal_adjustment_cash_flag) && (mb_strlen($terminal_adjustment_cash_flag) < 1)) {
            throw new \InvalidArgumentException('invalid length for $terminal_adjustment_cash_flag when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['terminal_adjustment_cash_flag'] = $terminal_adjustment_cash_flag;

        return $this;
    }

    /**
     * Gets terminal_check_cash_flag
     *
     * @return string|null
     */
    public function getTerminalCheckCashFlag()
    {
        return $this->container['terminal_check_cash_flag'];
    }

    /**
     * Sets terminal_check_cash_flag
     *
     * @param string|null $terminal_check_cash_flag terminal_check_cash_flag
     *
     * @return self
     */
    public function setTerminalCheckCashFlag($terminal_check_cash_flag)
    {

        if (!is_null($terminal_check_cash_flag) && (mb_strlen($terminal_check_cash_flag) < 1)) {
            throw new \InvalidArgumentException('invalid length for $terminal_check_cash_flag when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['terminal_check_cash_flag'] = $terminal_check_cash_flag;

        return $this;
    }

    /**
     * Gets waiter_adjustment_division
     *
     * @return string|null
     */
    public function getWaiterAdjustmentDivision()
    {
        return $this->container['waiter_adjustment_division'];
    }

    /**
     * Sets waiter_adjustment_division
     *
     * @param string|null $waiter_adjustment_division waiter_adjustment_division
     *
     * @return self
     */
    public function setWaiterAdjustmentDivision($waiter_adjustment_division)
    {

        if (!is_null($waiter_adjustment_division) && (mb_strlen($waiter_adjustment_division) < 1)) {
            throw new \InvalidArgumentException('invalid length for $waiter_adjustment_division when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['waiter_adjustment_division'] = $waiter_adjustment_division;

        return $this;
    }

    /**
     * Gets saving_auto_division
     *
     * @return string|null
     */
    public function getSavingAutoDivision()
    {
        return $this->container['saving_auto_division'];
    }

    /**
     * Sets saving_auto_division
     *
     * @param string|null $saving_auto_division saving_auto_division
     *
     * @return self
     */
    public function setSavingAutoDivision($saving_auto_division)
    {

        if (!is_null($saving_auto_division) && (mb_strlen($saving_auto_division) < 1)) {
            throw new \InvalidArgumentException('invalid length for $saving_auto_division when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['saving_auto_division'] = $saving_auto_division;

        return $this;
    }

    /**
     * Gets saving_auto_price
     *
     * @return string|null
     */
    public function getSavingAutoPrice()
    {
        return $this->container['saving_auto_price'];
    }

    /**
     * Sets saving_auto_price
     *
     * @param string|null $saving_auto_price saving_auto_price
     *
     * @return self
     */
    public function setSavingAutoPrice($saving_auto_price)
    {

        if (!is_null($saving_auto_price) && (mb_strlen($saving_auto_price) < 1)) {
            throw new \InvalidArgumentException('invalid length for $saving_auto_price when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['saving_auto_price'] = $saving_auto_price;

        return $this;
    }

    /**
     * Gets cancel_setting_division
     *
     * @return string|null
     */
    public function getCancelSettingDivision()
    {
        return $this->container['cancel_setting_division'];
    }

    /**
     * Sets cancel_setting_division
     *
     * @param string|null $cancel_setting_division cancel_setting_division
     *
     * @return self
     */
    public function setCancelSettingDivision($cancel_setting_division)
    {

        if (!is_null($cancel_setting_division) && (mb_strlen($cancel_setting_division) < 1)) {
            throw new \InvalidArgumentException('invalid length for $cancel_setting_division when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['cancel_setting_division'] = $cancel_setting_division;

        return $this;
    }

    /**
     * Gets rounding_division
     *
     * @return string|null
     */
    public function getRoundingDivision()
    {
        return $this->container['rounding_division'];
    }

    /**
     * Sets rounding_division
     *
     * @param string|null $rounding_division rounding_division
     *
     * @return self
     */
    public function setRoundingDivision($rounding_division)
    {

        if (!is_null($rounding_division) && (mb_strlen($rounding_division) < 1)) {
            throw new \InvalidArgumentException('invalid length for $rounding_division when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['rounding_division'] = $rounding_division;

        return $this;
    }

    /**
     * Gets discount_rounding_division
     *
     * @return string|null
     */
    public function getDiscountRoundingDivision()
    {
        return $this->container['discount_rounding_division'];
    }

    /**
     * Sets discount_rounding_division
     *
     * @param string|null $discount_rounding_division discount_rounding_division
     *
     * @return self
     */
    public function setDiscountRoundingDivision($discount_rounding_division)
    {

        if (!is_null($discount_rounding_division) && (mb_strlen($discount_rounding_division) < 1)) {
            throw new \InvalidArgumentException('invalid length for $discount_rounding_division when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['discount_rounding_division'] = $discount_rounding_division;

        return $this;
    }

    /**
     * Gets card_company_select_division
     *
     * @return string|null
     */
    public function getCardCompanySelectDivision()
    {
        return $this->container['card_company_select_division'];
    }

    /**
     * Sets card_company_select_division
     *
     * @param string|null $card_company_select_division card_company_select_division
     *
     * @return self
     */
    public function setCardCompanySelectDivision($card_company_select_division)
    {

        if (!is_null($card_company_select_division) && (mb_strlen($card_company_select_division) < 1)) {
            throw new \InvalidArgumentException('invalid length for $card_company_select_division when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['card_company_select_division'] = $card_company_select_division;

        return $this;
    }

    /**
     * Gets gift_receipt_valid_days
     *
     * @return string|null
     */
    public function getGiftReceiptValidDays()
    {
        return $this->container['gift_receipt_valid_days'];
    }

    /**
     * Sets gift_receipt_valid_days
     *
     * @param string|null $gift_receipt_valid_days gift_receipt_valid_days
     *
     * @return self
     */
    public function setGiftReceiptValidDays($gift_receipt_valid_days)
    {

        if (!is_null($gift_receipt_valid_days) && (mb_strlen($gift_receipt_valid_days) < 1)) {
            throw new \InvalidArgumentException('invalid length for $gift_receipt_valid_days when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['gift_receipt_valid_days'] = $gift_receipt_valid_days;

        return $this;
    }

    /**
     * Gets tax_label_normal
     *
     * @return string|null
     */
    public function getTaxLabelNormal()
    {
        return $this->container['tax_label_normal'];
    }

    /**
     * Sets tax_label_normal
     *
     * @param string|null $tax_label_normal tax_label_normal
     *
     * @return self
     */
    public function setTaxLabelNormal($tax_label_normal)
    {

        if (!is_null($tax_label_normal) && (mb_strlen($tax_label_normal) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tax_label_normal when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['tax_label_normal'] = $tax_label_normal;

        return $this;
    }

    /**
     * Gets tax_label_reduce
     *
     * @return string|null
     */
    public function getTaxLabelReduce()
    {
        return $this->container['tax_label_reduce'];
    }

    /**
     * Sets tax_label_reduce
     *
     * @param string|null $tax_label_reduce tax_label_reduce
     *
     * @return self
     */
    public function setTaxLabelReduce($tax_label_reduce)
    {

        if (!is_null($tax_label_reduce) && (mb_strlen($tax_label_reduce) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tax_label_reduce when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['tax_label_reduce'] = $tax_label_reduce;

        return $this;
    }

    /**
     * Gets pause_flag
     *
     * @return string|null
     */
    public function getPauseFlag()
    {
        return $this->container['pause_flag'];
    }

    /**
     * Sets pause_flag
     *
     * @param string|null $pause_flag pause_flag
     *
     * @return self
     */
    public function setPauseFlag($pause_flag)
    {

        if (!is_null($pause_flag) && (mb_strlen($pause_flag) < 1)) {
            throw new \InvalidArgumentException('invalid length for $pause_flag when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['pause_flag'] = $pause_flag;

        return $this;
    }

    /**
     * Gets display_sequence
     *
     * @return string|null
     */
    public function getDisplaySequence()
    {
        return $this->container['display_sequence'];
    }

    /**
     * Sets display_sequence
     *
     * @param string|null $display_sequence display_sequence
     *
     * @return self
     */
    public function setDisplaySequence($display_sequence)
    {

        if (!is_null($display_sequence) && (mb_strlen($display_sequence) < 1)) {
            throw new \InvalidArgumentException('invalid length for $display_sequence when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['display_sequence'] = $display_sequence;

        return $this;
    }

    /**
     * Gets face_payment_use_division
     *
     * @return string|null
     */
    public function getFacePaymentUseDivision()
    {
        return $this->container['face_payment_use_division'];
    }

    /**
     * Sets face_payment_use_division
     *
     * @param string|null $face_payment_use_division face_payment_use_division
     *
     * @return self
     */
    public function setFacePaymentUseDivision($face_payment_use_division)
    {

        if (!is_null($face_payment_use_division) && (mb_strlen($face_payment_use_division) < 1)) {
            throw new \InvalidArgumentException('invalid length for $face_payment_use_division when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['face_payment_use_division'] = $face_payment_use_division;

        return $this;
    }

    /**
     * Gets ins_date_time
     *
     * @return string|null
     */
    public function getInsDateTime()
    {
        return $this->container['ins_date_time'];
    }

    /**
     * Sets ins_date_time
     *
     * @param string|null $ins_date_time ins_date_time
     *
     * @return self
     */
    public function setInsDateTime($ins_date_time)
    {

        if (!is_null($ins_date_time) && (mb_strlen($ins_date_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $ins_date_time when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['ins_date_time'] = $ins_date_time;

        return $this;
    }

    /**
     * Gets upd_date_time
     *
     * @return string|null
     */
    public function getUpdDateTime()
    {
        return $this->container['upd_date_time'];
    }

    /**
     * Sets upd_date_time
     *
     * @param string|null $upd_date_time upd_date_time
     *
     * @return self
     */
    public function setUpdDateTime($upd_date_time)
    {

        if (!is_null($upd_date_time) && (mb_strlen($upd_date_time) < 1)) {
            throw new \InvalidArgumentException('invalid length for $upd_date_time when calling GetStoresResponseItem., must be bigger than or equal to 1.');
        }

        $this->container['upd_date_time'] = $upd_date_time;

        return $this;
    }

    /**
     * Gets point_condition
     *
     * @return \OpenAPI\Client\Model\PointCondition|null
     */
    public function getPointCondition()
    {
        return $this->container['point_condition'];
    }

    /**
     * Sets point_condition
     *
     * @param \OpenAPI\Client\Model\PointCondition|null $point_condition point_condition
     *
     * @return self
     */
    public function setPointCondition($point_condition)
    {
        $this->container['point_condition'] = $point_condition;

        return $this;
    }

    /**
     * Gets receipt_print_info
     *
     * @return \OpenAPI\Client\Model\GetStoresResponseItemReceiptPrintInfo|null
     */
    public function getReceiptPrintInfo()
    {
        return $this->container['receipt_print_info'];
    }

    /**
     * Sets receipt_print_info
     *
     * @param \OpenAPI\Client\Model\GetStoresResponseItemReceiptPrintInfo|null $receipt_print_info receipt_print_info
     *
     * @return self
     */
    public function setReceiptPrintInfo($receipt_print_info)
    {
        $this->container['receipt_print_info'] = $receipt_print_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


