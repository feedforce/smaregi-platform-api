<?php
/**
 * DepositOthers
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * スマレジ
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DepositOthers Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DepositOthers implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'depositOthers';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'transaction_head_id' => 'string',
        'no' => 'string',
        'payment_method_id' => 'string',
        'payment_method_name' => 'string',
        'deposit_others' => 'string',
        'payment_unit_price' => 'string',
        'payment_change_flag' => 'string',
        'payment_division' => 'string',
        'payment_securities_flag' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'transaction_head_id' => null,
        'no' => null,
        'payment_method_id' => null,
        'payment_method_name' => null,
        'deposit_others' => null,
        'payment_unit_price' => null,
        'payment_change_flag' => null,
        'payment_division' => null,
        'payment_securities_flag' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_head_id' => 'transactionHeadId',
        'no' => 'no',
        'payment_method_id' => 'paymentMethodId',
        'payment_method_name' => 'paymentMethodName',
        'deposit_others' => 'depositOthers',
        'payment_unit_price' => 'paymentUnitPrice',
        'payment_change_flag' => 'paymentChangeFlag',
        'payment_division' => 'paymentDivision',
        'payment_securities_flag' => 'paymentSecuritiesFlag'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_head_id' => 'setTransactionHeadId',
        'no' => 'setNo',
        'payment_method_id' => 'setPaymentMethodId',
        'payment_method_name' => 'setPaymentMethodName',
        'deposit_others' => 'setDepositOthers',
        'payment_unit_price' => 'setPaymentUnitPrice',
        'payment_change_flag' => 'setPaymentChangeFlag',
        'payment_division' => 'setPaymentDivision',
        'payment_securities_flag' => 'setPaymentSecuritiesFlag'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_head_id' => 'getTransactionHeadId',
        'no' => 'getNo',
        'payment_method_id' => 'getPaymentMethodId',
        'payment_method_name' => 'getPaymentMethodName',
        'deposit_others' => 'getDepositOthers',
        'payment_unit_price' => 'getPaymentUnitPrice',
        'payment_change_flag' => 'getPaymentChangeFlag',
        'payment_division' => 'getPaymentDivision',
        'payment_securities_flag' => 'getPaymentSecuritiesFlag'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_head_id'] = $data['transaction_head_id'] ?? null;
        $this->container['no'] = $data['no'] ?? null;
        $this->container['payment_method_id'] = $data['payment_method_id'] ?? null;
        $this->container['payment_method_name'] = $data['payment_method_name'] ?? null;
        $this->container['deposit_others'] = $data['deposit_others'] ?? null;
        $this->container['payment_unit_price'] = $data['payment_unit_price'] ?? null;
        $this->container['payment_change_flag'] = $data['payment_change_flag'] ?? null;
        $this->container['payment_division'] = $data['payment_division'] ?? null;
        $this->container['payment_securities_flag'] = $data['payment_securities_flag'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['transaction_head_id']) && (mb_strlen($this->container['transaction_head_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'transaction_head_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['no']) && (mb_strlen($this->container['no']) < 1)) {
            $invalidProperties[] = "invalid value for 'no', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['payment_method_id']) && (mb_strlen($this->container['payment_method_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'payment_method_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['payment_method_name']) && (mb_strlen($this->container['payment_method_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'payment_method_name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['deposit_others']) && (mb_strlen($this->container['deposit_others']) < 1)) {
            $invalidProperties[] = "invalid value for 'deposit_others', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['payment_unit_price']) && (mb_strlen($this->container['payment_unit_price']) < 1)) {
            $invalidProperties[] = "invalid value for 'payment_unit_price', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['payment_division']) && (mb_strlen($this->container['payment_division']) < 1)) {
            $invalidProperties[] = "invalid value for 'payment_division', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_head_id
     *
     * @return string|null
     */
    public function getTransactionHeadId()
    {
        return $this->container['transaction_head_id'];
    }

    /**
     * Sets transaction_head_id
     *
     * @param string|null $transaction_head_id transaction_head_id
     *
     * @return self
     */
    public function setTransactionHeadId($transaction_head_id)
    {

        if (!is_null($transaction_head_id) && (mb_strlen($transaction_head_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $transaction_head_id when calling DepositOthers., must be bigger than or equal to 1.');
        }

        $this->container['transaction_head_id'] = $transaction_head_id;

        return $this;
    }

    /**
     * Gets no
     *
     * @return string|null
     */
    public function getNo()
    {
        return $this->container['no'];
    }

    /**
     * Sets no
     *
     * @param string|null $no no
     *
     * @return self
     */
    public function setNo($no)
    {

        if (!is_null($no) && (mb_strlen($no) < 1)) {
            throw new \InvalidArgumentException('invalid length for $no when calling DepositOthers., must be bigger than or equal to 1.');
        }

        $this->container['no'] = $no;

        return $this;
    }

    /**
     * Gets payment_method_id
     *
     * @return string|null
     */
    public function getPaymentMethodId()
    {
        return $this->container['payment_method_id'];
    }

    /**
     * Sets payment_method_id
     *
     * @param string|null $payment_method_id payment_method_id
     *
     * @return self
     */
    public function setPaymentMethodId($payment_method_id)
    {

        if (!is_null($payment_method_id) && (mb_strlen($payment_method_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $payment_method_id when calling DepositOthers., must be bigger than or equal to 1.');
        }

        $this->container['payment_method_id'] = $payment_method_id;

        return $this;
    }

    /**
     * Gets payment_method_name
     *
     * @return string|null
     */
    public function getPaymentMethodName()
    {
        return $this->container['payment_method_name'];
    }

    /**
     * Sets payment_method_name
     *
     * @param string|null $payment_method_name payment_method_name
     *
     * @return self
     */
    public function setPaymentMethodName($payment_method_name)
    {

        if (!is_null($payment_method_name) && (mb_strlen($payment_method_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $payment_method_name when calling DepositOthers., must be bigger than or equal to 1.');
        }

        $this->container['payment_method_name'] = $payment_method_name;

        return $this;
    }

    /**
     * Gets deposit_others
     *
     * @return string|null
     */
    public function getDepositOthers()
    {
        return $this->container['deposit_others'];
    }

    /**
     * Sets deposit_others
     *
     * @param string|null $deposit_others deposit_others
     *
     * @return self
     */
    public function setDepositOthers($deposit_others)
    {

        if (!is_null($deposit_others) && (mb_strlen($deposit_others) < 1)) {
            throw new \InvalidArgumentException('invalid length for $deposit_others when calling DepositOthers., must be bigger than or equal to 1.');
        }

        $this->container['deposit_others'] = $deposit_others;

        return $this;
    }

    /**
     * Gets payment_unit_price
     *
     * @return string|null
     */
    public function getPaymentUnitPrice()
    {
        return $this->container['payment_unit_price'];
    }

    /**
     * Sets payment_unit_price
     *
     * @param string|null $payment_unit_price payment_unit_price
     *
     * @return self
     */
    public function setPaymentUnitPrice($payment_unit_price)
    {

        if (!is_null($payment_unit_price) && (mb_strlen($payment_unit_price) < 1)) {
            throw new \InvalidArgumentException('invalid length for $payment_unit_price when calling DepositOthers., must be bigger than or equal to 1.');
        }

        $this->container['payment_unit_price'] = $payment_unit_price;

        return $this;
    }

    /**
     * Gets payment_change_flag
     *
     * @return string|null
     */
    public function getPaymentChangeFlag()
    {
        return $this->container['payment_change_flag'];
    }

    /**
     * Sets payment_change_flag
     *
     * @param string|null $payment_change_flag payment_change_flag
     *
     * @return self
     */
    public function setPaymentChangeFlag($payment_change_flag)
    {
        $this->container['payment_change_flag'] = $payment_change_flag;

        return $this;
    }

    /**
     * Gets payment_division
     *
     * @return string|null
     */
    public function getPaymentDivision()
    {
        return $this->container['payment_division'];
    }

    /**
     * Sets payment_division
     *
     * @param string|null $payment_division payment_division
     *
     * @return self
     */
    public function setPaymentDivision($payment_division)
    {

        if (!is_null($payment_division) && (mb_strlen($payment_division) < 1)) {
            throw new \InvalidArgumentException('invalid length for $payment_division when calling DepositOthers., must be bigger than or equal to 1.');
        }

        $this->container['payment_division'] = $payment_division;

        return $this;
    }

    /**
     * Gets payment_securities_flag
     *
     * @return string|null
     */
    public function getPaymentSecuritiesFlag()
    {
        return $this->container['payment_securities_flag'];
    }

    /**
     * Sets payment_securities_flag
     *
     * @param string|null $payment_securities_flag payment_securities_flag
     *
     * @return self
     */
    public function setPaymentSecuritiesFlag($payment_securities_flag)
    {
        $this->container['payment_securities_flag'] = $payment_securities_flag;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


