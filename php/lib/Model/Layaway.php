<?php
/**
 * Layaway
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * スマレジ
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Layaway Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Layaway implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'layaway';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'transaction_head_id' => 'string',
        'pick_up_date' => 'string',
        'status' => 'string',
        'part_payment' => 'string',
        'part_payment_class' => 'string',
        'pick_up_transaction_head_id' => 'string',
        'disabled_edit' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'transaction_head_id' => null,
        'pick_up_date' => null,
        'status' => null,
        'part_payment' => null,
        'part_payment_class' => null,
        'pick_up_transaction_head_id' => null,
        'disabled_edit' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_head_id' => 'transactionHeadId',
        'pick_up_date' => 'pickUpDate',
        'status' => 'status',
        'part_payment' => 'partPayment',
        'part_payment_class' => 'partPaymentClass',
        'pick_up_transaction_head_id' => 'pickUpTransactionHeadId',
        'disabled_edit' => 'disabledEdit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_head_id' => 'setTransactionHeadId',
        'pick_up_date' => 'setPickUpDate',
        'status' => 'setStatus',
        'part_payment' => 'setPartPayment',
        'part_payment_class' => 'setPartPaymentClass',
        'pick_up_transaction_head_id' => 'setPickUpTransactionHeadId',
        'disabled_edit' => 'setDisabledEdit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_head_id' => 'getTransactionHeadId',
        'pick_up_date' => 'getPickUpDate',
        'status' => 'getStatus',
        'part_payment' => 'getPartPayment',
        'part_payment_class' => 'getPartPaymentClass',
        'pick_up_transaction_head_id' => 'getPickUpTransactionHeadId',
        'disabled_edit' => 'getDisabledEdit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_head_id'] = $data['transaction_head_id'] ?? null;
        $this->container['pick_up_date'] = $data['pick_up_date'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['part_payment'] = $data['part_payment'] ?? null;
        $this->container['part_payment_class'] = $data['part_payment_class'] ?? null;
        $this->container['pick_up_transaction_head_id'] = $data['pick_up_transaction_head_id'] ?? null;
        $this->container['disabled_edit'] = $data['disabled_edit'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['transaction_head_id']) && (mb_strlen($this->container['transaction_head_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'transaction_head_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['pick_up_date']) && (mb_strlen($this->container['pick_up_date']) < 1)) {
            $invalidProperties[] = "invalid value for 'pick_up_date', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['status']) && (mb_strlen($this->container['status']) < 1)) {
            $invalidProperties[] = "invalid value for 'status', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['part_payment']) && (mb_strlen($this->container['part_payment']) < 1)) {
            $invalidProperties[] = "invalid value for 'part_payment', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['part_payment_class']) && (mb_strlen($this->container['part_payment_class']) < 1)) {
            $invalidProperties[] = "invalid value for 'part_payment_class', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['pick_up_transaction_head_id']) && (mb_strlen($this->container['pick_up_transaction_head_id']) < 1)) {
            $invalidProperties[] = "invalid value for 'pick_up_transaction_head_id', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['disabled_edit']) && (mb_strlen($this->container['disabled_edit']) < 1)) {
            $invalidProperties[] = "invalid value for 'disabled_edit', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_head_id
     *
     * @return string|null
     */
    public function getTransactionHeadId()
    {
        return $this->container['transaction_head_id'];
    }

    /**
     * Sets transaction_head_id
     *
     * @param string|null $transaction_head_id transaction_head_id
     *
     * @return self
     */
    public function setTransactionHeadId($transaction_head_id)
    {

        if (!is_null($transaction_head_id) && (mb_strlen($transaction_head_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $transaction_head_id when calling Layaway., must be bigger than or equal to 1.');
        }

        $this->container['transaction_head_id'] = $transaction_head_id;

        return $this;
    }

    /**
     * Gets pick_up_date
     *
     * @return string|null
     */
    public function getPickUpDate()
    {
        return $this->container['pick_up_date'];
    }

    /**
     * Sets pick_up_date
     *
     * @param string|null $pick_up_date pick_up_date
     *
     * @return self
     */
    public function setPickUpDate($pick_up_date)
    {

        if (!is_null($pick_up_date) && (mb_strlen($pick_up_date) < 1)) {
            throw new \InvalidArgumentException('invalid length for $pick_up_date when calling Layaway., must be bigger than or equal to 1.');
        }

        $this->container['pick_up_date'] = $pick_up_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {

        if (!is_null($status) && (mb_strlen($status) < 1)) {
            throw new \InvalidArgumentException('invalid length for $status when calling Layaway., must be bigger than or equal to 1.');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets part_payment
     *
     * @return string|null
     */
    public function getPartPayment()
    {
        return $this->container['part_payment'];
    }

    /**
     * Sets part_payment
     *
     * @param string|null $part_payment part_payment
     *
     * @return self
     */
    public function setPartPayment($part_payment)
    {

        if (!is_null($part_payment) && (mb_strlen($part_payment) < 1)) {
            throw new \InvalidArgumentException('invalid length for $part_payment when calling Layaway., must be bigger than or equal to 1.');
        }

        $this->container['part_payment'] = $part_payment;

        return $this;
    }

    /**
     * Gets part_payment_class
     *
     * @return string|null
     */
    public function getPartPaymentClass()
    {
        return $this->container['part_payment_class'];
    }

    /**
     * Sets part_payment_class
     *
     * @param string|null $part_payment_class part_payment_class
     *
     * @return self
     */
    public function setPartPaymentClass($part_payment_class)
    {

        if (!is_null($part_payment_class) && (mb_strlen($part_payment_class) < 1)) {
            throw new \InvalidArgumentException('invalid length for $part_payment_class when calling Layaway., must be bigger than or equal to 1.');
        }

        $this->container['part_payment_class'] = $part_payment_class;

        return $this;
    }

    /**
     * Gets pick_up_transaction_head_id
     *
     * @return string|null
     */
    public function getPickUpTransactionHeadId()
    {
        return $this->container['pick_up_transaction_head_id'];
    }

    /**
     * Sets pick_up_transaction_head_id
     *
     * @param string|null $pick_up_transaction_head_id pick_up_transaction_head_id
     *
     * @return self
     */
    public function setPickUpTransactionHeadId($pick_up_transaction_head_id)
    {

        if (!is_null($pick_up_transaction_head_id) && (mb_strlen($pick_up_transaction_head_id) < 1)) {
            throw new \InvalidArgumentException('invalid length for $pick_up_transaction_head_id when calling Layaway., must be bigger than or equal to 1.');
        }

        $this->container['pick_up_transaction_head_id'] = $pick_up_transaction_head_id;

        return $this;
    }

    /**
     * Gets disabled_edit
     *
     * @return string|null
     */
    public function getDisabledEdit()
    {
        return $this->container['disabled_edit'];
    }

    /**
     * Sets disabled_edit
     *
     * @param string|null $disabled_edit disabled_edit
     *
     * @return self
     */
    public function setDisabledEdit($disabled_edit)
    {

        if (!is_null($disabled_edit) && (mb_strlen($disabled_edit) < 1)) {
            throw new \InvalidArgumentException('invalid length for $disabled_edit when calling Layaway., must be bigger than or equal to 1.');
        }

        $this->container['disabled_edit'] = $disabled_edit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


