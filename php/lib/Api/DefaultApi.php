<?php
/**
 * DefaultApi
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * スマレジ
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createCustomers
     *
     * 会員情報を登録します。
     *
     * @param  string $contract_id 契約id (required)
     * @param  \OpenAPI\Client\Model\CreateCustomers $create_customers create_customers (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CustomersResponseOfCreate|\OpenAPI\Client\Model\Error
     */
    public function createCustomers($contract_id, $create_customers = null)
    {
        list($response) = $this->createCustomersWithHttpInfo($contract_id, $create_customers);
        return $response;
    }

    /**
     * Operation createCustomersWithHttpInfo
     *
     * 会員情報を登録します。
     *
     * @param  string $contract_id 契約id (required)
     * @param  \OpenAPI\Client\Model\CreateCustomers $create_customers (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CustomersResponseOfCreate|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCustomersWithHttpInfo($contract_id, $create_customers = null)
    {
        $request = $this->createCustomersRequest($contract_id, $create_customers);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CustomersResponseOfCreate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CustomersResponseOfCreate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CustomersResponseOfCreate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CustomersResponseOfCreate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCustomersAsync
     *
     * 会員情報を登録します。
     *
     * @param  string $contract_id 契約id (required)
     * @param  \OpenAPI\Client\Model\CreateCustomers $create_customers (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCustomersAsync($contract_id, $create_customers = null)
    {
        return $this->createCustomersAsyncWithHttpInfo($contract_id, $create_customers)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCustomersAsyncWithHttpInfo
     *
     * 会員情報を登録します。
     *
     * @param  string $contract_id 契約id (required)
     * @param  \OpenAPI\Client\Model\CreateCustomers $create_customers (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCustomersAsyncWithHttpInfo($contract_id, $create_customers = null)
    {
        $returnType = '\OpenAPI\Client\Model\CustomersResponseOfCreate';
        $request = $this->createCustomersRequest($contract_id, $create_customers);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCustomers'
     *
     * @param  string $contract_id 契約id (required)
     * @param  \OpenAPI\Client\Model\CreateCustomers $create_customers (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCustomersRequest($contract_id, $create_customers = null)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling createCustomers'
            );
        }

        $resourcePath = '/{contract_id}/pos/customers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contract_id' . '}',
                ObjectSerializer::toPathValue($contract_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($create_customers)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($create_customers));
            } else {
                $httpBody = $create_customers;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCoupons
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $coupon_id クーポンid (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCoupons($contract_id, $coupon_id)
    {
        $this->deleteCouponsWithHttpInfo($contract_id, $coupon_id);
    }

    /**
     * Operation deleteCouponsWithHttpInfo
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $coupon_id クーポンid (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCouponsWithHttpInfo($contract_id, $coupon_id)
    {
        $request = $this->deleteCouponsRequest($contract_id, $coupon_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCouponsAsync
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $coupon_id クーポンid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCouponsAsync($contract_id, $coupon_id)
    {
        return $this->deleteCouponsAsyncWithHttpInfo($contract_id, $coupon_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCouponsAsyncWithHttpInfo
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $coupon_id クーポンid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCouponsAsyncWithHttpInfo($contract_id, $coupon_id)
    {
        $returnType = '';
        $request = $this->deleteCouponsRequest($contract_id, $coupon_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCoupons'
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $coupon_id クーポンid (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCouponsRequest($contract_id, $coupon_id)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling deleteCoupons'
            );
        }
        // verify the required parameter 'coupon_id' is set
        if ($coupon_id === null || (is_array($coupon_id) && count($coupon_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coupon_id when calling deleteCoupons'
            );
        }

        $resourcePath = '/{contract_id}/pos/coupons/{coupon_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contract_id' . '}',
                ObjectSerializer::toPathValue($contract_id),
                $resourcePath
            );
        }
        // path params
        if ($coupon_id !== null) {
            $resourcePath = str_replace(
                '{' . 'coupon_id' . '}',
                ObjectSerializer::toPathValue($coupon_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteCustomers
     *
     * 会員情報を削除します。
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $customer_id 顧客id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteCustomers($contract_id, $customer_id)
    {
        $this->deleteCustomersWithHttpInfo($contract_id, $customer_id);
    }

    /**
     * Operation deleteCustomersWithHttpInfo
     *
     * 会員情報を削除します。
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $customer_id 顧客id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteCustomersWithHttpInfo($contract_id, $customer_id)
    {
        $request = $this->deleteCustomersRequest($contract_id, $customer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteCustomersAsync
     *
     * 会員情報を削除します。
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $customer_id 顧客id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCustomersAsync($contract_id, $customer_id)
    {
        return $this->deleteCustomersAsyncWithHttpInfo($contract_id, $customer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteCustomersAsyncWithHttpInfo
     *
     * 会員情報を削除します。
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $customer_id 顧客id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteCustomersAsyncWithHttpInfo($contract_id, $customer_id)
    {
        $returnType = '';
        $request = $this->deleteCustomersRequest($contract_id, $customer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteCustomers'
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $customer_id 顧客id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteCustomersRequest($contract_id, $customer_id)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling deleteCustomers'
            );
        }
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling deleteCustomers'
            );
        }

        $resourcePath = '/{contract_id}/pos/customers/{customer_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contract_id' . '}',
                ObjectSerializer::toPathValue($contract_id),
                $resourcePath
            );
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_id' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCoupons
     *
     * Your GET endpoint
     *
     * @param  string $contract_id 契約id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Coupon[]
     */
    public function getCoupons($contract_id)
    {
        list($response) = $this->getCouponsWithHttpInfo($contract_id);
        return $response;
    }

    /**
     * Operation getCouponsWithHttpInfo
     *
     * Your GET endpoint
     *
     * @param  string $contract_id 契約id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Coupon[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCouponsWithHttpInfo($contract_id)
    {
        $request = $this->getCouponsRequest($contract_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Coupon[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Coupon[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Coupon[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Coupon[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCouponsAsync
     *
     * Your GET endpoint
     *
     * @param  string $contract_id 契約id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCouponsAsync($contract_id)
    {
        return $this->getCouponsAsyncWithHttpInfo($contract_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCouponsAsyncWithHttpInfo
     *
     * Your GET endpoint
     *
     * @param  string $contract_id 契約id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCouponsAsyncWithHttpInfo($contract_id)
    {
        $returnType = '\OpenAPI\Client\Model\Coupon[]';
        $request = $this->getCouponsRequest($contract_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCoupons'
     *
     * @param  string $contract_id 契約id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCouponsRequest($contract_id)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling getCoupons'
            );
        }

        $resourcePath = '/{contract_id}/pos/coupons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contract_id' . '}',
                ObjectSerializer::toPathValue($contract_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomerPointList
     *
     * 会員ポイント一覧取得
     *
     * @param  string $contract_id 契約id (required)
     * @param  int $limit 一度に返すアイテム数 (上限 1000) (optional)
     * @param  int $page ページ (optional)
     * @param  string $customer_id 顧客id (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetCustomerPointListItem[]
     */
    public function getCustomerPointList($contract_id, $limit = null, $page = null, $customer_id = null)
    {
        list($response) = $this->getCustomerPointListWithHttpInfo($contract_id, $limit, $page, $customer_id);
        return $response;
    }

    /**
     * Operation getCustomerPointListWithHttpInfo
     *
     * 会員ポイント一覧取得
     *
     * @param  string $contract_id 契約id (required)
     * @param  int $limit 一度に返すアイテム数 (上限 1000) (optional)
     * @param  int $page ページ (optional)
     * @param  string $customer_id 顧客id (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetCustomerPointListItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerPointListWithHttpInfo($contract_id, $limit = null, $page = null, $customer_id = null)
    {
        $request = $this->getCustomerPointListRequest($contract_id, $limit, $page, $customer_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetCustomerPointListItem[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetCustomerPointListItem[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetCustomerPointListItem[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetCustomerPointListItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerPointListAsync
     *
     * 会員ポイント一覧取得
     *
     * @param  string $contract_id 契約id (required)
     * @param  int $limit 一度に返すアイテム数 (上限 1000) (optional)
     * @param  int $page ページ (optional)
     * @param  string $customer_id 顧客id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerPointListAsync($contract_id, $limit = null, $page = null, $customer_id = null)
    {
        return $this->getCustomerPointListAsyncWithHttpInfo($contract_id, $limit, $page, $customer_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerPointListAsyncWithHttpInfo
     *
     * 会員ポイント一覧取得
     *
     * @param  string $contract_id 契約id (required)
     * @param  int $limit 一度に返すアイテム数 (上限 1000) (optional)
     * @param  int $page ページ (optional)
     * @param  string $customer_id 顧客id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerPointListAsyncWithHttpInfo($contract_id, $limit = null, $page = null, $customer_id = null)
    {
        $returnType = '\OpenAPI\Client\Model\GetCustomerPointListItem[]';
        $request = $this->getCustomerPointListRequest($contract_id, $limit, $page, $customer_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomerPointList'
     *
     * @param  string $contract_id 契約id (required)
     * @param  int $limit 一度に返すアイテム数 (上限 1000) (optional)
     * @param  int $page ページ (optional)
     * @param  string $customer_id 顧客id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCustomerPointListRequest($contract_id, $limit = null, $page = null, $customer_id = null)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling getCustomerPointList'
            );
        }

        $resourcePath = '/{contract_id}/pos/customers/point';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($customer_id !== null) {
            if('form' === 'form' && is_array($customer_id)) {
                foreach($customer_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customer_id'] = $customer_id;
            }
        }


        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contract_id' . '}',
                ObjectSerializer::toPathValue($contract_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomerRequiredColumnSetting
     *
     * 会員必須項目設定取得
     *
     * @param  string $contract_id 契約id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetCustomerRequiredColumnSettingResponse[]
     */
    public function getCustomerRequiredColumnSetting($contract_id)
    {
        list($response) = $this->getCustomerRequiredColumnSettingWithHttpInfo($contract_id);
        return $response;
    }

    /**
     * Operation getCustomerRequiredColumnSettingWithHttpInfo
     *
     * 会員必須項目設定取得
     *
     * @param  string $contract_id 契約id (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetCustomerRequiredColumnSettingResponse[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomerRequiredColumnSettingWithHttpInfo($contract_id)
    {
        $request = $this->getCustomerRequiredColumnSettingRequest($contract_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetCustomerRequiredColumnSettingResponse[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetCustomerRequiredColumnSettingResponse[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetCustomerRequiredColumnSettingResponse[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetCustomerRequiredColumnSettingResponse[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomerRequiredColumnSettingAsync
     *
     * 会員必須項目設定取得
     *
     * @param  string $contract_id 契約id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerRequiredColumnSettingAsync($contract_id)
    {
        return $this->getCustomerRequiredColumnSettingAsyncWithHttpInfo($contract_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomerRequiredColumnSettingAsyncWithHttpInfo
     *
     * 会員必須項目設定取得
     *
     * @param  string $contract_id 契約id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomerRequiredColumnSettingAsyncWithHttpInfo($contract_id)
    {
        $returnType = '\OpenAPI\Client\Model\GetCustomerRequiredColumnSettingResponse[]';
        $request = $this->getCustomerRequiredColumnSettingRequest($contract_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomerRequiredColumnSetting'
     *
     * @param  string $contract_id 契約id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCustomerRequiredColumnSettingRequest($contract_id)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling getCustomerRequiredColumnSetting'
            );
        }

        $resourcePath = '/{contract_id}/pos/customer_required_column_setting';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contract_id' . '}',
                ObjectSerializer::toPathValue($contract_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCustomers
     *
     * 会員情報一覧を取得します。
     *
     * @param  string $contract_id 契約id (required)
     * @param  int $limit 一度に返すアイテム数 (上限 1000) (optional)
     * @param  int $page ページ (optional)
     * @param  string $customer_code 顧客コード (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetCustomersItem[]|\OpenAPI\Client\Model\Error
     */
    public function getCustomers($contract_id, $limit = null, $page = null, $customer_code = null)
    {
        list($response) = $this->getCustomersWithHttpInfo($contract_id, $limit, $page, $customer_code);
        return $response;
    }

    /**
     * Operation getCustomersWithHttpInfo
     *
     * 会員情報一覧を取得します。
     *
     * @param  string $contract_id 契約id (required)
     * @param  int $limit 一度に返すアイテム数 (上限 1000) (optional)
     * @param  int $page ページ (optional)
     * @param  string $customer_code 顧客コード (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetCustomersItem[]|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCustomersWithHttpInfo($contract_id, $limit = null, $page = null, $customer_code = null)
    {
        $request = $this->getCustomersRequest($contract_id, $limit, $page, $customer_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetCustomersItem[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetCustomersItem[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetCustomersItem[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetCustomersItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCustomersAsync
     *
     * 会員情報一覧を取得します。
     *
     * @param  string $contract_id 契約id (required)
     * @param  int $limit 一度に返すアイテム数 (上限 1000) (optional)
     * @param  int $page ページ (optional)
     * @param  string $customer_code 顧客コード (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomersAsync($contract_id, $limit = null, $page = null, $customer_code = null)
    {
        return $this->getCustomersAsyncWithHttpInfo($contract_id, $limit, $page, $customer_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCustomersAsyncWithHttpInfo
     *
     * 会員情報一覧を取得します。
     *
     * @param  string $contract_id 契約id (required)
     * @param  int $limit 一度に返すアイテム数 (上限 1000) (optional)
     * @param  int $page ページ (optional)
     * @param  string $customer_code 顧客コード (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCustomersAsyncWithHttpInfo($contract_id, $limit = null, $page = null, $customer_code = null)
    {
        $returnType = '\OpenAPI\Client\Model\GetCustomersItem[]';
        $request = $this->getCustomersRequest($contract_id, $limit, $page, $customer_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCustomers'
     *
     * @param  string $contract_id 契約id (required)
     * @param  int $limit 一度に返すアイテム数 (上限 1000) (optional)
     * @param  int $page ページ (optional)
     * @param  string $customer_code 顧客コード (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getCustomersRequest($contract_id, $limit = null, $page = null, $customer_code = null)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling getCustomers'
            );
        }

        $resourcePath = '/{contract_id}/pos/customers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($customer_code !== null) {
            if('form' === 'form' && is_array($customer_code)) {
                foreach($customer_code as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customer_code'] = $customer_code;
            }
        }


        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contract_id' . '}',
                ObjectSerializer::toPathValue($contract_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLayawayById
     *
     * Your GET endpoint
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $layaway_id layaway_id (required)
     * @param  \OpenAPI\Client\Model\WithDetails $with_details 取引明細情報を付加するか(全項目付加する場合はall, 一部項目を付加する場合はsummary, しない場合はnone) (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_store 店舗情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_customer 会員情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetLayawayById
     */
    public function getLayawayById($contract_id, $layaway_id, $with_details = null, $with_store = null, $with_customer = null)
    {
        list($response) = $this->getLayawayByIdWithHttpInfo($contract_id, $layaway_id, $with_details, $with_store, $with_customer);
        return $response;
    }

    /**
     * Operation getLayawayByIdWithHttpInfo
     *
     * Your GET endpoint
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $layaway_id (required)
     * @param  \OpenAPI\Client\Model\WithDetails $with_details 取引明細情報を付加するか(全項目付加する場合はall, 一部項目を付加する場合はsummary, しない場合はnone) (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_store 店舗情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_customer 会員情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetLayawayById, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLayawayByIdWithHttpInfo($contract_id, $layaway_id, $with_details = null, $with_store = null, $with_customer = null)
    {
        $request = $this->getLayawayByIdRequest($contract_id, $layaway_id, $with_details, $with_store, $with_customer);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetLayawayById' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetLayawayById', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetLayawayById';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetLayawayById',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLayawayByIdAsync
     *
     * Your GET endpoint
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $layaway_id (required)
     * @param  \OpenAPI\Client\Model\WithDetails $with_details 取引明細情報を付加するか(全項目付加する場合はall, 一部項目を付加する場合はsummary, しない場合はnone) (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_store 店舗情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_customer 会員情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLayawayByIdAsync($contract_id, $layaway_id, $with_details = null, $with_store = null, $with_customer = null)
    {
        return $this->getLayawayByIdAsyncWithHttpInfo($contract_id, $layaway_id, $with_details, $with_store, $with_customer)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLayawayByIdAsyncWithHttpInfo
     *
     * Your GET endpoint
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $layaway_id (required)
     * @param  \OpenAPI\Client\Model\WithDetails $with_details 取引明細情報を付加するか(全項目付加する場合はall, 一部項目を付加する場合はsummary, しない場合はnone) (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_store 店舗情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_customer 会員情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLayawayByIdAsyncWithHttpInfo($contract_id, $layaway_id, $with_details = null, $with_store = null, $with_customer = null)
    {
        $returnType = '\OpenAPI\Client\Model\GetLayawayById';
        $request = $this->getLayawayByIdRequest($contract_id, $layaway_id, $with_details, $with_store, $with_customer);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLayawayById'
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $layaway_id (required)
     * @param  \OpenAPI\Client\Model\WithDetails $with_details 取引明細情報を付加するか(全項目付加する場合はall, 一部項目を付加する場合はsummary, しない場合はnone) (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_store 店舗情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_customer 会員情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLayawayByIdRequest($contract_id, $layaway_id, $with_details = null, $with_store = null, $with_customer = null)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling getLayawayById'
            );
        }
        // verify the required parameter 'layaway_id' is set
        if ($layaway_id === null || (is_array($layaway_id) && count($layaway_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $layaway_id when calling getLayawayById'
            );
        }

        $resourcePath = '/{contract_id}/pos/transactions/layaways/{layaway_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($with_details !== null) {
            if('form' === 'form' && is_array($with_details)) {
                foreach($with_details as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['with_details'] = $with_details;
            }
        }
        // query params
        if ($with_store !== null) {
            if('form' === 'form' && is_array($with_store)) {
                foreach($with_store as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['with_store'] = $with_store;
            }
        }
        // query params
        if ($with_customer !== null) {
            if('form' === 'form' && is_array($with_customer)) {
                foreach($with_customer as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['with_customer'] = $with_customer;
            }
        }


        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contract_id' . '}',
                ObjectSerializer::toPathValue($contract_id),
                $resourcePath
            );
        }
        // path params
        if ($layaway_id !== null) {
            $resourcePath = str_replace(
                '{' . 'layaway_id' . '}',
                ObjectSerializer::toPathValue($layaway_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLayawayList
     *
     * 取置き一覧を取得します。
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $sum_date 締め日 [YYYY-MM-DD] (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_layaway 取置き情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetLayawayListItem[]
     */
    public function getLayawayList($contract_id, $sum_date = null, $with_layaway = null)
    {
        list($response) = $this->getLayawayListWithHttpInfo($contract_id, $sum_date, $with_layaway);
        return $response;
    }

    /**
     * Operation getLayawayListWithHttpInfo
     *
     * 取置き一覧を取得します。
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $sum_date 締め日 [YYYY-MM-DD] (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_layaway 取置き情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetLayawayListItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getLayawayListWithHttpInfo($contract_id, $sum_date = null, $with_layaway = null)
    {
        $request = $this->getLayawayListRequest($contract_id, $sum_date, $with_layaway);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetLayawayListItem[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetLayawayListItem[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetLayawayListItem[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetLayawayListItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getLayawayListAsync
     *
     * 取置き一覧を取得します。
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $sum_date 締め日 [YYYY-MM-DD] (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_layaway 取置き情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLayawayListAsync($contract_id, $sum_date = null, $with_layaway = null)
    {
        return $this->getLayawayListAsyncWithHttpInfo($contract_id, $sum_date, $with_layaway)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLayawayListAsyncWithHttpInfo
     *
     * 取置き一覧を取得します。
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $sum_date 締め日 [YYYY-MM-DD] (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_layaway 取置き情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getLayawayListAsyncWithHttpInfo($contract_id, $sum_date = null, $with_layaway = null)
    {
        $returnType = '\OpenAPI\Client\Model\GetLayawayListItem[]';
        $request = $this->getLayawayListRequest($contract_id, $sum_date, $with_layaway);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLayawayList'
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $sum_date 締め日 [YYYY-MM-DD] (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_layaway 取置き情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLayawayListRequest($contract_id, $sum_date = null, $with_layaway = null)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling getLayawayList'
            );
        }

        $resourcePath = '/{contract_id}/pos/transactions/layaways';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sum_date !== null) {
            if('form' === 'form' && is_array($sum_date)) {
                foreach($sum_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sum_date'] = $sum_date;
            }
        }
        // query params
        if ($with_layaway !== null) {
            if('form' === 'form' && is_array($with_layaway)) {
                foreach($with_layaway as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['with_layaway'] = $with_layaway;
            }
        }


        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contract_id' . '}',
                ObjectSerializer::toPathValue($contract_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getStores
     *
     * 店舗一覧取得
     *
     * @param  string $contract_id 契約id (required)
     * @param  int $limit 一度に返すアイテム数 (上限 1000) (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_point_condition ポイント情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetStoresResponseItem[]
     */
    public function getStores($contract_id, $limit = null, $with_point_condition = null)
    {
        list($response) = $this->getStoresWithHttpInfo($contract_id, $limit, $with_point_condition);
        return $response;
    }

    /**
     * Operation getStoresWithHttpInfo
     *
     * 店舗一覧取得
     *
     * @param  string $contract_id 契約id (required)
     * @param  int $limit 一度に返すアイテム数 (上限 1000) (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_point_condition ポイント情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetStoresResponseItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getStoresWithHttpInfo($contract_id, $limit = null, $with_point_condition = null)
    {
        $request = $this->getStoresRequest($contract_id, $limit, $with_point_condition);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetStoresResponseItem[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetStoresResponseItem[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetStoresResponseItem[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetStoresResponseItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getStoresAsync
     *
     * 店舗一覧取得
     *
     * @param  string $contract_id 契約id (required)
     * @param  int $limit 一度に返すアイテム数 (上限 1000) (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_point_condition ポイント情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStoresAsync($contract_id, $limit = null, $with_point_condition = null)
    {
        return $this->getStoresAsyncWithHttpInfo($contract_id, $limit, $with_point_condition)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getStoresAsyncWithHttpInfo
     *
     * 店舗一覧取得
     *
     * @param  string $contract_id 契約id (required)
     * @param  int $limit 一度に返すアイテム数 (上限 1000) (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_point_condition ポイント情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getStoresAsyncWithHttpInfo($contract_id, $limit = null, $with_point_condition = null)
    {
        $returnType = '\OpenAPI\Client\Model\GetStoresResponseItem[]';
        $request = $this->getStoresRequest($contract_id, $limit, $with_point_condition);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getStores'
     *
     * @param  string $contract_id 契約id (required)
     * @param  int $limit 一度に返すアイテム数 (上限 1000) (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_point_condition ポイント情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getStoresRequest($contract_id, $limit = null, $with_point_condition = null)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling getStores'
            );
        }

        $resourcePath = '/{contract_id}/pos/stores';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($with_point_condition !== null) {
            if('form' === 'form' && is_array($with_point_condition)) {
                foreach($with_point_condition as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['with_point_condition'] = $with_point_condition;
            }
        }


        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contract_id' . '}',
                ObjectSerializer::toPathValue($contract_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransaction
     *
     * 取引情報一覧を取得します。
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $sum_date 締め日 [YYYY-MM-DD] (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_layaway 取置き情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     * @param  int $limit 一度に返すアイテム数 (上限 1000) (optional)
     * @param  int $page ページ (optional)
     * @param  string $upd_date_time_to 更新日時(To)：登録時・更新時の日時。[YYYY-MM-DDThh:mm:ssTZD] (optional)
     * @param  string $upd_date_time_from 更新日時(From)：登録時・更新時の日時。[YYYY-MM-DDThh:mm:ssTZD] (optional)
     * @param  string $customer_code 会員コード (optional)
     * @param  \OpenAPI\Client\Model\TransactionHeadDivision $transaction_head_division transaction_head_division (optional)
     * @param  \OpenAPI\Client\Model\Sort $sort sort (optional)
     * @param  string $terminal_tran_date_time_from 端末取引日時(From)：端末で設定された取引日時。[YYYY-MM-DDThh:mm:ssTZD] (optional)
     * @param  string $terminal_tran_date_time_to 端末取引日時(To)：端末で設定された取引日時。[YYYY-MM-DDThh:mm:ssTZD] (optional)
     * @param  int $store_id 店舗ID (optional)
     * @param  string $transaction_head_id_to 取引ID(To) (optional)
     * @param  string $transaction_head_id_from 取引ID(From) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetTransactionItem[]
     */
    public function getTransaction($contract_id, $sum_date = null, $with_layaway = null, $limit = null, $page = null, $upd_date_time_to = null, $upd_date_time_from = null, $customer_code = null, $transaction_head_division = null, $sort = null, $terminal_tran_date_time_from = null, $terminal_tran_date_time_to = null, $store_id = null, $transaction_head_id_to = null, $transaction_head_id_from = null)
    {
        list($response) = $this->getTransactionWithHttpInfo($contract_id, $sum_date, $with_layaway, $limit, $page, $upd_date_time_to, $upd_date_time_from, $customer_code, $transaction_head_division, $sort, $terminal_tran_date_time_from, $terminal_tran_date_time_to, $store_id, $transaction_head_id_to, $transaction_head_id_from);
        return $response;
    }

    /**
     * Operation getTransactionWithHttpInfo
     *
     * 取引情報一覧を取得します。
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $sum_date 締め日 [YYYY-MM-DD] (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_layaway 取置き情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     * @param  int $limit 一度に返すアイテム数 (上限 1000) (optional)
     * @param  int $page ページ (optional)
     * @param  string $upd_date_time_to 更新日時(To)：登録時・更新時の日時。[YYYY-MM-DDThh:mm:ssTZD] (optional)
     * @param  string $upd_date_time_from 更新日時(From)：登録時・更新時の日時。[YYYY-MM-DDThh:mm:ssTZD] (optional)
     * @param  string $customer_code 会員コード (optional)
     * @param  \OpenAPI\Client\Model\TransactionHeadDivision $transaction_head_division (optional)
     * @param  \OpenAPI\Client\Model\Sort $sort (optional)
     * @param  string $terminal_tran_date_time_from 端末取引日時(From)：端末で設定された取引日時。[YYYY-MM-DDThh:mm:ssTZD] (optional)
     * @param  string $terminal_tran_date_time_to 端末取引日時(To)：端末で設定された取引日時。[YYYY-MM-DDThh:mm:ssTZD] (optional)
     * @param  int $store_id 店舗ID (optional)
     * @param  string $transaction_head_id_to 取引ID(To) (optional)
     * @param  string $transaction_head_id_from 取引ID(From) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetTransactionItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionWithHttpInfo($contract_id, $sum_date = null, $with_layaway = null, $limit = null, $page = null, $upd_date_time_to = null, $upd_date_time_from = null, $customer_code = null, $transaction_head_division = null, $sort = null, $terminal_tran_date_time_from = null, $terminal_tran_date_time_to = null, $store_id = null, $transaction_head_id_to = null, $transaction_head_id_from = null)
    {
        $request = $this->getTransactionRequest($contract_id, $sum_date, $with_layaway, $limit, $page, $upd_date_time_to, $upd_date_time_from, $customer_code, $transaction_head_division, $sort, $terminal_tran_date_time_from, $terminal_tran_date_time_to, $store_id, $transaction_head_id_to, $transaction_head_id_from);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetTransactionItem[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetTransactionItem[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetTransactionItem[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetTransactionItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionAsync
     *
     * 取引情報一覧を取得します。
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $sum_date 締め日 [YYYY-MM-DD] (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_layaway 取置き情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     * @param  int $limit 一度に返すアイテム数 (上限 1000) (optional)
     * @param  int $page ページ (optional)
     * @param  string $upd_date_time_to 更新日時(To)：登録時・更新時の日時。[YYYY-MM-DDThh:mm:ssTZD] (optional)
     * @param  string $upd_date_time_from 更新日時(From)：登録時・更新時の日時。[YYYY-MM-DDThh:mm:ssTZD] (optional)
     * @param  string $customer_code 会員コード (optional)
     * @param  \OpenAPI\Client\Model\TransactionHeadDivision $transaction_head_division (optional)
     * @param  \OpenAPI\Client\Model\Sort $sort (optional)
     * @param  string $terminal_tran_date_time_from 端末取引日時(From)：端末で設定された取引日時。[YYYY-MM-DDThh:mm:ssTZD] (optional)
     * @param  string $terminal_tran_date_time_to 端末取引日時(To)：端末で設定された取引日時。[YYYY-MM-DDThh:mm:ssTZD] (optional)
     * @param  int $store_id 店舗ID (optional)
     * @param  string $transaction_head_id_to 取引ID(To) (optional)
     * @param  string $transaction_head_id_from 取引ID(From) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionAsync($contract_id, $sum_date = null, $with_layaway = null, $limit = null, $page = null, $upd_date_time_to = null, $upd_date_time_from = null, $customer_code = null, $transaction_head_division = null, $sort = null, $terminal_tran_date_time_from = null, $terminal_tran_date_time_to = null, $store_id = null, $transaction_head_id_to = null, $transaction_head_id_from = null)
    {
        return $this->getTransactionAsyncWithHttpInfo($contract_id, $sum_date, $with_layaway, $limit, $page, $upd_date_time_to, $upd_date_time_from, $customer_code, $transaction_head_division, $sort, $terminal_tran_date_time_from, $terminal_tran_date_time_to, $store_id, $transaction_head_id_to, $transaction_head_id_from)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionAsyncWithHttpInfo
     *
     * 取引情報一覧を取得します。
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $sum_date 締め日 [YYYY-MM-DD] (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_layaway 取置き情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     * @param  int $limit 一度に返すアイテム数 (上限 1000) (optional)
     * @param  int $page ページ (optional)
     * @param  string $upd_date_time_to 更新日時(To)：登録時・更新時の日時。[YYYY-MM-DDThh:mm:ssTZD] (optional)
     * @param  string $upd_date_time_from 更新日時(From)：登録時・更新時の日時。[YYYY-MM-DDThh:mm:ssTZD] (optional)
     * @param  string $customer_code 会員コード (optional)
     * @param  \OpenAPI\Client\Model\TransactionHeadDivision $transaction_head_division (optional)
     * @param  \OpenAPI\Client\Model\Sort $sort (optional)
     * @param  string $terminal_tran_date_time_from 端末取引日時(From)：端末で設定された取引日時。[YYYY-MM-DDThh:mm:ssTZD] (optional)
     * @param  string $terminal_tran_date_time_to 端末取引日時(To)：端末で設定された取引日時。[YYYY-MM-DDThh:mm:ssTZD] (optional)
     * @param  int $store_id 店舗ID (optional)
     * @param  string $transaction_head_id_to 取引ID(To) (optional)
     * @param  string $transaction_head_id_from 取引ID(From) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionAsyncWithHttpInfo($contract_id, $sum_date = null, $with_layaway = null, $limit = null, $page = null, $upd_date_time_to = null, $upd_date_time_from = null, $customer_code = null, $transaction_head_division = null, $sort = null, $terminal_tran_date_time_from = null, $terminal_tran_date_time_to = null, $store_id = null, $transaction_head_id_to = null, $transaction_head_id_from = null)
    {
        $returnType = '\OpenAPI\Client\Model\GetTransactionItem[]';
        $request = $this->getTransactionRequest($contract_id, $sum_date, $with_layaway, $limit, $page, $upd_date_time_to, $upd_date_time_from, $customer_code, $transaction_head_division, $sort, $terminal_tran_date_time_from, $terminal_tran_date_time_to, $store_id, $transaction_head_id_to, $transaction_head_id_from);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransaction'
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $sum_date 締め日 [YYYY-MM-DD] (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_layaway 取置き情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     * @param  int $limit 一度に返すアイテム数 (上限 1000) (optional)
     * @param  int $page ページ (optional)
     * @param  string $upd_date_time_to 更新日時(To)：登録時・更新時の日時。[YYYY-MM-DDThh:mm:ssTZD] (optional)
     * @param  string $upd_date_time_from 更新日時(From)：登録時・更新時の日時。[YYYY-MM-DDThh:mm:ssTZD] (optional)
     * @param  string $customer_code 会員コード (optional)
     * @param  \OpenAPI\Client\Model\TransactionHeadDivision $transaction_head_division (optional)
     * @param  \OpenAPI\Client\Model\Sort $sort (optional)
     * @param  string $terminal_tran_date_time_from 端末取引日時(From)：端末で設定された取引日時。[YYYY-MM-DDThh:mm:ssTZD] (optional)
     * @param  string $terminal_tran_date_time_to 端末取引日時(To)：端末で設定された取引日時。[YYYY-MM-DDThh:mm:ssTZD] (optional)
     * @param  int $store_id 店舗ID (optional)
     * @param  string $transaction_head_id_to 取引ID(To) (optional)
     * @param  string $transaction_head_id_from 取引ID(From) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTransactionRequest($contract_id, $sum_date = null, $with_layaway = null, $limit = null, $page = null, $upd_date_time_to = null, $upd_date_time_from = null, $customer_code = null, $transaction_head_division = null, $sort = null, $terminal_tran_date_time_from = null, $terminal_tran_date_time_to = null, $store_id = null, $transaction_head_id_to = null, $transaction_head_id_from = null)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling getTransaction'
            );
        }

        $resourcePath = '/{contract_id}/pos/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sum_date !== null) {
            if('form' === 'form' && is_array($sum_date)) {
                foreach($sum_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sum_date'] = $sum_date;
            }
        }
        // query params
        if ($with_layaway !== null) {
            if('form' === 'form' && is_array($with_layaway)) {
                foreach($with_layaway as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['with_layaway'] = $with_layaway;
            }
        }
        // query params
        if ($limit !== null) {
            if('form' === 'form' && is_array($limit)) {
                foreach($limit as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['limit'] = $limit;
            }
        }
        // query params
        if ($page !== null) {
            if('form' === 'form' && is_array($page)) {
                foreach($page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['page'] = $page;
            }
        }
        // query params
        if ($upd_date_time_to !== null) {
            if('form' === 'form' && is_array($upd_date_time_to)) {
                foreach($upd_date_time_to as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['upd_date_time-to'] = $upd_date_time_to;
            }
        }
        // query params
        if ($upd_date_time_from !== null) {
            if('form' === 'form' && is_array($upd_date_time_from)) {
                foreach($upd_date_time_from as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['upd_date_time-from'] = $upd_date_time_from;
            }
        }
        // query params
        if ($customer_code !== null) {
            if('form' === 'form' && is_array($customer_code)) {
                foreach($customer_code as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['customer_code'] = $customer_code;
            }
        }
        // query params
        if ($transaction_head_division !== null) {
            if('form' === 'form' && is_array($transaction_head_division)) {
                foreach($transaction_head_division as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['transaction_head_division'] = $transaction_head_division;
            }
        }
        // query params
        if ($sort !== null) {
            if('form' === 'form' && is_array($sort)) {
                foreach($sort as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['sort'] = $sort;
            }
        }
        // query params
        if ($terminal_tran_date_time_from !== null) {
            if('form' === 'form' && is_array($terminal_tran_date_time_from)) {
                foreach($terminal_tran_date_time_from as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['terminal_tran_date_time-from'] = $terminal_tran_date_time_from;
            }
        }
        // query params
        if ($terminal_tran_date_time_to !== null) {
            if('form' === 'form' && is_array($terminal_tran_date_time_to)) {
                foreach($terminal_tran_date_time_to as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['terminal_tran_date_time-to'] = $terminal_tran_date_time_to;
            }
        }
        // query params
        if ($store_id !== null) {
            if('form' === 'form' && is_array($store_id)) {
                foreach($store_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['store_id'] = $store_id;
            }
        }
        // query params
        if ($transaction_head_id_to !== null) {
            if('form' === 'form' && is_array($transaction_head_id_to)) {
                foreach($transaction_head_id_to as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['transaction_head_id-to'] = $transaction_head_id_to;
            }
        }
        // query params
        if ($transaction_head_id_from !== null) {
            if('form' === 'form' && is_array($transaction_head_id_from)) {
                foreach($transaction_head_id_from as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['transaction_head_id-from'] = $transaction_head_id_from;
            }
        }


        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contract_id' . '}',
                ObjectSerializer::toPathValue($contract_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionId
     *
     * 取引情報を取得します。
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $transaction_id 取引id (required)
     * @param  \OpenAPI\Client\Model\WithEnum $with_coupons クーポン情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     * @param  \OpenAPI\Client\Model\WithDetails $with_details 取引明細情報を付加するか(全項目付加する場合はall, 一部項目を付加する場合はsummary, しない場合はnone) (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_store 店舗情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_customer 会員情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetTransactionId|\OpenAPI\Client\Model\Error
     */
    public function getTransactionId($contract_id, $transaction_id, $with_coupons = null, $with_details = null, $with_store = null, $with_customer = null)
    {
        list($response) = $this->getTransactionIdWithHttpInfo($contract_id, $transaction_id, $with_coupons, $with_details, $with_store, $with_customer);
        return $response;
    }

    /**
     * Operation getTransactionIdWithHttpInfo
     *
     * 取引情報を取得します。
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $transaction_id 取引id (required)
     * @param  \OpenAPI\Client\Model\WithEnum $with_coupons クーポン情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     * @param  \OpenAPI\Client\Model\WithDetails $with_details 取引明細情報を付加するか(全項目付加する場合はall, 一部項目を付加する場合はsummary, しない場合はnone) (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_store 店舗情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_customer 会員情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetTransactionId|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionIdWithHttpInfo($contract_id, $transaction_id, $with_coupons = null, $with_details = null, $with_store = null, $with_customer = null)
    {
        $request = $this->getTransactionIdRequest($contract_id, $transaction_id, $with_coupons, $with_details, $with_store, $with_customer);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetTransactionId' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetTransactionId', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetTransactionId';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetTransactionId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionIdAsync
     *
     * 取引情報を取得します。
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $transaction_id 取引id (required)
     * @param  \OpenAPI\Client\Model\WithEnum $with_coupons クーポン情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     * @param  \OpenAPI\Client\Model\WithDetails $with_details 取引明細情報を付加するか(全項目付加する場合はall, 一部項目を付加する場合はsummary, しない場合はnone) (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_store 店舗情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_customer 会員情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionIdAsync($contract_id, $transaction_id, $with_coupons = null, $with_details = null, $with_store = null, $with_customer = null)
    {
        return $this->getTransactionIdAsyncWithHttpInfo($contract_id, $transaction_id, $with_coupons, $with_details, $with_store, $with_customer)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionIdAsyncWithHttpInfo
     *
     * 取引情報を取得します。
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $transaction_id 取引id (required)
     * @param  \OpenAPI\Client\Model\WithEnum $with_coupons クーポン情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     * @param  \OpenAPI\Client\Model\WithDetails $with_details 取引明細情報を付加するか(全項目付加する場合はall, 一部項目を付加する場合はsummary, しない場合はnone) (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_store 店舗情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_customer 会員情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionIdAsyncWithHttpInfo($contract_id, $transaction_id, $with_coupons = null, $with_details = null, $with_store = null, $with_customer = null)
    {
        $returnType = '\OpenAPI\Client\Model\GetTransactionId';
        $request = $this->getTransactionIdRequest($contract_id, $transaction_id, $with_coupons, $with_details, $with_store, $with_customer);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionId'
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $transaction_id 取引id (required)
     * @param  \OpenAPI\Client\Model\WithEnum $with_coupons クーポン情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     * @param  \OpenAPI\Client\Model\WithDetails $with_details 取引明細情報を付加するか(全項目付加する場合はall, 一部項目を付加する場合はsummary, しない場合はnone) (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_store 店舗情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     * @param  \OpenAPI\Client\Model\WithEnum $with_customer 会員情報を付加するか(付加する場合はall, しない場合はnone) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTransactionIdRequest($contract_id, $transaction_id, $with_coupons = null, $with_details = null, $with_store = null, $with_customer = null)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling getTransactionId'
            );
        }
        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling getTransactionId'
            );
        }

        $resourcePath = '/{contract_id}/pos/transactions/{transaction_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($with_coupons !== null) {
            if('form' === 'form' && is_array($with_coupons)) {
                foreach($with_coupons as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['with_coupons'] = $with_coupons;
            }
        }
        // query params
        if ($with_details !== null) {
            if('form' === 'form' && is_array($with_details)) {
                foreach($with_details as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['with_details'] = $with_details;
            }
        }
        // query params
        if ($with_store !== null) {
            if('form' === 'form' && is_array($with_store)) {
                foreach($with_store as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['with_store'] = $with_store;
            }
        }
        // query params
        if ($with_customer !== null) {
            if('form' === 'form' && is_array($with_customer)) {
                foreach($with_customer as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['with_customer'] = $with_customer;
            }
        }


        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contract_id' . '}',
                ObjectSerializer::toPathValue($contract_id),
                $resourcePath
            );
        }
        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transaction_id' . '}',
                ObjectSerializer::toPathValue($transaction_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation postCreateCoupons
     *
     * @param  string $contract_id 契約id (required)
     * @param  \OpenAPI\Client\Model\PostCreateCoupons $post_create_coupons post_create_coupons (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Coupon
     */
    public function postCreateCoupons($contract_id, $post_create_coupons)
    {
        list($response) = $this->postCreateCouponsWithHttpInfo($contract_id, $post_create_coupons);
        return $response;
    }

    /**
     * Operation postCreateCouponsWithHttpInfo
     *
     * @param  string $contract_id 契約id (required)
     * @param  \OpenAPI\Client\Model\PostCreateCoupons $post_create_coupons (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Coupon, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCreateCouponsWithHttpInfo($contract_id, $post_create_coupons)
    {
        $request = $this->postCreateCouponsRequest($contract_id, $post_create_coupons);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Coupon' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Coupon', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Coupon';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Coupon',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation postCreateCouponsAsync
     *
     * @param  string $contract_id 契約id (required)
     * @param  \OpenAPI\Client\Model\PostCreateCoupons $post_create_coupons (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCreateCouponsAsync($contract_id, $post_create_coupons)
    {
        return $this->postCreateCouponsAsyncWithHttpInfo($contract_id, $post_create_coupons)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation postCreateCouponsAsyncWithHttpInfo
     *
     * @param  string $contract_id 契約id (required)
     * @param  \OpenAPI\Client\Model\PostCreateCoupons $post_create_coupons (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function postCreateCouponsAsyncWithHttpInfo($contract_id, $post_create_coupons)
    {
        $returnType = '\OpenAPI\Client\Model\Coupon';
        $request = $this->postCreateCouponsRequest($contract_id, $post_create_coupons);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'postCreateCoupons'
     *
     * @param  string $contract_id 契約id (required)
     * @param  \OpenAPI\Client\Model\PostCreateCoupons $post_create_coupons (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function postCreateCouponsRequest($contract_id, $post_create_coupons)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling postCreateCoupons'
            );
        }
        // verify the required parameter 'post_create_coupons' is set
        if ($post_create_coupons === null || (is_array($post_create_coupons) && count($post_create_coupons) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_create_coupons when calling postCreateCoupons'
            );
        }

        $resourcePath = '/{contract_id}/pos/coupons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contract_id' . '}',
                ObjectSerializer::toPathValue($contract_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($post_create_coupons)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($post_create_coupons));
            } else {
                $httpBody = $post_create_coupons;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCustomerPoint
     *
     * 会員ポイント更新
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $customer_id 顧客id (required)
     * @param  \OpenAPI\Client\Model\UpdateCustomerPointRequest $update_customer_point_request update_customer_point_request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UpdateCustomerPointResponse|\OpenAPI\Client\Model\Error
     */
    public function updateCustomerPoint($contract_id, $customer_id, $update_customer_point_request = null)
    {
        list($response) = $this->updateCustomerPointWithHttpInfo($contract_id, $customer_id, $update_customer_point_request);
        return $response;
    }

    /**
     * Operation updateCustomerPointWithHttpInfo
     *
     * 会員ポイント更新
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $customer_id 顧客id (required)
     * @param  \OpenAPI\Client\Model\UpdateCustomerPointRequest $update_customer_point_request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UpdateCustomerPointResponse|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCustomerPointWithHttpInfo($contract_id, $customer_id, $update_customer_point_request = null)
    {
        $request = $this->updateCustomerPointRequest($contract_id, $customer_id, $update_customer_point_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\UpdateCustomerPointResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UpdateCustomerPointResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\UpdateCustomerPointResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UpdateCustomerPointResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCustomerPointAsync
     *
     * 会員ポイント更新
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $customer_id 顧客id (required)
     * @param  \OpenAPI\Client\Model\UpdateCustomerPointRequest $update_customer_point_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomerPointAsync($contract_id, $customer_id, $update_customer_point_request = null)
    {
        return $this->updateCustomerPointAsyncWithHttpInfo($contract_id, $customer_id, $update_customer_point_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCustomerPointAsyncWithHttpInfo
     *
     * 会員ポイント更新
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $customer_id 顧客id (required)
     * @param  \OpenAPI\Client\Model\UpdateCustomerPointRequest $update_customer_point_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomerPointAsyncWithHttpInfo($contract_id, $customer_id, $update_customer_point_request = null)
    {
        $returnType = '\OpenAPI\Client\Model\UpdateCustomerPointResponse';
        $request = $this->updateCustomerPointRequest($contract_id, $customer_id, $update_customer_point_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCustomerPoint'
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $customer_id 顧客id (required)
     * @param  \OpenAPI\Client\Model\UpdateCustomerPointRequest $update_customer_point_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCustomerPointRequest($contract_id, $customer_id, $update_customer_point_request = null)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling updateCustomerPoint'
            );
        }
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling updateCustomerPoint'
            );
        }

        $resourcePath = '/{contract_id}/pos/customers/{customer_id}/point';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contract_id' . '}',
                ObjectSerializer::toPathValue($contract_id),
                $resourcePath
            );
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_id' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_customer_point_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_customer_point_request));
            } else {
                $httpBody = $update_customer_point_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCustomerPointRelative
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $customer_id 顧客id (required)
     * @param  \OpenAPI\Client\Model\UpdateCustomerPointRequest $update_customer_point_request update_customer_point_request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UpdateCustomerPointResponse|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function updateCustomerPointRelative($contract_id, $customer_id, $update_customer_point_request = null)
    {
        list($response) = $this->updateCustomerPointRelativeWithHttpInfo($contract_id, $customer_id, $update_customer_point_request);
        return $response;
    }

    /**
     * Operation updateCustomerPointRelativeWithHttpInfo
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $customer_id 顧客id (required)
     * @param  \OpenAPI\Client\Model\UpdateCustomerPointRequest $update_customer_point_request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UpdateCustomerPointResponse|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCustomerPointRelativeWithHttpInfo($contract_id, $customer_id, $update_customer_point_request = null)
    {
        $request = $this->updateCustomerPointRelativeRequest($contract_id, $customer_id, $update_customer_point_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\UpdateCustomerPointResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UpdateCustomerPointResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\UpdateCustomerPointResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UpdateCustomerPointResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCustomerPointRelativeAsync
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $customer_id 顧客id (required)
     * @param  \OpenAPI\Client\Model\UpdateCustomerPointRequest $update_customer_point_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomerPointRelativeAsync($contract_id, $customer_id, $update_customer_point_request = null)
    {
        return $this->updateCustomerPointRelativeAsyncWithHttpInfo($contract_id, $customer_id, $update_customer_point_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCustomerPointRelativeAsyncWithHttpInfo
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $customer_id 顧客id (required)
     * @param  \OpenAPI\Client\Model\UpdateCustomerPointRequest $update_customer_point_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomerPointRelativeAsyncWithHttpInfo($contract_id, $customer_id, $update_customer_point_request = null)
    {
        $returnType = '\OpenAPI\Client\Model\UpdateCustomerPointResponse';
        $request = $this->updateCustomerPointRelativeRequest($contract_id, $customer_id, $update_customer_point_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCustomerPointRelative'
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $customer_id 顧客id (required)
     * @param  \OpenAPI\Client\Model\UpdateCustomerPointRequest $update_customer_point_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCustomerPointRelativeRequest($contract_id, $customer_id, $update_customer_point_request = null)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling updateCustomerPointRelative'
            );
        }
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling updateCustomerPointRelative'
            );
        }

        $resourcePath = '/{contract_id}/pos/customers/{customer_id}/point/add';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contract_id' . '}',
                ObjectSerializer::toPathValue($contract_id),
                $resourcePath
            );
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_id' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_customer_point_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_customer_point_request));
            } else {
                $httpBody = $update_customer_point_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCustomers
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $customer_id 顧客id (required)
     * @param  \OpenAPI\Client\Model\PatchCustomers $patch_customers patch_customers (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CustomersResponseOfCreate
     */
    public function updateCustomers($contract_id, $customer_id, $patch_customers = null)
    {
        list($response) = $this->updateCustomersWithHttpInfo($contract_id, $customer_id, $patch_customers);
        return $response;
    }

    /**
     * Operation updateCustomersWithHttpInfo
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $customer_id 顧客id (required)
     * @param  \OpenAPI\Client\Model\PatchCustomers $patch_customers (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CustomersResponseOfCreate, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCustomersWithHttpInfo($contract_id, $customer_id, $patch_customers = null)
    {
        $request = $this->updateCustomersRequest($contract_id, $customer_id, $patch_customers);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CustomersResponseOfCreate' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CustomersResponseOfCreate', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CustomersResponseOfCreate';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CustomersResponseOfCreate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCustomersAsync
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $customer_id 顧客id (required)
     * @param  \OpenAPI\Client\Model\PatchCustomers $patch_customers (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomersAsync($contract_id, $customer_id, $patch_customers = null)
    {
        return $this->updateCustomersAsyncWithHttpInfo($contract_id, $customer_id, $patch_customers)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCustomersAsyncWithHttpInfo
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $customer_id 顧客id (required)
     * @param  \OpenAPI\Client\Model\PatchCustomers $patch_customers (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCustomersAsyncWithHttpInfo($contract_id, $customer_id, $patch_customers = null)
    {
        $returnType = '\OpenAPI\Client\Model\CustomersResponseOfCreate';
        $request = $this->updateCustomersRequest($contract_id, $customer_id, $patch_customers);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCustomers'
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $customer_id 顧客id (required)
     * @param  \OpenAPI\Client\Model\PatchCustomers $patch_customers (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateCustomersRequest($contract_id, $customer_id, $patch_customers = null)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling updateCustomers'
            );
        }
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null || (is_array($customer_id) && count($customer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $customer_id when calling updateCustomers'
            );
        }

        $resourcePath = '/{contract_id}/pos/customers/{customer_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contract_id' . '}',
                ObjectSerializer::toPathValue($contract_id),
                $resourcePath
            );
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'customer_id' . '}',
                ObjectSerializer::toPathValue($customer_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($patch_customers)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($patch_customers));
            } else {
                $httpBody = $patch_customers;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateStore
     *
     * 店舗更新
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $store_id 店舗id (required)
     * @param  \OpenAPI\Client\Model\UpdateStoreRequest $update_store_request update_store_request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UpdateStoreResponse|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error
     */
    public function updateStore($contract_id, $store_id, $update_store_request = null)
    {
        list($response) = $this->updateStoreWithHttpInfo($contract_id, $store_id, $update_store_request);
        return $response;
    }

    /**
     * Operation updateStoreWithHttpInfo
     *
     * 店舗更新
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $store_id 店舗id (required)
     * @param  \OpenAPI\Client\Model\UpdateStoreRequest $update_store_request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UpdateStoreResponse|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateStoreWithHttpInfo($contract_id, $store_id, $update_store_request = null)
    {
        $request = $this->updateStoreRequest($contract_id, $store_id, $update_store_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\UpdateStoreResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UpdateStoreResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\UpdateStoreResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UpdateStoreResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateStoreAsync
     *
     * 店舗更新
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $store_id 店舗id (required)
     * @param  \OpenAPI\Client\Model\UpdateStoreRequest $update_store_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateStoreAsync($contract_id, $store_id, $update_store_request = null)
    {
        return $this->updateStoreAsyncWithHttpInfo($contract_id, $store_id, $update_store_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateStoreAsyncWithHttpInfo
     *
     * 店舗更新
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $store_id 店舗id (required)
     * @param  \OpenAPI\Client\Model\UpdateStoreRequest $update_store_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateStoreAsyncWithHttpInfo($contract_id, $store_id, $update_store_request = null)
    {
        $returnType = '\OpenAPI\Client\Model\UpdateStoreResponse';
        $request = $this->updateStoreRequest($contract_id, $store_id, $update_store_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateStore'
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $store_id 店舗id (required)
     * @param  \OpenAPI\Client\Model\UpdateStoreRequest $update_store_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateStoreRequest($contract_id, $store_id, $update_store_request = null)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling updateStore'
            );
        }
        // verify the required parameter 'store_id' is set
        if ($store_id === null || (is_array($store_id) && count($store_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $store_id when calling updateStore'
            );
        }

        $resourcePath = '/{contract_id}/pos/stores/{store_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contract_id' . '}',
                ObjectSerializer::toPathValue($contract_id),
                $resourcePath
            );
        }
        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                '{' . 'store_id' . '}',
                ObjectSerializer::toPathValue($store_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_store_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_store_request));
            } else {
                $httpBody = $update_store_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateTransactionForCustomer
     *
     * 取引会員更新
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $transaction_id 取引id (required)
     * @param  \OpenAPI\Client\Model\UpdateTransactionForCustomerRequest $update_transaction_for_customer_request update_transaction_for_customer_request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetTransactionId
     */
    public function updateTransactionForCustomer($contract_id, $transaction_id, $update_transaction_for_customer_request = null)
    {
        list($response) = $this->updateTransactionForCustomerWithHttpInfo($contract_id, $transaction_id, $update_transaction_for_customer_request);
        return $response;
    }

    /**
     * Operation updateTransactionForCustomerWithHttpInfo
     *
     * 取引会員更新
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $transaction_id 取引id (required)
     * @param  \OpenAPI\Client\Model\UpdateTransactionForCustomerRequest $update_transaction_for_customer_request (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetTransactionId, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateTransactionForCustomerWithHttpInfo($contract_id, $transaction_id, $update_transaction_for_customer_request = null)
    {
        $request = $this->updateTransactionForCustomerRequest($contract_id, $transaction_id, $update_transaction_for_customer_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetTransactionId' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetTransactionId', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\GetTransactionId';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetTransactionId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateTransactionForCustomerAsync
     *
     * 取引会員更新
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $transaction_id 取引id (required)
     * @param  \OpenAPI\Client\Model\UpdateTransactionForCustomerRequest $update_transaction_for_customer_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTransactionForCustomerAsync($contract_id, $transaction_id, $update_transaction_for_customer_request = null)
    {
        return $this->updateTransactionForCustomerAsyncWithHttpInfo($contract_id, $transaction_id, $update_transaction_for_customer_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateTransactionForCustomerAsyncWithHttpInfo
     *
     * 取引会員更新
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $transaction_id 取引id (required)
     * @param  \OpenAPI\Client\Model\UpdateTransactionForCustomerRequest $update_transaction_for_customer_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateTransactionForCustomerAsyncWithHttpInfo($contract_id, $transaction_id, $update_transaction_for_customer_request = null)
    {
        $returnType = '\OpenAPI\Client\Model\GetTransactionId';
        $request = $this->updateTransactionForCustomerRequest($contract_id, $transaction_id, $update_transaction_for_customer_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateTransactionForCustomer'
     *
     * @param  string $contract_id 契約id (required)
     * @param  string $transaction_id 取引id (required)
     * @param  \OpenAPI\Client\Model\UpdateTransactionForCustomerRequest $update_transaction_for_customer_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateTransactionForCustomerRequest($contract_id, $transaction_id, $update_transaction_for_customer_request = null)
    {
        // verify the required parameter 'contract_id' is set
        if ($contract_id === null || (is_array($contract_id) && count($contract_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract_id when calling updateTransactionForCustomer'
            );
        }
        // verify the required parameter 'transaction_id' is set
        if ($transaction_id === null || (is_array($transaction_id) && count($transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_id when calling updateTransactionForCustomer'
            );
        }

        $resourcePath = '/{contract_id}/pos/transactions/{transaction_id}/customer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($contract_id !== null) {
            $resourcePath = str_replace(
                '{' . 'contract_id' . '}',
                ObjectSerializer::toPathValue($contract_id),
                $resourcePath
            );
        }
        // path params
        if ($transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'transaction_id' . '}',
                ObjectSerializer::toPathValue($transaction_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($update_transaction_for_customer_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($update_transaction_for_customer_request));
            } else {
                $httpBody = $update_transaction_for_customer_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
