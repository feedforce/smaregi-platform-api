=begin
#スマレジ

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.1

=end

require 'date'
require 'time'

module OpenapiClient
  class UpdateStoreRequest
    attr_accessor :store_code

    attr_accessor :store_name

    attr_accessor :store_abbr

    attr_accessor :print_receipt_store_name

    attr_accessor :print_stock_receipt_store_name

    attr_accessor :division

    attr_accessor :post_code

    attr_accessor :address

    attr_accessor :phone_number

    attr_accessor :fax_number

    attr_accessor :mail_address

    attr_accessor :homepage

    attr_accessor :temp_tran_mail_address

    attr_accessor :price_change_flag

    attr_accessor :sell_division

    attr_accessor :sum_proc_division

    attr_accessor :sum_date_change_time

    attr_accessor :sum_ref_column

    attr_accessor :point_not_applicable

    attr_accessor :tax_free_division

    attr_accessor :max_bundle_product_count

    attr_accessor :max_discount_rate

    attr_accessor :carriage_display_flag

    attr_accessor :terminal_adjustment_cash_flag

    attr_accessor :terminal_check_cash_flag

    attr_accessor :waiter_adjustment_division

    attr_accessor :saving_auto_division

    attr_accessor :saving_auto_price

    attr_accessor :cancel_setting_division

    attr_accessor :rounding_division

    attr_accessor :discount_rounding_division

    attr_accessor :card_company_select_division

    attr_accessor :gift_receipt_valid_days

    attr_accessor :tax_label_normal

    attr_accessor :tax_label_reduce

    attr_accessor :display_sequence

    attr_accessor :face_payment_use_division

    attr_accessor :point_condition

    attr_accessor :receipt_print_info

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'store_code' => :'storeCode',
        :'store_name' => :'storeName',
        :'store_abbr' => :'storeAbbr',
        :'print_receipt_store_name' => :'printReceiptStoreName',
        :'print_stock_receipt_store_name' => :'printStockReceiptStoreName',
        :'division' => :'division',
        :'post_code' => :'postCode',
        :'address' => :'address',
        :'phone_number' => :'phoneNumber',
        :'fax_number' => :'faxNumber',
        :'mail_address' => :'mailAddress',
        :'homepage' => :'homepage',
        :'temp_tran_mail_address' => :'tempTranMailAddress',
        :'price_change_flag' => :'priceChangeFlag',
        :'sell_division' => :'sellDivision',
        :'sum_proc_division' => :'sumProcDivision',
        :'sum_date_change_time' => :'sumDateChangeTime',
        :'sum_ref_column' => :'sumRefColumn',
        :'point_not_applicable' => :'pointNotApplicable',
        :'tax_free_division' => :'taxFreeDivision',
        :'max_bundle_product_count' => :'maxBundleProductCount',
        :'max_discount_rate' => :'maxDiscountRate',
        :'carriage_display_flag' => :'carriageDisplayFlag',
        :'terminal_adjustment_cash_flag' => :'terminalAdjustmentCashFlag',
        :'terminal_check_cash_flag' => :'terminalCheckCashFlag',
        :'waiter_adjustment_division' => :'waiterAdjustmentDivision',
        :'saving_auto_division' => :'savingAutoDivision',
        :'saving_auto_price' => :'savingAutoPrice',
        :'cancel_setting_division' => :'cancelSettingDivision',
        :'rounding_division' => :'roundingDivision',
        :'discount_rounding_division' => :'discountRoundingDivision',
        :'card_company_select_division' => :'cardCompanySelectDivision',
        :'gift_receipt_valid_days' => :'giftReceiptValidDays',
        :'tax_label_normal' => :'taxLabelNormal',
        :'tax_label_reduce' => :'taxLabelReduce',
        :'display_sequence' => :'displaySequence',
        :'face_payment_use_division' => :'facePaymentUseDivision',
        :'point_condition' => :'pointCondition',
        :'receipt_print_info' => :'receiptPrintInfo'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'store_code' => :'String',
        :'store_name' => :'String',
        :'store_abbr' => :'String',
        :'print_receipt_store_name' => :'String',
        :'print_stock_receipt_store_name' => :'String',
        :'division' => :'StoreDivision',
        :'post_code' => :'String',
        :'address' => :'String',
        :'phone_number' => :'String',
        :'fax_number' => :'String',
        :'mail_address' => :'String',
        :'homepage' => :'String',
        :'temp_tran_mail_address' => :'String',
        :'price_change_flag' => :'Float',
        :'sell_division' => :'Float',
        :'sum_proc_division' => :'Float',
        :'sum_date_change_time' => :'String',
        :'sum_ref_column' => :'Float',
        :'point_not_applicable' => :'Float',
        :'tax_free_division' => :'Float',
        :'max_bundle_product_count' => :'Float',
        :'max_discount_rate' => :'String',
        :'carriage_display_flag' => :'Float',
        :'terminal_adjustment_cash_flag' => :'Float',
        :'terminal_check_cash_flag' => :'Float',
        :'waiter_adjustment_division' => :'Float',
        :'saving_auto_division' => :'Float',
        :'saving_auto_price' => :'String',
        :'cancel_setting_division' => :'Float',
        :'rounding_division' => :'String',
        :'discount_rounding_division' => :'Float',
        :'card_company_select_division' => :'Float',
        :'gift_receipt_valid_days' => :'String',
        :'tax_label_normal' => :'String',
        :'tax_label_reduce' => :'String',
        :'display_sequence' => :'String',
        :'face_payment_use_division' => :'Float',
        :'point_condition' => :'PointCondition',
        :'receipt_print_info' => :'UpdateStoreRequestReceiptPrintInfo'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::UpdateStoreRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::UpdateStoreRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'store_code')
        self.store_code = attributes[:'store_code']
      end

      if attributes.key?(:'store_name')
        self.store_name = attributes[:'store_name']
      end

      if attributes.key?(:'store_abbr')
        self.store_abbr = attributes[:'store_abbr']
      end

      if attributes.key?(:'print_receipt_store_name')
        self.print_receipt_store_name = attributes[:'print_receipt_store_name']
      end

      if attributes.key?(:'print_stock_receipt_store_name')
        self.print_stock_receipt_store_name = attributes[:'print_stock_receipt_store_name']
      end

      if attributes.key?(:'division')
        self.division = attributes[:'division']
      end

      if attributes.key?(:'post_code')
        self.post_code = attributes[:'post_code']
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'phone_number')
        self.phone_number = attributes[:'phone_number']
      end

      if attributes.key?(:'fax_number')
        self.fax_number = attributes[:'fax_number']
      end

      if attributes.key?(:'mail_address')
        self.mail_address = attributes[:'mail_address']
      end

      if attributes.key?(:'homepage')
        self.homepage = attributes[:'homepage']
      end

      if attributes.key?(:'temp_tran_mail_address')
        self.temp_tran_mail_address = attributes[:'temp_tran_mail_address']
      end

      if attributes.key?(:'price_change_flag')
        self.price_change_flag = attributes[:'price_change_flag']
      end

      if attributes.key?(:'sell_division')
        self.sell_division = attributes[:'sell_division']
      end

      if attributes.key?(:'sum_proc_division')
        self.sum_proc_division = attributes[:'sum_proc_division']
      end

      if attributes.key?(:'sum_date_change_time')
        self.sum_date_change_time = attributes[:'sum_date_change_time']
      end

      if attributes.key?(:'sum_ref_column')
        self.sum_ref_column = attributes[:'sum_ref_column']
      end

      if attributes.key?(:'point_not_applicable')
        self.point_not_applicable = attributes[:'point_not_applicable']
      end

      if attributes.key?(:'tax_free_division')
        self.tax_free_division = attributes[:'tax_free_division']
      end

      if attributes.key?(:'max_bundle_product_count')
        self.max_bundle_product_count = attributes[:'max_bundle_product_count']
      end

      if attributes.key?(:'max_discount_rate')
        self.max_discount_rate = attributes[:'max_discount_rate']
      end

      if attributes.key?(:'carriage_display_flag')
        self.carriage_display_flag = attributes[:'carriage_display_flag']
      end

      if attributes.key?(:'terminal_adjustment_cash_flag')
        self.terminal_adjustment_cash_flag = attributes[:'terminal_adjustment_cash_flag']
      end

      if attributes.key?(:'terminal_check_cash_flag')
        self.terminal_check_cash_flag = attributes[:'terminal_check_cash_flag']
      end

      if attributes.key?(:'waiter_adjustment_division')
        self.waiter_adjustment_division = attributes[:'waiter_adjustment_division']
      end

      if attributes.key?(:'saving_auto_division')
        self.saving_auto_division = attributes[:'saving_auto_division']
      end

      if attributes.key?(:'saving_auto_price')
        self.saving_auto_price = attributes[:'saving_auto_price']
      end

      if attributes.key?(:'cancel_setting_division')
        self.cancel_setting_division = attributes[:'cancel_setting_division']
      end

      if attributes.key?(:'rounding_division')
        self.rounding_division = attributes[:'rounding_division']
      end

      if attributes.key?(:'discount_rounding_division')
        self.discount_rounding_division = attributes[:'discount_rounding_division']
      end

      if attributes.key?(:'card_company_select_division')
        self.card_company_select_division = attributes[:'card_company_select_division']
      end

      if attributes.key?(:'gift_receipt_valid_days')
        self.gift_receipt_valid_days = attributes[:'gift_receipt_valid_days']
      end

      if attributes.key?(:'tax_label_normal')
        self.tax_label_normal = attributes[:'tax_label_normal']
      end

      if attributes.key?(:'tax_label_reduce')
        self.tax_label_reduce = attributes[:'tax_label_reduce']
      end

      if attributes.key?(:'display_sequence')
        self.display_sequence = attributes[:'display_sequence']
      end

      if attributes.key?(:'face_payment_use_division')
        self.face_payment_use_division = attributes[:'face_payment_use_division']
      end

      if attributes.key?(:'point_condition')
        self.point_condition = attributes[:'point_condition']
      end

      if attributes.key?(:'receipt_print_info')
        self.receipt_print_info = attributes[:'receipt_print_info']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@store_code.nil? && @store_code.to_s.length < 1
        invalid_properties.push('invalid value for "store_code", the character length must be great than or equal to 1.')
      end

      if !@store_name.nil? && @store_name.to_s.length < 1
        invalid_properties.push('invalid value for "store_name", the character length must be great than or equal to 1.')
      end

      if !@store_abbr.nil? && @store_abbr.to_s.length < 1
        invalid_properties.push('invalid value for "store_abbr", the character length must be great than or equal to 1.')
      end

      if !@print_receipt_store_name.nil? && @print_receipt_store_name.to_s.length < 1
        invalid_properties.push('invalid value for "print_receipt_store_name", the character length must be great than or equal to 1.')
      end

      if !@print_stock_receipt_store_name.nil? && @print_stock_receipt_store_name.to_s.length < 1
        invalid_properties.push('invalid value for "print_stock_receipt_store_name", the character length must be great than or equal to 1.')
      end

      if !@post_code.nil? && @post_code.to_s.length < 1
        invalid_properties.push('invalid value for "post_code", the character length must be great than or equal to 1.')
      end

      if !@address.nil? && @address.to_s.length < 1
        invalid_properties.push('invalid value for "address", the character length must be great than or equal to 1.')
      end

      if !@phone_number.nil? && @phone_number.to_s.length < 1
        invalid_properties.push('invalid value for "phone_number", the character length must be great than or equal to 1.')
      end

      if !@fax_number.nil? && @fax_number.to_s.length < 1
        invalid_properties.push('invalid value for "fax_number", the character length must be great than or equal to 1.')
      end

      if !@mail_address.nil? && @mail_address.to_s.length < 1
        invalid_properties.push('invalid value for "mail_address", the character length must be great than or equal to 1.')
      end

      if !@homepage.nil? && @homepage.to_s.length < 1
        invalid_properties.push('invalid value for "homepage", the character length must be great than or equal to 1.')
      end

      if !@temp_tran_mail_address.nil? && @temp_tran_mail_address.to_s.length < 1
        invalid_properties.push('invalid value for "temp_tran_mail_address", the character length must be great than or equal to 1.')
      end

      if !@sum_date_change_time.nil? && @sum_date_change_time.to_s.length < 1
        invalid_properties.push('invalid value for "sum_date_change_time", the character length must be great than or equal to 1.')
      end

      if !@max_discount_rate.nil? && @max_discount_rate.to_s.length < 1
        invalid_properties.push('invalid value for "max_discount_rate", the character length must be great than or equal to 1.')
      end

      if !@saving_auto_price.nil? && @saving_auto_price.to_s.length < 1
        invalid_properties.push('invalid value for "saving_auto_price", the character length must be great than or equal to 1.')
      end

      if !@rounding_division.nil? && @rounding_division.to_s.length < 1
        invalid_properties.push('invalid value for "rounding_division", the character length must be great than or equal to 1.')
      end

      if !@gift_receipt_valid_days.nil? && @gift_receipt_valid_days.to_s.length < 1
        invalid_properties.push('invalid value for "gift_receipt_valid_days", the character length must be great than or equal to 1.')
      end

      if !@tax_label_normal.nil? && @tax_label_normal.to_s.length < 1
        invalid_properties.push('invalid value for "tax_label_normal", the character length must be great than or equal to 1.')
      end

      if !@tax_label_reduce.nil? && @tax_label_reduce.to_s.length < 1
        invalid_properties.push('invalid value for "tax_label_reduce", the character length must be great than or equal to 1.')
      end

      if !@display_sequence.nil? && @display_sequence.to_s.length < 1
        invalid_properties.push('invalid value for "display_sequence", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@store_code.nil? && @store_code.to_s.length < 1
      return false if !@store_name.nil? && @store_name.to_s.length < 1
      return false if !@store_abbr.nil? && @store_abbr.to_s.length < 1
      return false if !@print_receipt_store_name.nil? && @print_receipt_store_name.to_s.length < 1
      return false if !@print_stock_receipt_store_name.nil? && @print_stock_receipt_store_name.to_s.length < 1
      return false if !@post_code.nil? && @post_code.to_s.length < 1
      return false if !@address.nil? && @address.to_s.length < 1
      return false if !@phone_number.nil? && @phone_number.to_s.length < 1
      return false if !@fax_number.nil? && @fax_number.to_s.length < 1
      return false if !@mail_address.nil? && @mail_address.to_s.length < 1
      return false if !@homepage.nil? && @homepage.to_s.length < 1
      return false if !@temp_tran_mail_address.nil? && @temp_tran_mail_address.to_s.length < 1
      return false if !@sum_date_change_time.nil? && @sum_date_change_time.to_s.length < 1
      return false if !@max_discount_rate.nil? && @max_discount_rate.to_s.length < 1
      return false if !@saving_auto_price.nil? && @saving_auto_price.to_s.length < 1
      return false if !@rounding_division.nil? && @rounding_division.to_s.length < 1
      return false if !@gift_receipt_valid_days.nil? && @gift_receipt_valid_days.to_s.length < 1
      return false if !@tax_label_normal.nil? && @tax_label_normal.to_s.length < 1
      return false if !@tax_label_reduce.nil? && @tax_label_reduce.to_s.length < 1
      return false if !@display_sequence.nil? && @display_sequence.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] store_code Value to be assigned
    def store_code=(store_code)
      if !store_code.nil? && store_code.to_s.length < 1
        fail ArgumentError, 'invalid value for "store_code", the character length must be great than or equal to 1.'
      end

      @store_code = store_code
    end

    # Custom attribute writer method with validation
    # @param [Object] store_name Value to be assigned
    def store_name=(store_name)
      if !store_name.nil? && store_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "store_name", the character length must be great than or equal to 1.'
      end

      @store_name = store_name
    end

    # Custom attribute writer method with validation
    # @param [Object] store_abbr Value to be assigned
    def store_abbr=(store_abbr)
      if !store_abbr.nil? && store_abbr.to_s.length < 1
        fail ArgumentError, 'invalid value for "store_abbr", the character length must be great than or equal to 1.'
      end

      @store_abbr = store_abbr
    end

    # Custom attribute writer method with validation
    # @param [Object] print_receipt_store_name Value to be assigned
    def print_receipt_store_name=(print_receipt_store_name)
      if !print_receipt_store_name.nil? && print_receipt_store_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "print_receipt_store_name", the character length must be great than or equal to 1.'
      end

      @print_receipt_store_name = print_receipt_store_name
    end

    # Custom attribute writer method with validation
    # @param [Object] print_stock_receipt_store_name Value to be assigned
    def print_stock_receipt_store_name=(print_stock_receipt_store_name)
      if !print_stock_receipt_store_name.nil? && print_stock_receipt_store_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "print_stock_receipt_store_name", the character length must be great than or equal to 1.'
      end

      @print_stock_receipt_store_name = print_stock_receipt_store_name
    end

    # Custom attribute writer method with validation
    # @param [Object] post_code Value to be assigned
    def post_code=(post_code)
      if !post_code.nil? && post_code.to_s.length < 1
        fail ArgumentError, 'invalid value for "post_code", the character length must be great than or equal to 1.'
      end

      @post_code = post_code
    end

    # Custom attribute writer method with validation
    # @param [Object] address Value to be assigned
    def address=(address)
      if !address.nil? && address.to_s.length < 1
        fail ArgumentError, 'invalid value for "address", the character length must be great than or equal to 1.'
      end

      @address = address
    end

    # Custom attribute writer method with validation
    # @param [Object] phone_number Value to be assigned
    def phone_number=(phone_number)
      if !phone_number.nil? && phone_number.to_s.length < 1
        fail ArgumentError, 'invalid value for "phone_number", the character length must be great than or equal to 1.'
      end

      @phone_number = phone_number
    end

    # Custom attribute writer method with validation
    # @param [Object] fax_number Value to be assigned
    def fax_number=(fax_number)
      if !fax_number.nil? && fax_number.to_s.length < 1
        fail ArgumentError, 'invalid value for "fax_number", the character length must be great than or equal to 1.'
      end

      @fax_number = fax_number
    end

    # Custom attribute writer method with validation
    # @param [Object] mail_address Value to be assigned
    def mail_address=(mail_address)
      if !mail_address.nil? && mail_address.to_s.length < 1
        fail ArgumentError, 'invalid value for "mail_address", the character length must be great than or equal to 1.'
      end

      @mail_address = mail_address
    end

    # Custom attribute writer method with validation
    # @param [Object] homepage Value to be assigned
    def homepage=(homepage)
      if !homepage.nil? && homepage.to_s.length < 1
        fail ArgumentError, 'invalid value for "homepage", the character length must be great than or equal to 1.'
      end

      @homepage = homepage
    end

    # Custom attribute writer method with validation
    # @param [Object] temp_tran_mail_address Value to be assigned
    def temp_tran_mail_address=(temp_tran_mail_address)
      if !temp_tran_mail_address.nil? && temp_tran_mail_address.to_s.length < 1
        fail ArgumentError, 'invalid value for "temp_tran_mail_address", the character length must be great than or equal to 1.'
      end

      @temp_tran_mail_address = temp_tran_mail_address
    end

    # Custom attribute writer method with validation
    # @param [Object] sum_date_change_time Value to be assigned
    def sum_date_change_time=(sum_date_change_time)
      if !sum_date_change_time.nil? && sum_date_change_time.to_s.length < 1
        fail ArgumentError, 'invalid value for "sum_date_change_time", the character length must be great than or equal to 1.'
      end

      @sum_date_change_time = sum_date_change_time
    end

    # Custom attribute writer method with validation
    # @param [Object] max_discount_rate Value to be assigned
    def max_discount_rate=(max_discount_rate)
      if !max_discount_rate.nil? && max_discount_rate.to_s.length < 1
        fail ArgumentError, 'invalid value for "max_discount_rate", the character length must be great than or equal to 1.'
      end

      @max_discount_rate = max_discount_rate
    end

    # Custom attribute writer method with validation
    # @param [Object] saving_auto_price Value to be assigned
    def saving_auto_price=(saving_auto_price)
      if !saving_auto_price.nil? && saving_auto_price.to_s.length < 1
        fail ArgumentError, 'invalid value for "saving_auto_price", the character length must be great than or equal to 1.'
      end

      @saving_auto_price = saving_auto_price
    end

    # Custom attribute writer method with validation
    # @param [Object] rounding_division Value to be assigned
    def rounding_division=(rounding_division)
      if !rounding_division.nil? && rounding_division.to_s.length < 1
        fail ArgumentError, 'invalid value for "rounding_division", the character length must be great than or equal to 1.'
      end

      @rounding_division = rounding_division
    end

    # Custom attribute writer method with validation
    # @param [Object] gift_receipt_valid_days Value to be assigned
    def gift_receipt_valid_days=(gift_receipt_valid_days)
      if !gift_receipt_valid_days.nil? && gift_receipt_valid_days.to_s.length < 1
        fail ArgumentError, 'invalid value for "gift_receipt_valid_days", the character length must be great than or equal to 1.'
      end

      @gift_receipt_valid_days = gift_receipt_valid_days
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_label_normal Value to be assigned
    def tax_label_normal=(tax_label_normal)
      if !tax_label_normal.nil? && tax_label_normal.to_s.length < 1
        fail ArgumentError, 'invalid value for "tax_label_normal", the character length must be great than or equal to 1.'
      end

      @tax_label_normal = tax_label_normal
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_label_reduce Value to be assigned
    def tax_label_reduce=(tax_label_reduce)
      if !tax_label_reduce.nil? && tax_label_reduce.to_s.length < 1
        fail ArgumentError, 'invalid value for "tax_label_reduce", the character length must be great than or equal to 1.'
      end

      @tax_label_reduce = tax_label_reduce
    end

    # Custom attribute writer method with validation
    # @param [Object] display_sequence Value to be assigned
    def display_sequence=(display_sequence)
      if !display_sequence.nil? && display_sequence.to_s.length < 1
        fail ArgumentError, 'invalid value for "display_sequence", the character length must be great than or equal to 1.'
      end

      @display_sequence = display_sequence
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          store_code == o.store_code &&
          store_name == o.store_name &&
          store_abbr == o.store_abbr &&
          print_receipt_store_name == o.print_receipt_store_name &&
          print_stock_receipt_store_name == o.print_stock_receipt_store_name &&
          division == o.division &&
          post_code == o.post_code &&
          address == o.address &&
          phone_number == o.phone_number &&
          fax_number == o.fax_number &&
          mail_address == o.mail_address &&
          homepage == o.homepage &&
          temp_tran_mail_address == o.temp_tran_mail_address &&
          price_change_flag == o.price_change_flag &&
          sell_division == o.sell_division &&
          sum_proc_division == o.sum_proc_division &&
          sum_date_change_time == o.sum_date_change_time &&
          sum_ref_column == o.sum_ref_column &&
          point_not_applicable == o.point_not_applicable &&
          tax_free_division == o.tax_free_division &&
          max_bundle_product_count == o.max_bundle_product_count &&
          max_discount_rate == o.max_discount_rate &&
          carriage_display_flag == o.carriage_display_flag &&
          terminal_adjustment_cash_flag == o.terminal_adjustment_cash_flag &&
          terminal_check_cash_flag == o.terminal_check_cash_flag &&
          waiter_adjustment_division == o.waiter_adjustment_division &&
          saving_auto_division == o.saving_auto_division &&
          saving_auto_price == o.saving_auto_price &&
          cancel_setting_division == o.cancel_setting_division &&
          rounding_division == o.rounding_division &&
          discount_rounding_division == o.discount_rounding_division &&
          card_company_select_division == o.card_company_select_division &&
          gift_receipt_valid_days == o.gift_receipt_valid_days &&
          tax_label_normal == o.tax_label_normal &&
          tax_label_reduce == o.tax_label_reduce &&
          display_sequence == o.display_sequence &&
          face_payment_use_division == o.face_payment_use_division &&
          point_condition == o.point_condition &&
          receipt_print_info == o.receipt_print_info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [store_code, store_name, store_abbr, print_receipt_store_name, print_stock_receipt_store_name, division, post_code, address, phone_number, fax_number, mail_address, homepage, temp_tran_mail_address, price_change_flag, sell_division, sum_proc_division, sum_date_change_time, sum_ref_column, point_not_applicable, tax_free_division, max_bundle_product_count, max_discount_rate, carriage_display_flag, terminal_adjustment_cash_flag, terminal_check_cash_flag, waiter_adjustment_division, saving_auto_division, saving_auto_price, cancel_setting_division, rounding_division, discount_rounding_division, card_company_select_division, gift_receipt_valid_days, tax_label_normal, tax_label_reduce, display_sequence, face_payment_use_division, point_condition, receipt_print_info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
