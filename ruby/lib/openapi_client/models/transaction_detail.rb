=begin
#スマレジ

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.1

=end

require 'date'
require 'time'

module OpenapiClient
  class TransactionDetail
    attr_accessor :transaction_head_id

    attr_accessor :transaction_detail_id

    attr_accessor :parent_transaction_detail_id

    attr_accessor :transaction_detail_division

    attr_accessor :product_id

    attr_accessor :product_code

    attr_accessor :product_name

    attr_accessor :print_receipt_product_name

    attr_accessor :color

    attr_accessor :size

    attr_accessor :group_code

    attr_accessor :tax_division

    attr_accessor :price

    attr_accessor :sales_price

    attr_accessor :unit_discount_price

    attr_accessor :unit_discount_rate

    attr_accessor :unit_discount_division

    attr_accessor :cost

    attr_accessor :quantity

    attr_accessor :unit_non_discount_sum

    attr_accessor :unit_discount_sum

    attr_accessor :unit_discounted_sum

    attr_accessor :cost_sum

    attr_accessor :category_id

    attr_accessor :category_name

    attr_accessor :discrimination_no

    attr_accessor :sales_division

    attr_accessor :product_division

    attr_accessor :inventory_reservation_division

    attr_accessor :point_not_applicable

    attr_accessor :calc_discount

    attr_accessor :tax_free_division

    attr_accessor :tax_free_commodity_price

    attr_accessor :tax_free

    attr_accessor :product_bundle_group_id

    attr_accessor :discount_price_proportional

    attr_accessor :discount_point_proportional

    attr_accessor :discount_coupon_proportional

    attr_accessor :tax_include_proportional

    attr_accessor :tax_exclude_proportional

    attr_accessor :product_bundle_proportional

    attr_accessor :staff_discount_proportional

    attr_accessor :bargain_discount_proportional

    attr_accessor :rounding_price_proportional

    attr_accessor :product_staff_discount_rate

    attr_accessor :staff_rank

    attr_accessor :staff_rank_name

    attr_accessor :staff_discount_rate

    attr_accessor :staff_discount_division

    attr_accessor :apply_staff_discount_rate

    attr_accessor :apply_staff_discount_price

    attr_accessor :bargain_id

    attr_accessor :bargain_name

    attr_accessor :bargain_division

    attr_accessor :bargain_value

    attr_accessor :apply_bargain_value

    attr_accessor :apply_bargain_discount_price

    attr_accessor :tax_rate

    attr_accessor :standard_tax_rate

    attr_accessor :modified_tax_rate

    attr_accessor :reduce_tax_id

    attr_accessor :reduce_tax_name

    attr_accessor :reduce_tax_rate

    attr_accessor :reduce_tax_price

    attr_accessor :reduce_tax_member_price

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'transaction_head_id' => :'transactionHeadId',
        :'transaction_detail_id' => :'transactionDetailId',
        :'parent_transaction_detail_id' => :'parentTransactionDetailId',
        :'transaction_detail_division' => :'transactionDetailDivision',
        :'product_id' => :'productId',
        :'product_code' => :'productCode',
        :'product_name' => :'productName',
        :'print_receipt_product_name' => :'printReceiptProductName',
        :'color' => :'color',
        :'size' => :'size',
        :'group_code' => :'groupCode',
        :'tax_division' => :'taxDivision',
        :'price' => :'price',
        :'sales_price' => :'salesPrice',
        :'unit_discount_price' => :'unitDiscountPrice',
        :'unit_discount_rate' => :'unitDiscountRate',
        :'unit_discount_division' => :'unitDiscountDivision',
        :'cost' => :'cost',
        :'quantity' => :'quantity',
        :'unit_non_discount_sum' => :'unitNonDiscountSum',
        :'unit_discount_sum' => :'unitDiscountSum',
        :'unit_discounted_sum' => :'unitDiscountedSum',
        :'cost_sum' => :'costSum',
        :'category_id' => :'categoryId',
        :'category_name' => :'categoryName',
        :'discrimination_no' => :'discriminationNo',
        :'sales_division' => :'salesDivision',
        :'product_division' => :'productDivision',
        :'inventory_reservation_division' => :'inventoryReservationDivision',
        :'point_not_applicable' => :'pointNotApplicable',
        :'calc_discount' => :'calcDiscount',
        :'tax_free_division' => :'taxFreeDivision',
        :'tax_free_commodity_price' => :'taxFreeCommodityPrice',
        :'tax_free' => :'taxFree',
        :'product_bundle_group_id' => :'productBundleGroupId',
        :'discount_price_proportional' => :'discountPriceProportional',
        :'discount_point_proportional' => :'discountPointProportional',
        :'discount_coupon_proportional' => :'discountCouponProportional',
        :'tax_include_proportional' => :'taxIncludeProportional',
        :'tax_exclude_proportional' => :'taxExcludeProportional',
        :'product_bundle_proportional' => :'productBundleProportional',
        :'staff_discount_proportional' => :'staffDiscountProportional',
        :'bargain_discount_proportional' => :'bargainDiscountProportional',
        :'rounding_price_proportional' => :'roundingPriceProportional',
        :'product_staff_discount_rate' => :'productStaffDiscountRate',
        :'staff_rank' => :'staffRank',
        :'staff_rank_name' => :'staffRankName',
        :'staff_discount_rate' => :'staffDiscountRate',
        :'staff_discount_division' => :'staffDiscountDivision',
        :'apply_staff_discount_rate' => :'applyStaffDiscountRate',
        :'apply_staff_discount_price' => :'applyStaffDiscountPrice',
        :'bargain_id' => :'bargainId',
        :'bargain_name' => :'bargainName',
        :'bargain_division' => :'bargainDivision',
        :'bargain_value' => :'bargainValue',
        :'apply_bargain_value' => :'applyBargainValue',
        :'apply_bargain_discount_price' => :'applyBargainDiscountPrice',
        :'tax_rate' => :'taxRate',
        :'standard_tax_rate' => :'standardTaxRate',
        :'modified_tax_rate' => :'modifiedTaxRate',
        :'reduce_tax_id' => :'reduceTaxId',
        :'reduce_tax_name' => :'reduceTaxName',
        :'reduce_tax_rate' => :'reduceTaxRate',
        :'reduce_tax_price' => :'reduceTaxPrice',
        :'reduce_tax_member_price' => :'reduceTaxMemberPrice'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'transaction_head_id' => :'String',
        :'transaction_detail_id' => :'String',
        :'parent_transaction_detail_id' => :'String',
        :'transaction_detail_division' => :'TransactionDetailDivision',
        :'product_id' => :'String',
        :'product_code' => :'String',
        :'product_name' => :'String',
        :'print_receipt_product_name' => :'String',
        :'color' => :'String',
        :'size' => :'String',
        :'group_code' => :'String',
        :'tax_division' => :'TaxDivision',
        :'price' => :'String',
        :'sales_price' => :'String',
        :'unit_discount_price' => :'String',
        :'unit_discount_rate' => :'String',
        :'unit_discount_division' => :'String',
        :'cost' => :'String',
        :'quantity' => :'String',
        :'unit_non_discount_sum' => :'String',
        :'unit_discount_sum' => :'String',
        :'unit_discounted_sum' => :'String',
        :'cost_sum' => :'String',
        :'category_id' => :'String',
        :'category_name' => :'String',
        :'discrimination_no' => :'String',
        :'sales_division' => :'SalesDivision',
        :'product_division' => :'ProductDivision',
        :'inventory_reservation_division' => :'String',
        :'point_not_applicable' => :'String',
        :'calc_discount' => :'String',
        :'tax_free_division' => :'String',
        :'tax_free_commodity_price' => :'String',
        :'tax_free' => :'String',
        :'product_bundle_group_id' => :'String',
        :'discount_price_proportional' => :'String',
        :'discount_point_proportional' => :'String',
        :'discount_coupon_proportional' => :'String',
        :'tax_include_proportional' => :'String',
        :'tax_exclude_proportional' => :'String',
        :'product_bundle_proportional' => :'String',
        :'staff_discount_proportional' => :'String',
        :'bargain_discount_proportional' => :'String',
        :'rounding_price_proportional' => :'String',
        :'product_staff_discount_rate' => :'String',
        :'staff_rank' => :'String',
        :'staff_rank_name' => :'String',
        :'staff_discount_rate' => :'String',
        :'staff_discount_division' => :'String',
        :'apply_staff_discount_rate' => :'String',
        :'apply_staff_discount_price' => :'String',
        :'bargain_id' => :'String',
        :'bargain_name' => :'String',
        :'bargain_division' => :'String',
        :'bargain_value' => :'String',
        :'apply_bargain_value' => :'String',
        :'apply_bargain_discount_price' => :'String',
        :'tax_rate' => :'String',
        :'standard_tax_rate' => :'String',
        :'modified_tax_rate' => :'String',
        :'reduce_tax_id' => :'String',
        :'reduce_tax_name' => :'String',
        :'reduce_tax_rate' => :'String',
        :'reduce_tax_price' => :'String',
        :'reduce_tax_member_price' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::TransactionDetail` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::TransactionDetail`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'transaction_head_id')
        self.transaction_head_id = attributes[:'transaction_head_id']
      end

      if attributes.key?(:'transaction_detail_id')
        self.transaction_detail_id = attributes[:'transaction_detail_id']
      end

      if attributes.key?(:'parent_transaction_detail_id')
        self.parent_transaction_detail_id = attributes[:'parent_transaction_detail_id']
      end

      if attributes.key?(:'transaction_detail_division')
        self.transaction_detail_division = attributes[:'transaction_detail_division']
      end

      if attributes.key?(:'product_id')
        self.product_id = attributes[:'product_id']
      end

      if attributes.key?(:'product_code')
        self.product_code = attributes[:'product_code']
      end

      if attributes.key?(:'product_name')
        self.product_name = attributes[:'product_name']
      end

      if attributes.key?(:'print_receipt_product_name')
        self.print_receipt_product_name = attributes[:'print_receipt_product_name']
      end

      if attributes.key?(:'color')
        self.color = attributes[:'color']
      end

      if attributes.key?(:'size')
        self.size = attributes[:'size']
      end

      if attributes.key?(:'group_code')
        self.group_code = attributes[:'group_code']
      end

      if attributes.key?(:'tax_division')
        self.tax_division = attributes[:'tax_division']
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.key?(:'sales_price')
        self.sales_price = attributes[:'sales_price']
      end

      if attributes.key?(:'unit_discount_price')
        self.unit_discount_price = attributes[:'unit_discount_price']
      end

      if attributes.key?(:'unit_discount_rate')
        self.unit_discount_rate = attributes[:'unit_discount_rate']
      end

      if attributes.key?(:'unit_discount_division')
        self.unit_discount_division = attributes[:'unit_discount_division']
      end

      if attributes.key?(:'cost')
        self.cost = attributes[:'cost']
      end

      if attributes.key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.key?(:'unit_non_discount_sum')
        self.unit_non_discount_sum = attributes[:'unit_non_discount_sum']
      end

      if attributes.key?(:'unit_discount_sum')
        self.unit_discount_sum = attributes[:'unit_discount_sum']
      end

      if attributes.key?(:'unit_discounted_sum')
        self.unit_discounted_sum = attributes[:'unit_discounted_sum']
      end

      if attributes.key?(:'cost_sum')
        self.cost_sum = attributes[:'cost_sum']
      end

      if attributes.key?(:'category_id')
        self.category_id = attributes[:'category_id']
      end

      if attributes.key?(:'category_name')
        self.category_name = attributes[:'category_name']
      end

      if attributes.key?(:'discrimination_no')
        self.discrimination_no = attributes[:'discrimination_no']
      end

      if attributes.key?(:'sales_division')
        self.sales_division = attributes[:'sales_division']
      end

      if attributes.key?(:'product_division')
        self.product_division = attributes[:'product_division']
      end

      if attributes.key?(:'inventory_reservation_division')
        self.inventory_reservation_division = attributes[:'inventory_reservation_division']
      end

      if attributes.key?(:'point_not_applicable')
        self.point_not_applicable = attributes[:'point_not_applicable']
      end

      if attributes.key?(:'calc_discount')
        self.calc_discount = attributes[:'calc_discount']
      end

      if attributes.key?(:'tax_free_division')
        self.tax_free_division = attributes[:'tax_free_division']
      end

      if attributes.key?(:'tax_free_commodity_price')
        self.tax_free_commodity_price = attributes[:'tax_free_commodity_price']
      end

      if attributes.key?(:'tax_free')
        self.tax_free = attributes[:'tax_free']
      end

      if attributes.key?(:'product_bundle_group_id')
        self.product_bundle_group_id = attributes[:'product_bundle_group_id']
      end

      if attributes.key?(:'discount_price_proportional')
        self.discount_price_proportional = attributes[:'discount_price_proportional']
      end

      if attributes.key?(:'discount_point_proportional')
        self.discount_point_proportional = attributes[:'discount_point_proportional']
      end

      if attributes.key?(:'discount_coupon_proportional')
        self.discount_coupon_proportional = attributes[:'discount_coupon_proportional']
      end

      if attributes.key?(:'tax_include_proportional')
        self.tax_include_proportional = attributes[:'tax_include_proportional']
      end

      if attributes.key?(:'tax_exclude_proportional')
        self.tax_exclude_proportional = attributes[:'tax_exclude_proportional']
      end

      if attributes.key?(:'product_bundle_proportional')
        self.product_bundle_proportional = attributes[:'product_bundle_proportional']
      end

      if attributes.key?(:'staff_discount_proportional')
        self.staff_discount_proportional = attributes[:'staff_discount_proportional']
      end

      if attributes.key?(:'bargain_discount_proportional')
        self.bargain_discount_proportional = attributes[:'bargain_discount_proportional']
      end

      if attributes.key?(:'rounding_price_proportional')
        self.rounding_price_proportional = attributes[:'rounding_price_proportional']
      end

      if attributes.key?(:'product_staff_discount_rate')
        self.product_staff_discount_rate = attributes[:'product_staff_discount_rate']
      end

      if attributes.key?(:'staff_rank')
        self.staff_rank = attributes[:'staff_rank']
      end

      if attributes.key?(:'staff_rank_name')
        self.staff_rank_name = attributes[:'staff_rank_name']
      end

      if attributes.key?(:'staff_discount_rate')
        self.staff_discount_rate = attributes[:'staff_discount_rate']
      end

      if attributes.key?(:'staff_discount_division')
        self.staff_discount_division = attributes[:'staff_discount_division']
      end

      if attributes.key?(:'apply_staff_discount_rate')
        self.apply_staff_discount_rate = attributes[:'apply_staff_discount_rate']
      end

      if attributes.key?(:'apply_staff_discount_price')
        self.apply_staff_discount_price = attributes[:'apply_staff_discount_price']
      end

      if attributes.key?(:'bargain_id')
        self.bargain_id = attributes[:'bargain_id']
      end

      if attributes.key?(:'bargain_name')
        self.bargain_name = attributes[:'bargain_name']
      end

      if attributes.key?(:'bargain_division')
        self.bargain_division = attributes[:'bargain_division']
      end

      if attributes.key?(:'bargain_value')
        self.bargain_value = attributes[:'bargain_value']
      end

      if attributes.key?(:'apply_bargain_value')
        self.apply_bargain_value = attributes[:'apply_bargain_value']
      end

      if attributes.key?(:'apply_bargain_discount_price')
        self.apply_bargain_discount_price = attributes[:'apply_bargain_discount_price']
      end

      if attributes.key?(:'tax_rate')
        self.tax_rate = attributes[:'tax_rate']
      end

      if attributes.key?(:'standard_tax_rate')
        self.standard_tax_rate = attributes[:'standard_tax_rate']
      end

      if attributes.key?(:'modified_tax_rate')
        self.modified_tax_rate = attributes[:'modified_tax_rate']
      end

      if attributes.key?(:'reduce_tax_id')
        self.reduce_tax_id = attributes[:'reduce_tax_id']
      end

      if attributes.key?(:'reduce_tax_name')
        self.reduce_tax_name = attributes[:'reduce_tax_name']
      end

      if attributes.key?(:'reduce_tax_rate')
        self.reduce_tax_rate = attributes[:'reduce_tax_rate']
      end

      if attributes.key?(:'reduce_tax_price')
        self.reduce_tax_price = attributes[:'reduce_tax_price']
      end

      if attributes.key?(:'reduce_tax_member_price')
        self.reduce_tax_member_price = attributes[:'reduce_tax_member_price']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @transaction_head_id.nil?
        invalid_properties.push('invalid value for "transaction_head_id", transaction_head_id cannot be nil.')
      end

      if @transaction_head_id.to_s.length < 1
        invalid_properties.push('invalid value for "transaction_head_id", the character length must be great than or equal to 1.')
      end

      if @transaction_detail_id.nil?
        invalid_properties.push('invalid value for "transaction_detail_id", transaction_detail_id cannot be nil.')
      end

      if @transaction_detail_id.to_s.length < 1
        invalid_properties.push('invalid value for "transaction_detail_id", the character length must be great than or equal to 1.')
      end

      if !@parent_transaction_detail_id.nil? && @parent_transaction_detail_id.to_s.length < 1
        invalid_properties.push('invalid value for "parent_transaction_detail_id", the character length must be great than or equal to 1.')
      end

      if @transaction_detail_division.nil?
        invalid_properties.push('invalid value for "transaction_detail_division", transaction_detail_division cannot be nil.')
      end

      if !@product_id.nil? && @product_id.to_s.length < 1
        invalid_properties.push('invalid value for "product_id", the character length must be great than or equal to 1.')
      end

      if !@product_code.nil? && @product_code.to_s.length < 1
        invalid_properties.push('invalid value for "product_code", the character length must be great than or equal to 1.')
      end

      if !@product_name.nil? && @product_name.to_s.length < 1
        invalid_properties.push('invalid value for "product_name", the character length must be great than or equal to 1.')
      end

      if !@print_receipt_product_name.nil? && @print_receipt_product_name.to_s.length < 1
        invalid_properties.push('invalid value for "print_receipt_product_name", the character length must be great than or equal to 1.')
      end

      if !@color.nil? && @color.to_s.length < 1
        invalid_properties.push('invalid value for "color", the character length must be great than or equal to 1.')
      end

      if !@size.nil? && @size.to_s.length < 1
        invalid_properties.push('invalid value for "size", the character length must be great than or equal to 1.')
      end

      if !@group_code.nil? && @group_code.to_s.length < 1
        invalid_properties.push('invalid value for "group_code", the character length must be great than or equal to 1.')
      end

      if !@price.nil? && @price.to_s.length < 1
        invalid_properties.push('invalid value for "price", the character length must be great than or equal to 1.')
      end

      if !@sales_price.nil? && @sales_price.to_s.length < 1
        invalid_properties.push('invalid value for "sales_price", the character length must be great than or equal to 1.')
      end

      if !@unit_discount_price.nil? && @unit_discount_price.to_s.length < 1
        invalid_properties.push('invalid value for "unit_discount_price", the character length must be great than or equal to 1.')
      end

      if !@unit_discount_rate.nil? && @unit_discount_rate.to_s.length < 1
        invalid_properties.push('invalid value for "unit_discount_rate", the character length must be great than or equal to 1.')
      end

      if !@unit_discount_division.nil? && @unit_discount_division.to_s.length < 1
        invalid_properties.push('invalid value for "unit_discount_division", the character length must be great than or equal to 1.')
      end

      if !@cost.nil? && @cost.to_s.length < 1
        invalid_properties.push('invalid value for "cost", the character length must be great than or equal to 1.')
      end

      if @quantity.nil?
        invalid_properties.push('invalid value for "quantity", quantity cannot be nil.')
      end

      if @quantity.to_s.length < 1
        invalid_properties.push('invalid value for "quantity", the character length must be great than or equal to 1.')
      end

      if !@unit_non_discount_sum.nil? && @unit_non_discount_sum.to_s.length < 1
        invalid_properties.push('invalid value for "unit_non_discount_sum", the character length must be great than or equal to 1.')
      end

      if !@unit_discount_sum.nil? && @unit_discount_sum.to_s.length < 1
        invalid_properties.push('invalid value for "unit_discount_sum", the character length must be great than or equal to 1.')
      end

      if !@unit_discounted_sum.nil? && @unit_discounted_sum.to_s.length < 1
        invalid_properties.push('invalid value for "unit_discounted_sum", the character length must be great than or equal to 1.')
      end

      if !@cost_sum.nil? && @cost_sum.to_s.length < 1
        invalid_properties.push('invalid value for "cost_sum", the character length must be great than or equal to 1.')
      end

      if !@category_id.nil? && @category_id.to_s.length < 1
        invalid_properties.push('invalid value for "category_id", the character length must be great than or equal to 1.')
      end

      if !@category_name.nil? && @category_name.to_s.length < 1
        invalid_properties.push('invalid value for "category_name", the character length must be great than or equal to 1.')
      end

      if !@discrimination_no.nil? && @discrimination_no.to_s.length < 1
        invalid_properties.push('invalid value for "discrimination_no", the character length must be great than or equal to 1.')
      end

      if !@inventory_reservation_division.nil? && @inventory_reservation_division.to_s.length < 1
        invalid_properties.push('invalid value for "inventory_reservation_division", the character length must be great than or equal to 1.')
      end

      if !@point_not_applicable.nil? && @point_not_applicable.to_s.length < 1
        invalid_properties.push('invalid value for "point_not_applicable", the character length must be great than or equal to 1.')
      end

      if !@calc_discount.nil? && @calc_discount.to_s.length < 1
        invalid_properties.push('invalid value for "calc_discount", the character length must be great than or equal to 1.')
      end

      if !@tax_free_division.nil? && @tax_free_division.to_s.length < 1
        invalid_properties.push('invalid value for "tax_free_division", the character length must be great than or equal to 1.')
      end

      if !@tax_free_commodity_price.nil? && @tax_free_commodity_price.to_s.length < 1
        invalid_properties.push('invalid value for "tax_free_commodity_price", the character length must be great than or equal to 1.')
      end

      if !@tax_free.nil? && @tax_free.to_s.length < 1
        invalid_properties.push('invalid value for "tax_free", the character length must be great than or equal to 1.')
      end

      if !@product_bundle_group_id.nil? && @product_bundle_group_id.to_s.length < 1
        invalid_properties.push('invalid value for "product_bundle_group_id", the character length must be great than or equal to 1.')
      end

      if !@discount_price_proportional.nil? && @discount_price_proportional.to_s.length < 1
        invalid_properties.push('invalid value for "discount_price_proportional", the character length must be great than or equal to 1.')
      end

      if !@discount_point_proportional.nil? && @discount_point_proportional.to_s.length < 1
        invalid_properties.push('invalid value for "discount_point_proportional", the character length must be great than or equal to 1.')
      end

      if !@discount_coupon_proportional.nil? && @discount_coupon_proportional.to_s.length < 1
        invalid_properties.push('invalid value for "discount_coupon_proportional", the character length must be great than or equal to 1.')
      end

      if !@tax_include_proportional.nil? && @tax_include_proportional.to_s.length < 1
        invalid_properties.push('invalid value for "tax_include_proportional", the character length must be great than or equal to 1.')
      end

      if !@tax_exclude_proportional.nil? && @tax_exclude_proportional.to_s.length < 1
        invalid_properties.push('invalid value for "tax_exclude_proportional", the character length must be great than or equal to 1.')
      end

      if !@product_bundle_proportional.nil? && @product_bundle_proportional.to_s.length < 1
        invalid_properties.push('invalid value for "product_bundle_proportional", the character length must be great than or equal to 1.')
      end

      if !@staff_discount_proportional.nil? && @staff_discount_proportional.to_s.length < 1
        invalid_properties.push('invalid value for "staff_discount_proportional", the character length must be great than or equal to 1.')
      end

      if !@bargain_discount_proportional.nil? && @bargain_discount_proportional.to_s.length < 1
        invalid_properties.push('invalid value for "bargain_discount_proportional", the character length must be great than or equal to 1.')
      end

      if !@rounding_price_proportional.nil? && @rounding_price_proportional.to_s.length < 1
        invalid_properties.push('invalid value for "rounding_price_proportional", the character length must be great than or equal to 1.')
      end

      if !@product_staff_discount_rate.nil? && @product_staff_discount_rate.to_s.length < 1
        invalid_properties.push('invalid value for "product_staff_discount_rate", the character length must be great than or equal to 1.')
      end

      if !@staff_rank.nil? && @staff_rank.to_s.length < 1
        invalid_properties.push('invalid value for "staff_rank", the character length must be great than or equal to 1.')
      end

      if !@staff_rank_name.nil? && @staff_rank_name.to_s.length < 1
        invalid_properties.push('invalid value for "staff_rank_name", the character length must be great than or equal to 1.')
      end

      if !@staff_discount_rate.nil? && @staff_discount_rate.to_s.length < 1
        invalid_properties.push('invalid value for "staff_discount_rate", the character length must be great than or equal to 1.')
      end

      if !@staff_discount_division.nil? && @staff_discount_division.to_s.length < 1
        invalid_properties.push('invalid value for "staff_discount_division", the character length must be great than or equal to 1.')
      end

      if !@apply_staff_discount_rate.nil? && @apply_staff_discount_rate.to_s.length < 1
        invalid_properties.push('invalid value for "apply_staff_discount_rate", the character length must be great than or equal to 1.')
      end

      if !@apply_staff_discount_price.nil? && @apply_staff_discount_price.to_s.length < 1
        invalid_properties.push('invalid value for "apply_staff_discount_price", the character length must be great than or equal to 1.')
      end

      if !@bargain_id.nil? && @bargain_id.to_s.length < 1
        invalid_properties.push('invalid value for "bargain_id", the character length must be great than or equal to 1.')
      end

      if !@bargain_name.nil? && @bargain_name.to_s.length < 1
        invalid_properties.push('invalid value for "bargain_name", the character length must be great than or equal to 1.')
      end

      if !@bargain_division.nil? && @bargain_division.to_s.length < 1
        invalid_properties.push('invalid value for "bargain_division", the character length must be great than or equal to 1.')
      end

      if !@bargain_value.nil? && @bargain_value.to_s.length < 1
        invalid_properties.push('invalid value for "bargain_value", the character length must be great than or equal to 1.')
      end

      if !@apply_bargain_value.nil? && @apply_bargain_value.to_s.length < 1
        invalid_properties.push('invalid value for "apply_bargain_value", the character length must be great than or equal to 1.')
      end

      if !@apply_bargain_discount_price.nil? && @apply_bargain_discount_price.to_s.length < 1
        invalid_properties.push('invalid value for "apply_bargain_discount_price", the character length must be great than or equal to 1.')
      end

      if !@tax_rate.nil? && @tax_rate.to_s.length < 1
        invalid_properties.push('invalid value for "tax_rate", the character length must be great than or equal to 1.')
      end

      if !@standard_tax_rate.nil? && @standard_tax_rate.to_s.length < 1
        invalid_properties.push('invalid value for "standard_tax_rate", the character length must be great than or equal to 1.')
      end

      if !@modified_tax_rate.nil? && @modified_tax_rate.to_s.length < 1
        invalid_properties.push('invalid value for "modified_tax_rate", the character length must be great than or equal to 1.')
      end

      if !@reduce_tax_id.nil? && @reduce_tax_id.to_s.length < 1
        invalid_properties.push('invalid value for "reduce_tax_id", the character length must be great than or equal to 1.')
      end

      if !@reduce_tax_name.nil? && @reduce_tax_name.to_s.length < 1
        invalid_properties.push('invalid value for "reduce_tax_name", the character length must be great than or equal to 1.')
      end

      if !@reduce_tax_rate.nil? && @reduce_tax_rate.to_s.length < 1
        invalid_properties.push('invalid value for "reduce_tax_rate", the character length must be great than or equal to 1.')
      end

      if !@reduce_tax_price.nil? && @reduce_tax_price.to_s.length < 1
        invalid_properties.push('invalid value for "reduce_tax_price", the character length must be great than or equal to 1.')
      end

      if !@reduce_tax_member_price.nil? && @reduce_tax_member_price.to_s.length < 1
        invalid_properties.push('invalid value for "reduce_tax_member_price", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @transaction_head_id.nil?
      return false if @transaction_head_id.to_s.length < 1
      return false if @transaction_detail_id.nil?
      return false if @transaction_detail_id.to_s.length < 1
      return false if !@parent_transaction_detail_id.nil? && @parent_transaction_detail_id.to_s.length < 1
      return false if @transaction_detail_division.nil?
      return false if !@product_id.nil? && @product_id.to_s.length < 1
      return false if !@product_code.nil? && @product_code.to_s.length < 1
      return false if !@product_name.nil? && @product_name.to_s.length < 1
      return false if !@print_receipt_product_name.nil? && @print_receipt_product_name.to_s.length < 1
      return false if !@color.nil? && @color.to_s.length < 1
      return false if !@size.nil? && @size.to_s.length < 1
      return false if !@group_code.nil? && @group_code.to_s.length < 1
      return false if !@price.nil? && @price.to_s.length < 1
      return false if !@sales_price.nil? && @sales_price.to_s.length < 1
      return false if !@unit_discount_price.nil? && @unit_discount_price.to_s.length < 1
      return false if !@unit_discount_rate.nil? && @unit_discount_rate.to_s.length < 1
      return false if !@unit_discount_division.nil? && @unit_discount_division.to_s.length < 1
      return false if !@cost.nil? && @cost.to_s.length < 1
      return false if @quantity.nil?
      return false if @quantity.to_s.length < 1
      return false if !@unit_non_discount_sum.nil? && @unit_non_discount_sum.to_s.length < 1
      return false if !@unit_discount_sum.nil? && @unit_discount_sum.to_s.length < 1
      return false if !@unit_discounted_sum.nil? && @unit_discounted_sum.to_s.length < 1
      return false if !@cost_sum.nil? && @cost_sum.to_s.length < 1
      return false if !@category_id.nil? && @category_id.to_s.length < 1
      return false if !@category_name.nil? && @category_name.to_s.length < 1
      return false if !@discrimination_no.nil? && @discrimination_no.to_s.length < 1
      return false if !@inventory_reservation_division.nil? && @inventory_reservation_division.to_s.length < 1
      return false if !@point_not_applicable.nil? && @point_not_applicable.to_s.length < 1
      return false if !@calc_discount.nil? && @calc_discount.to_s.length < 1
      return false if !@tax_free_division.nil? && @tax_free_division.to_s.length < 1
      return false if !@tax_free_commodity_price.nil? && @tax_free_commodity_price.to_s.length < 1
      return false if !@tax_free.nil? && @tax_free.to_s.length < 1
      return false if !@product_bundle_group_id.nil? && @product_bundle_group_id.to_s.length < 1
      return false if !@discount_price_proportional.nil? && @discount_price_proportional.to_s.length < 1
      return false if !@discount_point_proportional.nil? && @discount_point_proportional.to_s.length < 1
      return false if !@discount_coupon_proportional.nil? && @discount_coupon_proportional.to_s.length < 1
      return false if !@tax_include_proportional.nil? && @tax_include_proportional.to_s.length < 1
      return false if !@tax_exclude_proportional.nil? && @tax_exclude_proportional.to_s.length < 1
      return false if !@product_bundle_proportional.nil? && @product_bundle_proportional.to_s.length < 1
      return false if !@staff_discount_proportional.nil? && @staff_discount_proportional.to_s.length < 1
      return false if !@bargain_discount_proportional.nil? && @bargain_discount_proportional.to_s.length < 1
      return false if !@rounding_price_proportional.nil? && @rounding_price_proportional.to_s.length < 1
      return false if !@product_staff_discount_rate.nil? && @product_staff_discount_rate.to_s.length < 1
      return false if !@staff_rank.nil? && @staff_rank.to_s.length < 1
      return false if !@staff_rank_name.nil? && @staff_rank_name.to_s.length < 1
      return false if !@staff_discount_rate.nil? && @staff_discount_rate.to_s.length < 1
      return false if !@staff_discount_division.nil? && @staff_discount_division.to_s.length < 1
      return false if !@apply_staff_discount_rate.nil? && @apply_staff_discount_rate.to_s.length < 1
      return false if !@apply_staff_discount_price.nil? && @apply_staff_discount_price.to_s.length < 1
      return false if !@bargain_id.nil? && @bargain_id.to_s.length < 1
      return false if !@bargain_name.nil? && @bargain_name.to_s.length < 1
      return false if !@bargain_division.nil? && @bargain_division.to_s.length < 1
      return false if !@bargain_value.nil? && @bargain_value.to_s.length < 1
      return false if !@apply_bargain_value.nil? && @apply_bargain_value.to_s.length < 1
      return false if !@apply_bargain_discount_price.nil? && @apply_bargain_discount_price.to_s.length < 1
      return false if !@tax_rate.nil? && @tax_rate.to_s.length < 1
      return false if !@standard_tax_rate.nil? && @standard_tax_rate.to_s.length < 1
      return false if !@modified_tax_rate.nil? && @modified_tax_rate.to_s.length < 1
      return false if !@reduce_tax_id.nil? && @reduce_tax_id.to_s.length < 1
      return false if !@reduce_tax_name.nil? && @reduce_tax_name.to_s.length < 1
      return false if !@reduce_tax_rate.nil? && @reduce_tax_rate.to_s.length < 1
      return false if !@reduce_tax_price.nil? && @reduce_tax_price.to_s.length < 1
      return false if !@reduce_tax_member_price.nil? && @reduce_tax_member_price.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] transaction_head_id Value to be assigned
    def transaction_head_id=(transaction_head_id)
      if transaction_head_id.nil?
        fail ArgumentError, 'transaction_head_id cannot be nil'
      end

      if transaction_head_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "transaction_head_id", the character length must be great than or equal to 1.'
      end

      @transaction_head_id = transaction_head_id
    end

    # Custom attribute writer method with validation
    # @param [Object] transaction_detail_id Value to be assigned
    def transaction_detail_id=(transaction_detail_id)
      if transaction_detail_id.nil?
        fail ArgumentError, 'transaction_detail_id cannot be nil'
      end

      if transaction_detail_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "transaction_detail_id", the character length must be great than or equal to 1.'
      end

      @transaction_detail_id = transaction_detail_id
    end

    # Custom attribute writer method with validation
    # @param [Object] parent_transaction_detail_id Value to be assigned
    def parent_transaction_detail_id=(parent_transaction_detail_id)
      if !parent_transaction_detail_id.nil? && parent_transaction_detail_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "parent_transaction_detail_id", the character length must be great than or equal to 1.'
      end

      @parent_transaction_detail_id = parent_transaction_detail_id
    end

    # Custom attribute writer method with validation
    # @param [Object] product_id Value to be assigned
    def product_id=(product_id)
      if !product_id.nil? && product_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "product_id", the character length must be great than or equal to 1.'
      end

      @product_id = product_id
    end

    # Custom attribute writer method with validation
    # @param [Object] product_code Value to be assigned
    def product_code=(product_code)
      if !product_code.nil? && product_code.to_s.length < 1
        fail ArgumentError, 'invalid value for "product_code", the character length must be great than or equal to 1.'
      end

      @product_code = product_code
    end

    # Custom attribute writer method with validation
    # @param [Object] product_name Value to be assigned
    def product_name=(product_name)
      if !product_name.nil? && product_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "product_name", the character length must be great than or equal to 1.'
      end

      @product_name = product_name
    end

    # Custom attribute writer method with validation
    # @param [Object] print_receipt_product_name Value to be assigned
    def print_receipt_product_name=(print_receipt_product_name)
      if !print_receipt_product_name.nil? && print_receipt_product_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "print_receipt_product_name", the character length must be great than or equal to 1.'
      end

      @print_receipt_product_name = print_receipt_product_name
    end

    # Custom attribute writer method with validation
    # @param [Object] color Value to be assigned
    def color=(color)
      if !color.nil? && color.to_s.length < 1
        fail ArgumentError, 'invalid value for "color", the character length must be great than or equal to 1.'
      end

      @color = color
    end

    # Custom attribute writer method with validation
    # @param [Object] size Value to be assigned
    def size=(size)
      if !size.nil? && size.to_s.length < 1
        fail ArgumentError, 'invalid value for "size", the character length must be great than or equal to 1.'
      end

      @size = size
    end

    # Custom attribute writer method with validation
    # @param [Object] group_code Value to be assigned
    def group_code=(group_code)
      if !group_code.nil? && group_code.to_s.length < 1
        fail ArgumentError, 'invalid value for "group_code", the character length must be great than or equal to 1.'
      end

      @group_code = group_code
    end

    # Custom attribute writer method with validation
    # @param [Object] price Value to be assigned
    def price=(price)
      if !price.nil? && price.to_s.length < 1
        fail ArgumentError, 'invalid value for "price", the character length must be great than or equal to 1.'
      end

      @price = price
    end

    # Custom attribute writer method with validation
    # @param [Object] sales_price Value to be assigned
    def sales_price=(sales_price)
      if !sales_price.nil? && sales_price.to_s.length < 1
        fail ArgumentError, 'invalid value for "sales_price", the character length must be great than or equal to 1.'
      end

      @sales_price = sales_price
    end

    # Custom attribute writer method with validation
    # @param [Object] unit_discount_price Value to be assigned
    def unit_discount_price=(unit_discount_price)
      if !unit_discount_price.nil? && unit_discount_price.to_s.length < 1
        fail ArgumentError, 'invalid value for "unit_discount_price", the character length must be great than or equal to 1.'
      end

      @unit_discount_price = unit_discount_price
    end

    # Custom attribute writer method with validation
    # @param [Object] unit_discount_rate Value to be assigned
    def unit_discount_rate=(unit_discount_rate)
      if !unit_discount_rate.nil? && unit_discount_rate.to_s.length < 1
        fail ArgumentError, 'invalid value for "unit_discount_rate", the character length must be great than or equal to 1.'
      end

      @unit_discount_rate = unit_discount_rate
    end

    # Custom attribute writer method with validation
    # @param [Object] unit_discount_division Value to be assigned
    def unit_discount_division=(unit_discount_division)
      if !unit_discount_division.nil? && unit_discount_division.to_s.length < 1
        fail ArgumentError, 'invalid value for "unit_discount_division", the character length must be great than or equal to 1.'
      end

      @unit_discount_division = unit_discount_division
    end

    # Custom attribute writer method with validation
    # @param [Object] cost Value to be assigned
    def cost=(cost)
      if !cost.nil? && cost.to_s.length < 1
        fail ArgumentError, 'invalid value for "cost", the character length must be great than or equal to 1.'
      end

      @cost = cost
    end

    # Custom attribute writer method with validation
    # @param [Object] quantity Value to be assigned
    def quantity=(quantity)
      if quantity.nil?
        fail ArgumentError, 'quantity cannot be nil'
      end

      if quantity.to_s.length < 1
        fail ArgumentError, 'invalid value for "quantity", the character length must be great than or equal to 1.'
      end

      @quantity = quantity
    end

    # Custom attribute writer method with validation
    # @param [Object] unit_non_discount_sum Value to be assigned
    def unit_non_discount_sum=(unit_non_discount_sum)
      if !unit_non_discount_sum.nil? && unit_non_discount_sum.to_s.length < 1
        fail ArgumentError, 'invalid value for "unit_non_discount_sum", the character length must be great than or equal to 1.'
      end

      @unit_non_discount_sum = unit_non_discount_sum
    end

    # Custom attribute writer method with validation
    # @param [Object] unit_discount_sum Value to be assigned
    def unit_discount_sum=(unit_discount_sum)
      if !unit_discount_sum.nil? && unit_discount_sum.to_s.length < 1
        fail ArgumentError, 'invalid value for "unit_discount_sum", the character length must be great than or equal to 1.'
      end

      @unit_discount_sum = unit_discount_sum
    end

    # Custom attribute writer method with validation
    # @param [Object] unit_discounted_sum Value to be assigned
    def unit_discounted_sum=(unit_discounted_sum)
      if !unit_discounted_sum.nil? && unit_discounted_sum.to_s.length < 1
        fail ArgumentError, 'invalid value for "unit_discounted_sum", the character length must be great than or equal to 1.'
      end

      @unit_discounted_sum = unit_discounted_sum
    end

    # Custom attribute writer method with validation
    # @param [Object] cost_sum Value to be assigned
    def cost_sum=(cost_sum)
      if !cost_sum.nil? && cost_sum.to_s.length < 1
        fail ArgumentError, 'invalid value for "cost_sum", the character length must be great than or equal to 1.'
      end

      @cost_sum = cost_sum
    end

    # Custom attribute writer method with validation
    # @param [Object] category_id Value to be assigned
    def category_id=(category_id)
      if !category_id.nil? && category_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "category_id", the character length must be great than or equal to 1.'
      end

      @category_id = category_id
    end

    # Custom attribute writer method with validation
    # @param [Object] category_name Value to be assigned
    def category_name=(category_name)
      if !category_name.nil? && category_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "category_name", the character length must be great than or equal to 1.'
      end

      @category_name = category_name
    end

    # Custom attribute writer method with validation
    # @param [Object] discrimination_no Value to be assigned
    def discrimination_no=(discrimination_no)
      if !discrimination_no.nil? && discrimination_no.to_s.length < 1
        fail ArgumentError, 'invalid value for "discrimination_no", the character length must be great than or equal to 1.'
      end

      @discrimination_no = discrimination_no
    end

    # Custom attribute writer method with validation
    # @param [Object] inventory_reservation_division Value to be assigned
    def inventory_reservation_division=(inventory_reservation_division)
      if !inventory_reservation_division.nil? && inventory_reservation_division.to_s.length < 1
        fail ArgumentError, 'invalid value for "inventory_reservation_division", the character length must be great than or equal to 1.'
      end

      @inventory_reservation_division = inventory_reservation_division
    end

    # Custom attribute writer method with validation
    # @param [Object] point_not_applicable Value to be assigned
    def point_not_applicable=(point_not_applicable)
      if !point_not_applicable.nil? && point_not_applicable.to_s.length < 1
        fail ArgumentError, 'invalid value for "point_not_applicable", the character length must be great than or equal to 1.'
      end

      @point_not_applicable = point_not_applicable
    end

    # Custom attribute writer method with validation
    # @param [Object] calc_discount Value to be assigned
    def calc_discount=(calc_discount)
      if !calc_discount.nil? && calc_discount.to_s.length < 1
        fail ArgumentError, 'invalid value for "calc_discount", the character length must be great than or equal to 1.'
      end

      @calc_discount = calc_discount
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_free_division Value to be assigned
    def tax_free_division=(tax_free_division)
      if !tax_free_division.nil? && tax_free_division.to_s.length < 1
        fail ArgumentError, 'invalid value for "tax_free_division", the character length must be great than or equal to 1.'
      end

      @tax_free_division = tax_free_division
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_free_commodity_price Value to be assigned
    def tax_free_commodity_price=(tax_free_commodity_price)
      if !tax_free_commodity_price.nil? && tax_free_commodity_price.to_s.length < 1
        fail ArgumentError, 'invalid value for "tax_free_commodity_price", the character length must be great than or equal to 1.'
      end

      @tax_free_commodity_price = tax_free_commodity_price
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_free Value to be assigned
    def tax_free=(tax_free)
      if !tax_free.nil? && tax_free.to_s.length < 1
        fail ArgumentError, 'invalid value for "tax_free", the character length must be great than or equal to 1.'
      end

      @tax_free = tax_free
    end

    # Custom attribute writer method with validation
    # @param [Object] product_bundle_group_id Value to be assigned
    def product_bundle_group_id=(product_bundle_group_id)
      if !product_bundle_group_id.nil? && product_bundle_group_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "product_bundle_group_id", the character length must be great than or equal to 1.'
      end

      @product_bundle_group_id = product_bundle_group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] discount_price_proportional Value to be assigned
    def discount_price_proportional=(discount_price_proportional)
      if !discount_price_proportional.nil? && discount_price_proportional.to_s.length < 1
        fail ArgumentError, 'invalid value for "discount_price_proportional", the character length must be great than or equal to 1.'
      end

      @discount_price_proportional = discount_price_proportional
    end

    # Custom attribute writer method with validation
    # @param [Object] discount_point_proportional Value to be assigned
    def discount_point_proportional=(discount_point_proportional)
      if !discount_point_proportional.nil? && discount_point_proportional.to_s.length < 1
        fail ArgumentError, 'invalid value for "discount_point_proportional", the character length must be great than or equal to 1.'
      end

      @discount_point_proportional = discount_point_proportional
    end

    # Custom attribute writer method with validation
    # @param [Object] discount_coupon_proportional Value to be assigned
    def discount_coupon_proportional=(discount_coupon_proportional)
      if !discount_coupon_proportional.nil? && discount_coupon_proportional.to_s.length < 1
        fail ArgumentError, 'invalid value for "discount_coupon_proportional", the character length must be great than or equal to 1.'
      end

      @discount_coupon_proportional = discount_coupon_proportional
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_include_proportional Value to be assigned
    def tax_include_proportional=(tax_include_proportional)
      if !tax_include_proportional.nil? && tax_include_proportional.to_s.length < 1
        fail ArgumentError, 'invalid value for "tax_include_proportional", the character length must be great than or equal to 1.'
      end

      @tax_include_proportional = tax_include_proportional
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_exclude_proportional Value to be assigned
    def tax_exclude_proportional=(tax_exclude_proportional)
      if !tax_exclude_proportional.nil? && tax_exclude_proportional.to_s.length < 1
        fail ArgumentError, 'invalid value for "tax_exclude_proportional", the character length must be great than or equal to 1.'
      end

      @tax_exclude_proportional = tax_exclude_proportional
    end

    # Custom attribute writer method with validation
    # @param [Object] product_bundle_proportional Value to be assigned
    def product_bundle_proportional=(product_bundle_proportional)
      if !product_bundle_proportional.nil? && product_bundle_proportional.to_s.length < 1
        fail ArgumentError, 'invalid value for "product_bundle_proportional", the character length must be great than or equal to 1.'
      end

      @product_bundle_proportional = product_bundle_proportional
    end

    # Custom attribute writer method with validation
    # @param [Object] staff_discount_proportional Value to be assigned
    def staff_discount_proportional=(staff_discount_proportional)
      if !staff_discount_proportional.nil? && staff_discount_proportional.to_s.length < 1
        fail ArgumentError, 'invalid value for "staff_discount_proportional", the character length must be great than or equal to 1.'
      end

      @staff_discount_proportional = staff_discount_proportional
    end

    # Custom attribute writer method with validation
    # @param [Object] bargain_discount_proportional Value to be assigned
    def bargain_discount_proportional=(bargain_discount_proportional)
      if !bargain_discount_proportional.nil? && bargain_discount_proportional.to_s.length < 1
        fail ArgumentError, 'invalid value for "bargain_discount_proportional", the character length must be great than or equal to 1.'
      end

      @bargain_discount_proportional = bargain_discount_proportional
    end

    # Custom attribute writer method with validation
    # @param [Object] rounding_price_proportional Value to be assigned
    def rounding_price_proportional=(rounding_price_proportional)
      if !rounding_price_proportional.nil? && rounding_price_proportional.to_s.length < 1
        fail ArgumentError, 'invalid value for "rounding_price_proportional", the character length must be great than or equal to 1.'
      end

      @rounding_price_proportional = rounding_price_proportional
    end

    # Custom attribute writer method with validation
    # @param [Object] product_staff_discount_rate Value to be assigned
    def product_staff_discount_rate=(product_staff_discount_rate)
      if !product_staff_discount_rate.nil? && product_staff_discount_rate.to_s.length < 1
        fail ArgumentError, 'invalid value for "product_staff_discount_rate", the character length must be great than or equal to 1.'
      end

      @product_staff_discount_rate = product_staff_discount_rate
    end

    # Custom attribute writer method with validation
    # @param [Object] staff_rank Value to be assigned
    def staff_rank=(staff_rank)
      if !staff_rank.nil? && staff_rank.to_s.length < 1
        fail ArgumentError, 'invalid value for "staff_rank", the character length must be great than or equal to 1.'
      end

      @staff_rank = staff_rank
    end

    # Custom attribute writer method with validation
    # @param [Object] staff_rank_name Value to be assigned
    def staff_rank_name=(staff_rank_name)
      if !staff_rank_name.nil? && staff_rank_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "staff_rank_name", the character length must be great than or equal to 1.'
      end

      @staff_rank_name = staff_rank_name
    end

    # Custom attribute writer method with validation
    # @param [Object] staff_discount_rate Value to be assigned
    def staff_discount_rate=(staff_discount_rate)
      if !staff_discount_rate.nil? && staff_discount_rate.to_s.length < 1
        fail ArgumentError, 'invalid value for "staff_discount_rate", the character length must be great than or equal to 1.'
      end

      @staff_discount_rate = staff_discount_rate
    end

    # Custom attribute writer method with validation
    # @param [Object] staff_discount_division Value to be assigned
    def staff_discount_division=(staff_discount_division)
      if !staff_discount_division.nil? && staff_discount_division.to_s.length < 1
        fail ArgumentError, 'invalid value for "staff_discount_division", the character length must be great than or equal to 1.'
      end

      @staff_discount_division = staff_discount_division
    end

    # Custom attribute writer method with validation
    # @param [Object] apply_staff_discount_rate Value to be assigned
    def apply_staff_discount_rate=(apply_staff_discount_rate)
      if !apply_staff_discount_rate.nil? && apply_staff_discount_rate.to_s.length < 1
        fail ArgumentError, 'invalid value for "apply_staff_discount_rate", the character length must be great than or equal to 1.'
      end

      @apply_staff_discount_rate = apply_staff_discount_rate
    end

    # Custom attribute writer method with validation
    # @param [Object] apply_staff_discount_price Value to be assigned
    def apply_staff_discount_price=(apply_staff_discount_price)
      if !apply_staff_discount_price.nil? && apply_staff_discount_price.to_s.length < 1
        fail ArgumentError, 'invalid value for "apply_staff_discount_price", the character length must be great than or equal to 1.'
      end

      @apply_staff_discount_price = apply_staff_discount_price
    end

    # Custom attribute writer method with validation
    # @param [Object] bargain_id Value to be assigned
    def bargain_id=(bargain_id)
      if !bargain_id.nil? && bargain_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "bargain_id", the character length must be great than or equal to 1.'
      end

      @bargain_id = bargain_id
    end

    # Custom attribute writer method with validation
    # @param [Object] bargain_name Value to be assigned
    def bargain_name=(bargain_name)
      if !bargain_name.nil? && bargain_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "bargain_name", the character length must be great than or equal to 1.'
      end

      @bargain_name = bargain_name
    end

    # Custom attribute writer method with validation
    # @param [Object] bargain_division Value to be assigned
    def bargain_division=(bargain_division)
      if !bargain_division.nil? && bargain_division.to_s.length < 1
        fail ArgumentError, 'invalid value for "bargain_division", the character length must be great than or equal to 1.'
      end

      @bargain_division = bargain_division
    end

    # Custom attribute writer method with validation
    # @param [Object] bargain_value Value to be assigned
    def bargain_value=(bargain_value)
      if !bargain_value.nil? && bargain_value.to_s.length < 1
        fail ArgumentError, 'invalid value for "bargain_value", the character length must be great than or equal to 1.'
      end

      @bargain_value = bargain_value
    end

    # Custom attribute writer method with validation
    # @param [Object] apply_bargain_value Value to be assigned
    def apply_bargain_value=(apply_bargain_value)
      if !apply_bargain_value.nil? && apply_bargain_value.to_s.length < 1
        fail ArgumentError, 'invalid value for "apply_bargain_value", the character length must be great than or equal to 1.'
      end

      @apply_bargain_value = apply_bargain_value
    end

    # Custom attribute writer method with validation
    # @param [Object] apply_bargain_discount_price Value to be assigned
    def apply_bargain_discount_price=(apply_bargain_discount_price)
      if !apply_bargain_discount_price.nil? && apply_bargain_discount_price.to_s.length < 1
        fail ArgumentError, 'invalid value for "apply_bargain_discount_price", the character length must be great than or equal to 1.'
      end

      @apply_bargain_discount_price = apply_bargain_discount_price
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_rate Value to be assigned
    def tax_rate=(tax_rate)
      if !tax_rate.nil? && tax_rate.to_s.length < 1
        fail ArgumentError, 'invalid value for "tax_rate", the character length must be great than or equal to 1.'
      end

      @tax_rate = tax_rate
    end

    # Custom attribute writer method with validation
    # @param [Object] standard_tax_rate Value to be assigned
    def standard_tax_rate=(standard_tax_rate)
      if !standard_tax_rate.nil? && standard_tax_rate.to_s.length < 1
        fail ArgumentError, 'invalid value for "standard_tax_rate", the character length must be great than or equal to 1.'
      end

      @standard_tax_rate = standard_tax_rate
    end

    # Custom attribute writer method with validation
    # @param [Object] modified_tax_rate Value to be assigned
    def modified_tax_rate=(modified_tax_rate)
      if !modified_tax_rate.nil? && modified_tax_rate.to_s.length < 1
        fail ArgumentError, 'invalid value for "modified_tax_rate", the character length must be great than or equal to 1.'
      end

      @modified_tax_rate = modified_tax_rate
    end

    # Custom attribute writer method with validation
    # @param [Object] reduce_tax_id Value to be assigned
    def reduce_tax_id=(reduce_tax_id)
      if !reduce_tax_id.nil? && reduce_tax_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "reduce_tax_id", the character length must be great than or equal to 1.'
      end

      @reduce_tax_id = reduce_tax_id
    end

    # Custom attribute writer method with validation
    # @param [Object] reduce_tax_name Value to be assigned
    def reduce_tax_name=(reduce_tax_name)
      if !reduce_tax_name.nil? && reduce_tax_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "reduce_tax_name", the character length must be great than or equal to 1.'
      end

      @reduce_tax_name = reduce_tax_name
    end

    # Custom attribute writer method with validation
    # @param [Object] reduce_tax_rate Value to be assigned
    def reduce_tax_rate=(reduce_tax_rate)
      if !reduce_tax_rate.nil? && reduce_tax_rate.to_s.length < 1
        fail ArgumentError, 'invalid value for "reduce_tax_rate", the character length must be great than or equal to 1.'
      end

      @reduce_tax_rate = reduce_tax_rate
    end

    # Custom attribute writer method with validation
    # @param [Object] reduce_tax_price Value to be assigned
    def reduce_tax_price=(reduce_tax_price)
      if !reduce_tax_price.nil? && reduce_tax_price.to_s.length < 1
        fail ArgumentError, 'invalid value for "reduce_tax_price", the character length must be great than or equal to 1.'
      end

      @reduce_tax_price = reduce_tax_price
    end

    # Custom attribute writer method with validation
    # @param [Object] reduce_tax_member_price Value to be assigned
    def reduce_tax_member_price=(reduce_tax_member_price)
      if !reduce_tax_member_price.nil? && reduce_tax_member_price.to_s.length < 1
        fail ArgumentError, 'invalid value for "reduce_tax_member_price", the character length must be great than or equal to 1.'
      end

      @reduce_tax_member_price = reduce_tax_member_price
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          transaction_head_id == o.transaction_head_id &&
          transaction_detail_id == o.transaction_detail_id &&
          parent_transaction_detail_id == o.parent_transaction_detail_id &&
          transaction_detail_division == o.transaction_detail_division &&
          product_id == o.product_id &&
          product_code == o.product_code &&
          product_name == o.product_name &&
          print_receipt_product_name == o.print_receipt_product_name &&
          color == o.color &&
          size == o.size &&
          group_code == o.group_code &&
          tax_division == o.tax_division &&
          price == o.price &&
          sales_price == o.sales_price &&
          unit_discount_price == o.unit_discount_price &&
          unit_discount_rate == o.unit_discount_rate &&
          unit_discount_division == o.unit_discount_division &&
          cost == o.cost &&
          quantity == o.quantity &&
          unit_non_discount_sum == o.unit_non_discount_sum &&
          unit_discount_sum == o.unit_discount_sum &&
          unit_discounted_sum == o.unit_discounted_sum &&
          cost_sum == o.cost_sum &&
          category_id == o.category_id &&
          category_name == o.category_name &&
          discrimination_no == o.discrimination_no &&
          sales_division == o.sales_division &&
          product_division == o.product_division &&
          inventory_reservation_division == o.inventory_reservation_division &&
          point_not_applicable == o.point_not_applicable &&
          calc_discount == o.calc_discount &&
          tax_free_division == o.tax_free_division &&
          tax_free_commodity_price == o.tax_free_commodity_price &&
          tax_free == o.tax_free &&
          product_bundle_group_id == o.product_bundle_group_id &&
          discount_price_proportional == o.discount_price_proportional &&
          discount_point_proportional == o.discount_point_proportional &&
          discount_coupon_proportional == o.discount_coupon_proportional &&
          tax_include_proportional == o.tax_include_proportional &&
          tax_exclude_proportional == o.tax_exclude_proportional &&
          product_bundle_proportional == o.product_bundle_proportional &&
          staff_discount_proportional == o.staff_discount_proportional &&
          bargain_discount_proportional == o.bargain_discount_proportional &&
          rounding_price_proportional == o.rounding_price_proportional &&
          product_staff_discount_rate == o.product_staff_discount_rate &&
          staff_rank == o.staff_rank &&
          staff_rank_name == o.staff_rank_name &&
          staff_discount_rate == o.staff_discount_rate &&
          staff_discount_division == o.staff_discount_division &&
          apply_staff_discount_rate == o.apply_staff_discount_rate &&
          apply_staff_discount_price == o.apply_staff_discount_price &&
          bargain_id == o.bargain_id &&
          bargain_name == o.bargain_name &&
          bargain_division == o.bargain_division &&
          bargain_value == o.bargain_value &&
          apply_bargain_value == o.apply_bargain_value &&
          apply_bargain_discount_price == o.apply_bargain_discount_price &&
          tax_rate == o.tax_rate &&
          standard_tax_rate == o.standard_tax_rate &&
          modified_tax_rate == o.modified_tax_rate &&
          reduce_tax_id == o.reduce_tax_id &&
          reduce_tax_name == o.reduce_tax_name &&
          reduce_tax_rate == o.reduce_tax_rate &&
          reduce_tax_price == o.reduce_tax_price &&
          reduce_tax_member_price == o.reduce_tax_member_price
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [transaction_head_id, transaction_detail_id, parent_transaction_detail_id, transaction_detail_division, product_id, product_code, product_name, print_receipt_product_name, color, size, group_code, tax_division, price, sales_price, unit_discount_price, unit_discount_rate, unit_discount_division, cost, quantity, unit_non_discount_sum, unit_discount_sum, unit_discounted_sum, cost_sum, category_id, category_name, discrimination_no, sales_division, product_division, inventory_reservation_division, point_not_applicable, calc_discount, tax_free_division, tax_free_commodity_price, tax_free, product_bundle_group_id, discount_price_proportional, discount_point_proportional, discount_coupon_proportional, tax_include_proportional, tax_exclude_proportional, product_bundle_proportional, staff_discount_proportional, bargain_discount_proportional, rounding_price_proportional, product_staff_discount_rate, staff_rank, staff_rank_name, staff_discount_rate, staff_discount_division, apply_staff_discount_rate, apply_staff_discount_price, bargain_id, bargain_name, bargain_division, bargain_value, apply_bargain_value, apply_bargain_discount_price, tax_rate, standard_tax_rate, modified_tax_rate, reduce_tax_id, reduce_tax_name, reduce_tax_rate, reduce_tax_price, reduce_tax_member_price].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
