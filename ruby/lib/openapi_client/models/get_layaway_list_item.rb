=begin
#スマレジ

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.1

=end

require 'date'
require 'time'

module OpenapiClient
  class GetLayawayListItem
    attr_accessor :transaction_head_id

    attr_accessor :transaction_date_time

    attr_accessor :transaction_head_division

    attr_accessor :cancel_division

    attr_accessor :unit_non_discountsubtotal

    attr_accessor :unit_discountsubtotal

    attr_accessor :unit_staff_discountsubtotal

    attr_accessor :unit_bargain_discountsubtotal

    attr_accessor :subtotal

    attr_accessor :subtotal_for_discount

    attr_accessor :subtotal_discount_price

    attr_accessor :subtotal_discount_rate

    attr_accessor :subtotal_discount_division

    attr_accessor :point_discount

    attr_accessor :total

    attr_accessor :tax_include

    attr_accessor :tax_exclude

    attr_accessor :rounding_division

    attr_accessor :rounding_price

    attr_accessor :cash_total

    attr_accessor :credit_total

    attr_accessor :deposit

    attr_accessor :deposit_cash

    attr_accessor :deposit_credit

    attr_accessor :change

    attr_accessor :tip_cash

    attr_accessor :tip_credit

    attr_accessor :amount

    attr_accessor :return_amount

    attr_accessor :cost_total

    attr_accessor :sales_head_division

    attr_accessor :in_tax_sales_total

    attr_accessor :out_tax_sales_total

    attr_accessor :non_tax_sales_total

    attr_accessor :non_sales_target_total

    attr_accessor :non_sales_target_in_tax_total

    attr_accessor :non_sales_target_out_tax_total

    attr_accessor :non_sales_target_tax_free_total

    attr_accessor :non_sales_target_cost_total

    attr_accessor :non_sales_target_amount

    attr_accessor :non_sales_target_return_amount

    attr_accessor :new_point

    attr_accessor :spend_point

    attr_accessor :point

    attr_accessor :total_point

    attr_accessor :current_mile

    attr_accessor :earn_mile

    attr_accessor :total_mile

    attr_accessor :adjustment_mile

    attr_accessor :adjustment_mile_division

    attr_accessor :adjustment_mile_value

    attr_accessor :store_id

    attr_accessor :store_code

    attr_accessor :terminal_id

    attr_accessor :customer_id

    attr_accessor :customer_code

    attr_accessor :terminal_tran_id

    attr_accessor :terminal_tran_date_time

    attr_accessor :sum_division

    attr_accessor :adjustment_date_time

    attr_accessor :sum_date

    attr_accessor :customer_rank

    attr_accessor :customer_group_id

    attr_accessor :customer_group_id2

    attr_accessor :customer_group_id3

    attr_accessor :customer_group_id4

    attr_accessor :customer_group_id5

    attr_accessor :staff_id

    attr_accessor :staff_code

    attr_accessor :staff_name

    attr_accessor :credit_division

    attr_accessor :payment_count

    attr_accessor :slip_number

    attr_accessor :cancel_slip_number

    attr_accessor :auth_number

    attr_accessor :auth_date

    attr_accessor :card_company

    attr_accessor :denomination

    attr_accessor :memo

    attr_accessor :receipt_memo

    attr_accessor :carriage

    attr_accessor :commission

    attr_accessor :guest_numbers

    attr_accessor :guest_numbers_male

    attr_accessor :guest_numbers_female

    attr_accessor :guest_numbers_unknown

    attr_accessor :enter_date_time

    attr_accessor :tax_free_sales_division

    attr_accessor :net_tax_free_general_tax_include

    attr_accessor :net_tax_free_general_tax_exclude

    attr_accessor :net_tax_free_consumable_tax_include

    attr_accessor :net_tax_free_consumable_tax_exclude

    attr_accessor :tags

    attr_accessor :point_giving_division

    attr_accessor :point_giving_unit_price

    attr_accessor :point_giving_unit

    attr_accessor :point_spend_division

    attr_accessor :mileage_division

    attr_accessor :mileage_label

    attr_accessor :customer_pin_code

    attr_accessor :return_sales

    attr_accessor :dispose_division

    attr_accessor :dispose_server_transaction_head_id

    attr_accessor :cancel_date_time

    attr_accessor :sell_division

    attr_accessor :tax_rate

    attr_accessor :tax_rounding

    attr_accessor :discount_rounding_division

    attr_accessor :transaction_uuid

    attr_accessor :exchange_ticket_no

    attr_accessor :gift_receipt_valid_days

    attr_accessor :upd_date_time

    attr_accessor :layaway

    attr_accessor :layaway_pick_up

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'transaction_head_id' => :'transactionHeadId',
        :'transaction_date_time' => :'transactionDateTime',
        :'transaction_head_division' => :'transactionHeadDivision',
        :'cancel_division' => :'cancelDivision',
        :'unit_non_discountsubtotal' => :'unitNonDiscountsubtotal',
        :'unit_discountsubtotal' => :'unitDiscountsubtotal',
        :'unit_staff_discountsubtotal' => :'unitStaffDiscountsubtotal',
        :'unit_bargain_discountsubtotal' => :'unitBargainDiscountsubtotal',
        :'subtotal' => :'subtotal',
        :'subtotal_for_discount' => :'subtotalForDiscount',
        :'subtotal_discount_price' => :'subtotalDiscountPrice',
        :'subtotal_discount_rate' => :'subtotalDiscountRate',
        :'subtotal_discount_division' => :'subtotalDiscountDivision',
        :'point_discount' => :'pointDiscount',
        :'total' => :'total',
        :'tax_include' => :'taxInclude',
        :'tax_exclude' => :'taxExclude',
        :'rounding_division' => :'roundingDivision',
        :'rounding_price' => :'roundingPrice',
        :'cash_total' => :'cashTotal',
        :'credit_total' => :'creditTotal',
        :'deposit' => :'deposit',
        :'deposit_cash' => :'depositCash',
        :'deposit_credit' => :'depositCredit',
        :'change' => :'change',
        :'tip_cash' => :'tipCash',
        :'tip_credit' => :'tipCredit',
        :'amount' => :'amount',
        :'return_amount' => :'returnAmount',
        :'cost_total' => :'costTotal',
        :'sales_head_division' => :'salesHeadDivision',
        :'in_tax_sales_total' => :'inTaxSalesTotal',
        :'out_tax_sales_total' => :'outTaxSalesTotal',
        :'non_tax_sales_total' => :'nonTaxSalesTotal',
        :'non_sales_target_total' => :'nonSalesTargetTotal',
        :'non_sales_target_in_tax_total' => :'nonSalesTargetInTaxTotal',
        :'non_sales_target_out_tax_total' => :'nonSalesTargetOutTaxTotal',
        :'non_sales_target_tax_free_total' => :'nonSalesTargetTaxFreeTotal',
        :'non_sales_target_cost_total' => :'nonSalesTargetCostTotal',
        :'non_sales_target_amount' => :'nonSalesTargetAmount',
        :'non_sales_target_return_amount' => :'nonSalesTargetReturnAmount',
        :'new_point' => :'newPoint',
        :'spend_point' => :'spendPoint',
        :'point' => :'point',
        :'total_point' => :'totalPoint',
        :'current_mile' => :'currentMile',
        :'earn_mile' => :'earnMile',
        :'total_mile' => :'totalMile',
        :'adjustment_mile' => :'adjustmentMile',
        :'adjustment_mile_division' => :'adjustmentMileDivision',
        :'adjustment_mile_value' => :'adjustmentMileValue',
        :'store_id' => :'storeId',
        :'store_code' => :'storeCode',
        :'terminal_id' => :'terminalId',
        :'customer_id' => :'customerId',
        :'customer_code' => :'customerCode',
        :'terminal_tran_id' => :'terminalTranId',
        :'terminal_tran_date_time' => :'terminalTranDateTime',
        :'sum_division' => :'sumDivision',
        :'adjustment_date_time' => :'adjustmentDateTime',
        :'sum_date' => :'sumDate',
        :'customer_rank' => :'customerRank',
        :'customer_group_id' => :'customerGroupId',
        :'customer_group_id2' => :'customerGroupId2',
        :'customer_group_id3' => :'customerGroupId3',
        :'customer_group_id4' => :'customerGroupId4',
        :'customer_group_id5' => :'customerGroupId5',
        :'staff_id' => :'staffId',
        :'staff_code' => :'staffCode',
        :'staff_name' => :'staffName',
        :'credit_division' => :'creditDivision',
        :'payment_count' => :'paymentCount',
        :'slip_number' => :'slipNumber',
        :'cancel_slip_number' => :'cancelSlipNumber',
        :'auth_number' => :'authNumber',
        :'auth_date' => :'authDate',
        :'card_company' => :'cardCompany',
        :'denomination' => :'denomination',
        :'memo' => :'memo',
        :'receipt_memo' => :'receiptMemo',
        :'carriage' => :'carriage',
        :'commission' => :'commission',
        :'guest_numbers' => :'guestNumbers',
        :'guest_numbers_male' => :'guestNumbersMale',
        :'guest_numbers_female' => :'guestNumbersFemale',
        :'guest_numbers_unknown' => :'guestNumbersUnknown',
        :'enter_date_time' => :'enterDateTime',
        :'tax_free_sales_division' => :'taxFreeSalesDivision',
        :'net_tax_free_general_tax_include' => :'netTaxFreeGeneralTaxInclude',
        :'net_tax_free_general_tax_exclude' => :'netTaxFreeGeneralTaxExclude',
        :'net_tax_free_consumable_tax_include' => :'netTaxFreeConsumableTaxInclude',
        :'net_tax_free_consumable_tax_exclude' => :'netTaxFreeConsumableTaxExclude',
        :'tags' => :'tags',
        :'point_giving_division' => :'pointGivingDivision',
        :'point_giving_unit_price' => :'pointGivingUnitPrice',
        :'point_giving_unit' => :'pointGivingUnit',
        :'point_spend_division' => :'pointSpendDivision',
        :'mileage_division' => :'mileageDivision',
        :'mileage_label' => :'mileageLabel',
        :'customer_pin_code' => :'customerPinCode',
        :'return_sales' => :'returnSales',
        :'dispose_division' => :'disposeDivision',
        :'dispose_server_transaction_head_id' => :'disposeServerTransactionHeadId',
        :'cancel_date_time' => :'cancelDateTime',
        :'sell_division' => :'sellDivision',
        :'tax_rate' => :'taxRate',
        :'tax_rounding' => :'taxRounding',
        :'discount_rounding_division' => :'discountRoundingDivision',
        :'transaction_uuid' => :'transactionUuid',
        :'exchange_ticket_no' => :'exchangeTicketNo',
        :'gift_receipt_valid_days' => :'giftReceiptValidDays',
        :'upd_date_time' => :'updDateTime',
        :'layaway' => :'layaway',
        :'layaway_pick_up' => :'layawayPickUp'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'transaction_head_id' => :'String',
        :'transaction_date_time' => :'String',
        :'transaction_head_division' => :'TransactionHeadDivision',
        :'cancel_division' => :'CancelDivision',
        :'unit_non_discountsubtotal' => :'String',
        :'unit_discountsubtotal' => :'String',
        :'unit_staff_discountsubtotal' => :'String',
        :'unit_bargain_discountsubtotal' => :'String',
        :'subtotal' => :'String',
        :'subtotal_for_discount' => :'String',
        :'subtotal_discount_price' => :'String',
        :'subtotal_discount_rate' => :'String',
        :'subtotal_discount_division' => :'String',
        :'point_discount' => :'String',
        :'total' => :'String',
        :'tax_include' => :'String',
        :'tax_exclude' => :'String',
        :'rounding_division' => :'String',
        :'rounding_price' => :'String',
        :'cash_total' => :'String',
        :'credit_total' => :'String',
        :'deposit' => :'String',
        :'deposit_cash' => :'String',
        :'deposit_credit' => :'String',
        :'change' => :'String',
        :'tip_cash' => :'String',
        :'tip_credit' => :'String',
        :'amount' => :'String',
        :'return_amount' => :'String',
        :'cost_total' => :'String',
        :'sales_head_division' => :'String',
        :'in_tax_sales_total' => :'String',
        :'out_tax_sales_total' => :'String',
        :'non_tax_sales_total' => :'String',
        :'non_sales_target_total' => :'String',
        :'non_sales_target_in_tax_total' => :'String',
        :'non_sales_target_out_tax_total' => :'String',
        :'non_sales_target_tax_free_total' => :'String',
        :'non_sales_target_cost_total' => :'String',
        :'non_sales_target_amount' => :'String',
        :'non_sales_target_return_amount' => :'String',
        :'new_point' => :'String',
        :'spend_point' => :'String',
        :'point' => :'String',
        :'total_point' => :'String',
        :'current_mile' => :'String',
        :'earn_mile' => :'String',
        :'total_mile' => :'String',
        :'adjustment_mile' => :'String',
        :'adjustment_mile_division' => :'String',
        :'adjustment_mile_value' => :'String',
        :'store_id' => :'String',
        :'store_code' => :'String',
        :'terminal_id' => :'String',
        :'customer_id' => :'String',
        :'customer_code' => :'String',
        :'terminal_tran_id' => :'String',
        :'terminal_tran_date_time' => :'String',
        :'sum_division' => :'String',
        :'adjustment_date_time' => :'String',
        :'sum_date' => :'String',
        :'customer_rank' => :'String',
        :'customer_group_id' => :'String',
        :'customer_group_id2' => :'String',
        :'customer_group_id3' => :'String',
        :'customer_group_id4' => :'String',
        :'customer_group_id5' => :'String',
        :'staff_id' => :'String',
        :'staff_code' => :'String',
        :'staff_name' => :'String',
        :'credit_division' => :'String',
        :'payment_count' => :'String',
        :'slip_number' => :'String',
        :'cancel_slip_number' => :'String',
        :'auth_number' => :'String',
        :'auth_date' => :'String',
        :'card_company' => :'String',
        :'denomination' => :'String',
        :'memo' => :'String',
        :'receipt_memo' => :'String',
        :'carriage' => :'String',
        :'commission' => :'String',
        :'guest_numbers' => :'String',
        :'guest_numbers_male' => :'String',
        :'guest_numbers_female' => :'String',
        :'guest_numbers_unknown' => :'String',
        :'enter_date_time' => :'String',
        :'tax_free_sales_division' => :'String',
        :'net_tax_free_general_tax_include' => :'String',
        :'net_tax_free_general_tax_exclude' => :'String',
        :'net_tax_free_consumable_tax_include' => :'String',
        :'net_tax_free_consumable_tax_exclude' => :'String',
        :'tags' => :'String',
        :'point_giving_division' => :'String',
        :'point_giving_unit_price' => :'String',
        :'point_giving_unit' => :'String',
        :'point_spend_division' => :'String',
        :'mileage_division' => :'String',
        :'mileage_label' => :'String',
        :'customer_pin_code' => :'String',
        :'return_sales' => :'ReturnSales',
        :'dispose_division' => :'DisposeDivision',
        :'dispose_server_transaction_head_id' => :'String',
        :'cancel_date_time' => :'String',
        :'sell_division' => :'String',
        :'tax_rate' => :'String',
        :'tax_rounding' => :'String',
        :'discount_rounding_division' => :'String',
        :'transaction_uuid' => :'String',
        :'exchange_ticket_no' => :'String',
        :'gift_receipt_valid_days' => :'String',
        :'upd_date_time' => :'String',
        :'layaway' => :'Layaway',
        :'layaway_pick_up' => :'LayawayPickUp'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::GetLayawayListItem` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::GetLayawayListItem`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'transaction_head_id')
        self.transaction_head_id = attributes[:'transaction_head_id']
      end

      if attributes.key?(:'transaction_date_time')
        self.transaction_date_time = attributes[:'transaction_date_time']
      end

      if attributes.key?(:'transaction_head_division')
        self.transaction_head_division = attributes[:'transaction_head_division']
      end

      if attributes.key?(:'cancel_division')
        self.cancel_division = attributes[:'cancel_division']
      end

      if attributes.key?(:'unit_non_discountsubtotal')
        self.unit_non_discountsubtotal = attributes[:'unit_non_discountsubtotal']
      end

      if attributes.key?(:'unit_discountsubtotal')
        self.unit_discountsubtotal = attributes[:'unit_discountsubtotal']
      end

      if attributes.key?(:'unit_staff_discountsubtotal')
        self.unit_staff_discountsubtotal = attributes[:'unit_staff_discountsubtotal']
      end

      if attributes.key?(:'unit_bargain_discountsubtotal')
        self.unit_bargain_discountsubtotal = attributes[:'unit_bargain_discountsubtotal']
      end

      if attributes.key?(:'subtotal')
        self.subtotal = attributes[:'subtotal']
      end

      if attributes.key?(:'subtotal_for_discount')
        self.subtotal_for_discount = attributes[:'subtotal_for_discount']
      end

      if attributes.key?(:'subtotal_discount_price')
        self.subtotal_discount_price = attributes[:'subtotal_discount_price']
      end

      if attributes.key?(:'subtotal_discount_rate')
        self.subtotal_discount_rate = attributes[:'subtotal_discount_rate']
      end

      if attributes.key?(:'subtotal_discount_division')
        self.subtotal_discount_division = attributes[:'subtotal_discount_division']
      end

      if attributes.key?(:'point_discount')
        self.point_discount = attributes[:'point_discount']
      end

      if attributes.key?(:'total')
        self.total = attributes[:'total']
      end

      if attributes.key?(:'tax_include')
        self.tax_include = attributes[:'tax_include']
      end

      if attributes.key?(:'tax_exclude')
        self.tax_exclude = attributes[:'tax_exclude']
      end

      if attributes.key?(:'rounding_division')
        self.rounding_division = attributes[:'rounding_division']
      end

      if attributes.key?(:'rounding_price')
        self.rounding_price = attributes[:'rounding_price']
      end

      if attributes.key?(:'cash_total')
        self.cash_total = attributes[:'cash_total']
      end

      if attributes.key?(:'credit_total')
        self.credit_total = attributes[:'credit_total']
      end

      if attributes.key?(:'deposit')
        self.deposit = attributes[:'deposit']
      end

      if attributes.key?(:'deposit_cash')
        self.deposit_cash = attributes[:'deposit_cash']
      end

      if attributes.key?(:'deposit_credit')
        self.deposit_credit = attributes[:'deposit_credit']
      end

      if attributes.key?(:'change')
        self.change = attributes[:'change']
      end

      if attributes.key?(:'tip_cash')
        self.tip_cash = attributes[:'tip_cash']
      end

      if attributes.key?(:'tip_credit')
        self.tip_credit = attributes[:'tip_credit']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'return_amount')
        self.return_amount = attributes[:'return_amount']
      end

      if attributes.key?(:'cost_total')
        self.cost_total = attributes[:'cost_total']
      end

      if attributes.key?(:'sales_head_division')
        self.sales_head_division = attributes[:'sales_head_division']
      end

      if attributes.key?(:'in_tax_sales_total')
        self.in_tax_sales_total = attributes[:'in_tax_sales_total']
      end

      if attributes.key?(:'out_tax_sales_total')
        self.out_tax_sales_total = attributes[:'out_tax_sales_total']
      end

      if attributes.key?(:'non_tax_sales_total')
        self.non_tax_sales_total = attributes[:'non_tax_sales_total']
      end

      if attributes.key?(:'non_sales_target_total')
        self.non_sales_target_total = attributes[:'non_sales_target_total']
      end

      if attributes.key?(:'non_sales_target_in_tax_total')
        self.non_sales_target_in_tax_total = attributes[:'non_sales_target_in_tax_total']
      end

      if attributes.key?(:'non_sales_target_out_tax_total')
        self.non_sales_target_out_tax_total = attributes[:'non_sales_target_out_tax_total']
      end

      if attributes.key?(:'non_sales_target_tax_free_total')
        self.non_sales_target_tax_free_total = attributes[:'non_sales_target_tax_free_total']
      end

      if attributes.key?(:'non_sales_target_cost_total')
        self.non_sales_target_cost_total = attributes[:'non_sales_target_cost_total']
      end

      if attributes.key?(:'non_sales_target_amount')
        self.non_sales_target_amount = attributes[:'non_sales_target_amount']
      end

      if attributes.key?(:'non_sales_target_return_amount')
        self.non_sales_target_return_amount = attributes[:'non_sales_target_return_amount']
      end

      if attributes.key?(:'new_point')
        self.new_point = attributes[:'new_point']
      end

      if attributes.key?(:'spend_point')
        self.spend_point = attributes[:'spend_point']
      end

      if attributes.key?(:'point')
        self.point = attributes[:'point']
      end

      if attributes.key?(:'total_point')
        self.total_point = attributes[:'total_point']
      end

      if attributes.key?(:'current_mile')
        self.current_mile = attributes[:'current_mile']
      end

      if attributes.key?(:'earn_mile')
        self.earn_mile = attributes[:'earn_mile']
      end

      if attributes.key?(:'total_mile')
        self.total_mile = attributes[:'total_mile']
      end

      if attributes.key?(:'adjustment_mile')
        self.adjustment_mile = attributes[:'adjustment_mile']
      end

      if attributes.key?(:'adjustment_mile_division')
        self.adjustment_mile_division = attributes[:'adjustment_mile_division']
      end

      if attributes.key?(:'adjustment_mile_value')
        self.adjustment_mile_value = attributes[:'adjustment_mile_value']
      end

      if attributes.key?(:'store_id')
        self.store_id = attributes[:'store_id']
      end

      if attributes.key?(:'store_code')
        self.store_code = attributes[:'store_code']
      end

      if attributes.key?(:'terminal_id')
        self.terminal_id = attributes[:'terminal_id']
      end

      if attributes.key?(:'customer_id')
        self.customer_id = attributes[:'customer_id']
      end

      if attributes.key?(:'customer_code')
        self.customer_code = attributes[:'customer_code']
      end

      if attributes.key?(:'terminal_tran_id')
        self.terminal_tran_id = attributes[:'terminal_tran_id']
      end

      if attributes.key?(:'terminal_tran_date_time')
        self.terminal_tran_date_time = attributes[:'terminal_tran_date_time']
      end

      if attributes.key?(:'sum_division')
        self.sum_division = attributes[:'sum_division']
      end

      if attributes.key?(:'adjustment_date_time')
        self.adjustment_date_time = attributes[:'adjustment_date_time']
      end

      if attributes.key?(:'sum_date')
        self.sum_date = attributes[:'sum_date']
      end

      if attributes.key?(:'customer_rank')
        self.customer_rank = attributes[:'customer_rank']
      end

      if attributes.key?(:'customer_group_id')
        self.customer_group_id = attributes[:'customer_group_id']
      end

      if attributes.key?(:'customer_group_id2')
        self.customer_group_id2 = attributes[:'customer_group_id2']
      end

      if attributes.key?(:'customer_group_id3')
        self.customer_group_id3 = attributes[:'customer_group_id3']
      end

      if attributes.key?(:'customer_group_id4')
        self.customer_group_id4 = attributes[:'customer_group_id4']
      end

      if attributes.key?(:'customer_group_id5')
        self.customer_group_id5 = attributes[:'customer_group_id5']
      end

      if attributes.key?(:'staff_id')
        self.staff_id = attributes[:'staff_id']
      end

      if attributes.key?(:'staff_code')
        self.staff_code = attributes[:'staff_code']
      end

      if attributes.key?(:'staff_name')
        self.staff_name = attributes[:'staff_name']
      end

      if attributes.key?(:'credit_division')
        self.credit_division = attributes[:'credit_division']
      end

      if attributes.key?(:'payment_count')
        self.payment_count = attributes[:'payment_count']
      end

      if attributes.key?(:'slip_number')
        self.slip_number = attributes[:'slip_number']
      end

      if attributes.key?(:'cancel_slip_number')
        self.cancel_slip_number = attributes[:'cancel_slip_number']
      end

      if attributes.key?(:'auth_number')
        self.auth_number = attributes[:'auth_number']
      end

      if attributes.key?(:'auth_date')
        self.auth_date = attributes[:'auth_date']
      end

      if attributes.key?(:'card_company')
        self.card_company = attributes[:'card_company']
      end

      if attributes.key?(:'denomination')
        self.denomination = attributes[:'denomination']
      end

      if attributes.key?(:'memo')
        self.memo = attributes[:'memo']
      end

      if attributes.key?(:'receipt_memo')
        self.receipt_memo = attributes[:'receipt_memo']
      end

      if attributes.key?(:'carriage')
        self.carriage = attributes[:'carriage']
      end

      if attributes.key?(:'commission')
        self.commission = attributes[:'commission']
      end

      if attributes.key?(:'guest_numbers')
        self.guest_numbers = attributes[:'guest_numbers']
      end

      if attributes.key?(:'guest_numbers_male')
        self.guest_numbers_male = attributes[:'guest_numbers_male']
      end

      if attributes.key?(:'guest_numbers_female')
        self.guest_numbers_female = attributes[:'guest_numbers_female']
      end

      if attributes.key?(:'guest_numbers_unknown')
        self.guest_numbers_unknown = attributes[:'guest_numbers_unknown']
      end

      if attributes.key?(:'enter_date_time')
        self.enter_date_time = attributes[:'enter_date_time']
      end

      if attributes.key?(:'tax_free_sales_division')
        self.tax_free_sales_division = attributes[:'tax_free_sales_division']
      end

      if attributes.key?(:'net_tax_free_general_tax_include')
        self.net_tax_free_general_tax_include = attributes[:'net_tax_free_general_tax_include']
      end

      if attributes.key?(:'net_tax_free_general_tax_exclude')
        self.net_tax_free_general_tax_exclude = attributes[:'net_tax_free_general_tax_exclude']
      end

      if attributes.key?(:'net_tax_free_consumable_tax_include')
        self.net_tax_free_consumable_tax_include = attributes[:'net_tax_free_consumable_tax_include']
      end

      if attributes.key?(:'net_tax_free_consumable_tax_exclude')
        self.net_tax_free_consumable_tax_exclude = attributes[:'net_tax_free_consumable_tax_exclude']
      end

      if attributes.key?(:'tags')
        self.tags = attributes[:'tags']
      end

      if attributes.key?(:'point_giving_division')
        self.point_giving_division = attributes[:'point_giving_division']
      end

      if attributes.key?(:'point_giving_unit_price')
        self.point_giving_unit_price = attributes[:'point_giving_unit_price']
      end

      if attributes.key?(:'point_giving_unit')
        self.point_giving_unit = attributes[:'point_giving_unit']
      end

      if attributes.key?(:'point_spend_division')
        self.point_spend_division = attributes[:'point_spend_division']
      end

      if attributes.key?(:'mileage_division')
        self.mileage_division = attributes[:'mileage_division']
      end

      if attributes.key?(:'mileage_label')
        self.mileage_label = attributes[:'mileage_label']
      end

      if attributes.key?(:'customer_pin_code')
        self.customer_pin_code = attributes[:'customer_pin_code']
      end

      if attributes.key?(:'return_sales')
        self.return_sales = attributes[:'return_sales']
      end

      if attributes.key?(:'dispose_division')
        self.dispose_division = attributes[:'dispose_division']
      end

      if attributes.key?(:'dispose_server_transaction_head_id')
        self.dispose_server_transaction_head_id = attributes[:'dispose_server_transaction_head_id']
      end

      if attributes.key?(:'cancel_date_time')
        self.cancel_date_time = attributes[:'cancel_date_time']
      end

      if attributes.key?(:'sell_division')
        self.sell_division = attributes[:'sell_division']
      end

      if attributes.key?(:'tax_rate')
        self.tax_rate = attributes[:'tax_rate']
      end

      if attributes.key?(:'tax_rounding')
        self.tax_rounding = attributes[:'tax_rounding']
      end

      if attributes.key?(:'discount_rounding_division')
        self.discount_rounding_division = attributes[:'discount_rounding_division']
      end

      if attributes.key?(:'transaction_uuid')
        self.transaction_uuid = attributes[:'transaction_uuid']
      end

      if attributes.key?(:'exchange_ticket_no')
        self.exchange_ticket_no = attributes[:'exchange_ticket_no']
      end

      if attributes.key?(:'gift_receipt_valid_days')
        self.gift_receipt_valid_days = attributes[:'gift_receipt_valid_days']
      end

      if attributes.key?(:'upd_date_time')
        self.upd_date_time = attributes[:'upd_date_time']
      end

      if attributes.key?(:'layaway')
        self.layaway = attributes[:'layaway']
      end

      if attributes.key?(:'layaway_pick_up')
        self.layaway_pick_up = attributes[:'layaway_pick_up']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @transaction_head_id.nil?
        invalid_properties.push('invalid value for "transaction_head_id", transaction_head_id cannot be nil.')
      end

      if @transaction_head_id.to_s.length < 1
        invalid_properties.push('invalid value for "transaction_head_id", the character length must be great than or equal to 1.')
      end

      if !@transaction_date_time.nil? && @transaction_date_time.to_s.length < 1
        invalid_properties.push('invalid value for "transaction_date_time", the character length must be great than or equal to 1.')
      end

      if @transaction_head_division.nil?
        invalid_properties.push('invalid value for "transaction_head_division", transaction_head_division cannot be nil.')
      end

      if !@unit_non_discountsubtotal.nil? && @unit_non_discountsubtotal.to_s.length < 1
        invalid_properties.push('invalid value for "unit_non_discountsubtotal", the character length must be great than or equal to 1.')
      end

      if !@unit_discountsubtotal.nil? && @unit_discountsubtotal.to_s.length < 1
        invalid_properties.push('invalid value for "unit_discountsubtotal", the character length must be great than or equal to 1.')
      end

      if !@unit_staff_discountsubtotal.nil? && @unit_staff_discountsubtotal.to_s.length < 1
        invalid_properties.push('invalid value for "unit_staff_discountsubtotal", the character length must be great than or equal to 1.')
      end

      if !@unit_bargain_discountsubtotal.nil? && @unit_bargain_discountsubtotal.to_s.length < 1
        invalid_properties.push('invalid value for "unit_bargain_discountsubtotal", the character length must be great than or equal to 1.')
      end

      if @subtotal.nil?
        invalid_properties.push('invalid value for "subtotal", subtotal cannot be nil.')
      end

      if @subtotal.to_s.length < 1
        invalid_properties.push('invalid value for "subtotal", the character length must be great than or equal to 1.')
      end

      if !@subtotal_for_discount.nil? && @subtotal_for_discount.to_s.length < 1
        invalid_properties.push('invalid value for "subtotal_for_discount", the character length must be great than or equal to 1.')
      end

      if !@subtotal_discount_price.nil? && @subtotal_discount_price.to_s.length < 1
        invalid_properties.push('invalid value for "subtotal_discount_price", the character length must be great than or equal to 1.')
      end

      if !@subtotal_discount_rate.nil? && @subtotal_discount_rate.to_s.length < 1
        invalid_properties.push('invalid value for "subtotal_discount_rate", the character length must be great than or equal to 1.')
      end

      if !@subtotal_discount_division.nil? && @subtotal_discount_division.to_s.length < 1
        invalid_properties.push('invalid value for "subtotal_discount_division", the character length must be great than or equal to 1.')
      end

      if !@point_discount.nil? && @point_discount.to_s.length < 1
        invalid_properties.push('invalid value for "point_discount", the character length must be great than or equal to 1.')
      end

      if @total.nil?
        invalid_properties.push('invalid value for "total", total cannot be nil.')
      end

      if @total.to_s.length < 1
        invalid_properties.push('invalid value for "total", the character length must be great than or equal to 1.')
      end

      if !@tax_include.nil? && @tax_include.to_s.length < 1
        invalid_properties.push('invalid value for "tax_include", the character length must be great than or equal to 1.')
      end

      if !@tax_exclude.nil? && @tax_exclude.to_s.length < 1
        invalid_properties.push('invalid value for "tax_exclude", the character length must be great than or equal to 1.')
      end

      if !@rounding_division.nil? && @rounding_division.to_s.length < 1
        invalid_properties.push('invalid value for "rounding_division", the character length must be great than or equal to 1.')
      end

      if !@rounding_price.nil? && @rounding_price.to_s.length < 1
        invalid_properties.push('invalid value for "rounding_price", the character length must be great than or equal to 1.')
      end

      if !@cash_total.nil? && @cash_total.to_s.length < 1
        invalid_properties.push('invalid value for "cash_total", the character length must be great than or equal to 1.')
      end

      if !@credit_total.nil? && @credit_total.to_s.length < 1
        invalid_properties.push('invalid value for "credit_total", the character length must be great than or equal to 1.')
      end

      if !@deposit.nil? && @deposit.to_s.length < 1
        invalid_properties.push('invalid value for "deposit", the character length must be great than or equal to 1.')
      end

      if !@deposit_cash.nil? && @deposit_cash.to_s.length < 1
        invalid_properties.push('invalid value for "deposit_cash", the character length must be great than or equal to 1.')
      end

      if !@deposit_credit.nil? && @deposit_credit.to_s.length < 1
        invalid_properties.push('invalid value for "deposit_credit", the character length must be great than or equal to 1.')
      end

      if !@change.nil? && @change.to_s.length < 1
        invalid_properties.push('invalid value for "change", the character length must be great than or equal to 1.')
      end

      if !@tip_cash.nil? && @tip_cash.to_s.length < 1
        invalid_properties.push('invalid value for "tip_cash", the character length must be great than or equal to 1.')
      end

      if !@tip_credit.nil? && @tip_credit.to_s.length < 1
        invalid_properties.push('invalid value for "tip_credit", the character length must be great than or equal to 1.')
      end

      if !@amount.nil? && @amount.to_s.length < 1
        invalid_properties.push('invalid value for "amount", the character length must be great than or equal to 1.')
      end

      if !@return_amount.nil? && @return_amount.to_s.length < 1
        invalid_properties.push('invalid value for "return_amount", the character length must be great than or equal to 1.')
      end

      if !@cost_total.nil? && @cost_total.to_s.length < 1
        invalid_properties.push('invalid value for "cost_total", the character length must be great than or equal to 1.')
      end

      if !@sales_head_division.nil? && @sales_head_division.to_s.length < 1
        invalid_properties.push('invalid value for "sales_head_division", the character length must be great than or equal to 1.')
      end

      if !@in_tax_sales_total.nil? && @in_tax_sales_total.to_s.length < 1
        invalid_properties.push('invalid value for "in_tax_sales_total", the character length must be great than or equal to 1.')
      end

      if !@out_tax_sales_total.nil? && @out_tax_sales_total.to_s.length < 1
        invalid_properties.push('invalid value for "out_tax_sales_total", the character length must be great than or equal to 1.')
      end

      if !@non_tax_sales_total.nil? && @non_tax_sales_total.to_s.length < 1
        invalid_properties.push('invalid value for "non_tax_sales_total", the character length must be great than or equal to 1.')
      end

      if !@non_sales_target_total.nil? && @non_sales_target_total.to_s.length < 1
        invalid_properties.push('invalid value for "non_sales_target_total", the character length must be great than or equal to 1.')
      end

      if !@non_sales_target_in_tax_total.nil? && @non_sales_target_in_tax_total.to_s.length < 1
        invalid_properties.push('invalid value for "non_sales_target_in_tax_total", the character length must be great than or equal to 1.')
      end

      if !@non_sales_target_out_tax_total.nil? && @non_sales_target_out_tax_total.to_s.length < 1
        invalid_properties.push('invalid value for "non_sales_target_out_tax_total", the character length must be great than or equal to 1.')
      end

      if !@non_sales_target_tax_free_total.nil? && @non_sales_target_tax_free_total.to_s.length < 1
        invalid_properties.push('invalid value for "non_sales_target_tax_free_total", the character length must be great than or equal to 1.')
      end

      if !@non_sales_target_cost_total.nil? && @non_sales_target_cost_total.to_s.length < 1
        invalid_properties.push('invalid value for "non_sales_target_cost_total", the character length must be great than or equal to 1.')
      end

      if !@non_sales_target_amount.nil? && @non_sales_target_amount.to_s.length < 1
        invalid_properties.push('invalid value for "non_sales_target_amount", the character length must be great than or equal to 1.')
      end

      if !@non_sales_target_return_amount.nil? && @non_sales_target_return_amount.to_s.length < 1
        invalid_properties.push('invalid value for "non_sales_target_return_amount", the character length must be great than or equal to 1.')
      end

      if !@new_point.nil? && @new_point.to_s.length < 1
        invalid_properties.push('invalid value for "new_point", the character length must be great than or equal to 1.')
      end

      if !@spend_point.nil? && @spend_point.to_s.length < 1
        invalid_properties.push('invalid value for "spend_point", the character length must be great than or equal to 1.')
      end

      if !@point.nil? && @point.to_s.length < 1
        invalid_properties.push('invalid value for "point", the character length must be great than or equal to 1.')
      end

      if !@total_point.nil? && @total_point.to_s.length < 1
        invalid_properties.push('invalid value for "total_point", the character length must be great than or equal to 1.')
      end

      if !@current_mile.nil? && @current_mile.to_s.length < 1
        invalid_properties.push('invalid value for "current_mile", the character length must be great than or equal to 1.')
      end

      if !@earn_mile.nil? && @earn_mile.to_s.length < 1
        invalid_properties.push('invalid value for "earn_mile", the character length must be great than or equal to 1.')
      end

      if !@total_mile.nil? && @total_mile.to_s.length < 1
        invalid_properties.push('invalid value for "total_mile", the character length must be great than or equal to 1.')
      end

      if !@adjustment_mile.nil? && @adjustment_mile.to_s.length < 1
        invalid_properties.push('invalid value for "adjustment_mile", the character length must be great than or equal to 1.')
      end

      if !@adjustment_mile_division.nil? && @adjustment_mile_division.to_s.length < 1
        invalid_properties.push('invalid value for "adjustment_mile_division", the character length must be great than or equal to 1.')
      end

      if !@adjustment_mile_value.nil? && @adjustment_mile_value.to_s.length < 1
        invalid_properties.push('invalid value for "adjustment_mile_value", the character length must be great than or equal to 1.')
      end

      if !@store_id.nil? && @store_id.to_s.length < 1
        invalid_properties.push('invalid value for "store_id", the character length must be great than or equal to 1.')
      end

      if !@store_code.nil? && @store_code.to_s.length < 1
        invalid_properties.push('invalid value for "store_code", the character length must be great than or equal to 1.')
      end

      if !@terminal_id.nil? && @terminal_id.to_s.length < 1
        invalid_properties.push('invalid value for "terminal_id", the character length must be great than or equal to 1.')
      end

      if !@customer_id.nil? && @customer_id.to_s.length < 1
        invalid_properties.push('invalid value for "customer_id", the character length must be great than or equal to 1.')
      end

      if !@customer_code.nil? && @customer_code.to_s.length < 1
        invalid_properties.push('invalid value for "customer_code", the character length must be great than or equal to 1.')
      end

      if !@terminal_tran_id.nil? && @terminal_tran_id.to_s.length < 1
        invalid_properties.push('invalid value for "terminal_tran_id", the character length must be great than or equal to 1.')
      end

      if @terminal_tran_date_time.nil?
        invalid_properties.push('invalid value for "terminal_tran_date_time", terminal_tran_date_time cannot be nil.')
      end

      if @terminal_tran_date_time.to_s.length < 1
        invalid_properties.push('invalid value for "terminal_tran_date_time", the character length must be great than or equal to 1.')
      end

      if !@sum_division.nil? && @sum_division.to_s.length < 1
        invalid_properties.push('invalid value for "sum_division", the character length must be great than or equal to 1.')
      end

      if !@adjustment_date_time.nil? && @adjustment_date_time.to_s.length < 1
        invalid_properties.push('invalid value for "adjustment_date_time", the character length must be great than or equal to 1.')
      end

      if !@sum_date.nil? && @sum_date.to_s.length < 1
        invalid_properties.push('invalid value for "sum_date", the character length must be great than or equal to 1.')
      end

      if !@customer_rank.nil? && @customer_rank.to_s.length < 1
        invalid_properties.push('invalid value for "customer_rank", the character length must be great than or equal to 1.')
      end

      if !@customer_group_id.nil? && @customer_group_id.to_s.length < 1
        invalid_properties.push('invalid value for "customer_group_id", the character length must be great than or equal to 1.')
      end

      if !@customer_group_id2.nil? && @customer_group_id2.to_s.length < 1
        invalid_properties.push('invalid value for "customer_group_id2", the character length must be great than or equal to 1.')
      end

      if !@customer_group_id3.nil? && @customer_group_id3.to_s.length < 1
        invalid_properties.push('invalid value for "customer_group_id3", the character length must be great than or equal to 1.')
      end

      if !@customer_group_id4.nil? && @customer_group_id4.to_s.length < 1
        invalid_properties.push('invalid value for "customer_group_id4", the character length must be great than or equal to 1.')
      end

      if !@customer_group_id5.nil? && @customer_group_id5.to_s.length < 1
        invalid_properties.push('invalid value for "customer_group_id5", the character length must be great than or equal to 1.')
      end

      if !@staff_id.nil? && @staff_id.to_s.length < 1
        invalid_properties.push('invalid value for "staff_id", the character length must be great than or equal to 1.')
      end

      if !@staff_code.nil? && @staff_code.to_s.length < 1
        invalid_properties.push('invalid value for "staff_code", the character length must be great than or equal to 1.')
      end

      if !@staff_name.nil? && @staff_name.to_s.length < 1
        invalid_properties.push('invalid value for "staff_name", the character length must be great than or equal to 1.')
      end

      if !@credit_division.nil? && @credit_division.to_s.length < 1
        invalid_properties.push('invalid value for "credit_division", the character length must be great than or equal to 1.')
      end

      if !@payment_count.nil? && @payment_count.to_s.length < 1
        invalid_properties.push('invalid value for "payment_count", the character length must be great than or equal to 1.')
      end

      if !@slip_number.nil? && @slip_number.to_s.length < 1
        invalid_properties.push('invalid value for "slip_number", the character length must be great than or equal to 1.')
      end

      if !@cancel_slip_number.nil? && @cancel_slip_number.to_s.length < 1
        invalid_properties.push('invalid value for "cancel_slip_number", the character length must be great than or equal to 1.')
      end

      if !@auth_number.nil? && @auth_number.to_s.length < 1
        invalid_properties.push('invalid value for "auth_number", the character length must be great than or equal to 1.')
      end

      if !@auth_date.nil? && @auth_date.to_s.length < 1
        invalid_properties.push('invalid value for "auth_date", the character length must be great than or equal to 1.')
      end

      if !@card_company.nil? && @card_company.to_s.length < 1
        invalid_properties.push('invalid value for "card_company", the character length must be great than or equal to 1.')
      end

      if !@denomination.nil? && @denomination.to_s.length < 1
        invalid_properties.push('invalid value for "denomination", the character length must be great than or equal to 1.')
      end

      if !@memo.nil? && @memo.to_s.length < 1
        invalid_properties.push('invalid value for "memo", the character length must be great than or equal to 1.')
      end

      if !@receipt_memo.nil? && @receipt_memo.to_s.length < 1
        invalid_properties.push('invalid value for "receipt_memo", the character length must be great than or equal to 1.')
      end

      if !@carriage.nil? && @carriage.to_s.length < 1
        invalid_properties.push('invalid value for "carriage", the character length must be great than or equal to 1.')
      end

      if !@commission.nil? && @commission.to_s.length < 1
        invalid_properties.push('invalid value for "commission", the character length must be great than or equal to 1.')
      end

      if !@guest_numbers.nil? && @guest_numbers.to_s.length < 1
        invalid_properties.push('invalid value for "guest_numbers", the character length must be great than or equal to 1.')
      end

      if !@guest_numbers_male.nil? && @guest_numbers_male.to_s.length < 1
        invalid_properties.push('invalid value for "guest_numbers_male", the character length must be great than or equal to 1.')
      end

      if !@guest_numbers_female.nil? && @guest_numbers_female.to_s.length < 1
        invalid_properties.push('invalid value for "guest_numbers_female", the character length must be great than or equal to 1.')
      end

      if !@guest_numbers_unknown.nil? && @guest_numbers_unknown.to_s.length < 1
        invalid_properties.push('invalid value for "guest_numbers_unknown", the character length must be great than or equal to 1.')
      end

      if !@enter_date_time.nil? && @enter_date_time.to_s.length < 1
        invalid_properties.push('invalid value for "enter_date_time", the character length must be great than or equal to 1.')
      end

      if !@tax_free_sales_division.nil? && @tax_free_sales_division.to_s.length < 1
        invalid_properties.push('invalid value for "tax_free_sales_division", the character length must be great than or equal to 1.')
      end

      if !@net_tax_free_general_tax_include.nil? && @net_tax_free_general_tax_include.to_s.length < 1
        invalid_properties.push('invalid value for "net_tax_free_general_tax_include", the character length must be great than or equal to 1.')
      end

      if !@net_tax_free_general_tax_exclude.nil? && @net_tax_free_general_tax_exclude.to_s.length < 1
        invalid_properties.push('invalid value for "net_tax_free_general_tax_exclude", the character length must be great than or equal to 1.')
      end

      if !@net_tax_free_consumable_tax_include.nil? && @net_tax_free_consumable_tax_include.to_s.length < 1
        invalid_properties.push('invalid value for "net_tax_free_consumable_tax_include", the character length must be great than or equal to 1.')
      end

      if !@net_tax_free_consumable_tax_exclude.nil? && @net_tax_free_consumable_tax_exclude.to_s.length < 1
        invalid_properties.push('invalid value for "net_tax_free_consumable_tax_exclude", the character length must be great than or equal to 1.')
      end

      if !@tags.nil? && @tags.to_s.length < 1
        invalid_properties.push('invalid value for "tags", the character length must be great than or equal to 1.')
      end

      if !@point_giving_division.nil? && @point_giving_division.to_s.length < 1
        invalid_properties.push('invalid value for "point_giving_division", the character length must be great than or equal to 1.')
      end

      if !@point_giving_unit_price.nil? && @point_giving_unit_price.to_s.length < 1
        invalid_properties.push('invalid value for "point_giving_unit_price", the character length must be great than or equal to 1.')
      end

      if !@point_giving_unit.nil? && @point_giving_unit.to_s.length < 1
        invalid_properties.push('invalid value for "point_giving_unit", the character length must be great than or equal to 1.')
      end

      if !@point_spend_division.nil? && @point_spend_division.to_s.length < 1
        invalid_properties.push('invalid value for "point_spend_division", the character length must be great than or equal to 1.')
      end

      if !@mileage_division.nil? && @mileage_division.to_s.length < 1
        invalid_properties.push('invalid value for "mileage_division", the character length must be great than or equal to 1.')
      end

      if !@mileage_label.nil? && @mileage_label.to_s.length < 1
        invalid_properties.push('invalid value for "mileage_label", the character length must be great than or equal to 1.')
      end

      if !@customer_pin_code.nil? && @customer_pin_code.to_s.length < 1
        invalid_properties.push('invalid value for "customer_pin_code", the character length must be great than or equal to 1.')
      end

      if @return_sales.nil?
        invalid_properties.push('invalid value for "return_sales", return_sales cannot be nil.')
      end

      if !@dispose_server_transaction_head_id.nil? && @dispose_server_transaction_head_id.to_s.length < 1
        invalid_properties.push('invalid value for "dispose_server_transaction_head_id", the character length must be great than or equal to 1.')
      end

      if !@cancel_date_time.nil? && @cancel_date_time.to_s.length < 1
        invalid_properties.push('invalid value for "cancel_date_time", the character length must be great than or equal to 1.')
      end

      if !@sell_division.nil? && @sell_division.to_s.length < 1
        invalid_properties.push('invalid value for "sell_division", the character length must be great than or equal to 1.')
      end

      if !@tax_rate.nil? && @tax_rate.to_s.length < 1
        invalid_properties.push('invalid value for "tax_rate", the character length must be great than or equal to 1.')
      end

      if !@tax_rounding.nil? && @tax_rounding.to_s.length < 1
        invalid_properties.push('invalid value for "tax_rounding", the character length must be great than or equal to 1.')
      end

      if !@discount_rounding_division.nil? && @discount_rounding_division.to_s.length < 1
        invalid_properties.push('invalid value for "discount_rounding_division", the character length must be great than or equal to 1.')
      end

      if !@transaction_uuid.nil? && @transaction_uuid.to_s.length < 1
        invalid_properties.push('invalid value for "transaction_uuid", the character length must be great than or equal to 1.')
      end

      if !@exchange_ticket_no.nil? && @exchange_ticket_no.to_s.length < 1
        invalid_properties.push('invalid value for "exchange_ticket_no", the character length must be great than or equal to 1.')
      end

      if !@gift_receipt_valid_days.nil? && @gift_receipt_valid_days.to_s.length < 1
        invalid_properties.push('invalid value for "gift_receipt_valid_days", the character length must be great than or equal to 1.')
      end

      if !@upd_date_time.nil? && @upd_date_time.to_s.length < 1
        invalid_properties.push('invalid value for "upd_date_time", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @transaction_head_id.nil?
      return false if @transaction_head_id.to_s.length < 1
      return false if !@transaction_date_time.nil? && @transaction_date_time.to_s.length < 1
      return false if @transaction_head_division.nil?
      return false if !@unit_non_discountsubtotal.nil? && @unit_non_discountsubtotal.to_s.length < 1
      return false if !@unit_discountsubtotal.nil? && @unit_discountsubtotal.to_s.length < 1
      return false if !@unit_staff_discountsubtotal.nil? && @unit_staff_discountsubtotal.to_s.length < 1
      return false if !@unit_bargain_discountsubtotal.nil? && @unit_bargain_discountsubtotal.to_s.length < 1
      return false if @subtotal.nil?
      return false if @subtotal.to_s.length < 1
      return false if !@subtotal_for_discount.nil? && @subtotal_for_discount.to_s.length < 1
      return false if !@subtotal_discount_price.nil? && @subtotal_discount_price.to_s.length < 1
      return false if !@subtotal_discount_rate.nil? && @subtotal_discount_rate.to_s.length < 1
      return false if !@subtotal_discount_division.nil? && @subtotal_discount_division.to_s.length < 1
      return false if !@point_discount.nil? && @point_discount.to_s.length < 1
      return false if @total.nil?
      return false if @total.to_s.length < 1
      return false if !@tax_include.nil? && @tax_include.to_s.length < 1
      return false if !@tax_exclude.nil? && @tax_exclude.to_s.length < 1
      return false if !@rounding_division.nil? && @rounding_division.to_s.length < 1
      return false if !@rounding_price.nil? && @rounding_price.to_s.length < 1
      return false if !@cash_total.nil? && @cash_total.to_s.length < 1
      return false if !@credit_total.nil? && @credit_total.to_s.length < 1
      return false if !@deposit.nil? && @deposit.to_s.length < 1
      return false if !@deposit_cash.nil? && @deposit_cash.to_s.length < 1
      return false if !@deposit_credit.nil? && @deposit_credit.to_s.length < 1
      return false if !@change.nil? && @change.to_s.length < 1
      return false if !@tip_cash.nil? && @tip_cash.to_s.length < 1
      return false if !@tip_credit.nil? && @tip_credit.to_s.length < 1
      return false if !@amount.nil? && @amount.to_s.length < 1
      return false if !@return_amount.nil? && @return_amount.to_s.length < 1
      return false if !@cost_total.nil? && @cost_total.to_s.length < 1
      return false if !@sales_head_division.nil? && @sales_head_division.to_s.length < 1
      return false if !@in_tax_sales_total.nil? && @in_tax_sales_total.to_s.length < 1
      return false if !@out_tax_sales_total.nil? && @out_tax_sales_total.to_s.length < 1
      return false if !@non_tax_sales_total.nil? && @non_tax_sales_total.to_s.length < 1
      return false if !@non_sales_target_total.nil? && @non_sales_target_total.to_s.length < 1
      return false if !@non_sales_target_in_tax_total.nil? && @non_sales_target_in_tax_total.to_s.length < 1
      return false if !@non_sales_target_out_tax_total.nil? && @non_sales_target_out_tax_total.to_s.length < 1
      return false if !@non_sales_target_tax_free_total.nil? && @non_sales_target_tax_free_total.to_s.length < 1
      return false if !@non_sales_target_cost_total.nil? && @non_sales_target_cost_total.to_s.length < 1
      return false if !@non_sales_target_amount.nil? && @non_sales_target_amount.to_s.length < 1
      return false if !@non_sales_target_return_amount.nil? && @non_sales_target_return_amount.to_s.length < 1
      return false if !@new_point.nil? && @new_point.to_s.length < 1
      return false if !@spend_point.nil? && @spend_point.to_s.length < 1
      return false if !@point.nil? && @point.to_s.length < 1
      return false if !@total_point.nil? && @total_point.to_s.length < 1
      return false if !@current_mile.nil? && @current_mile.to_s.length < 1
      return false if !@earn_mile.nil? && @earn_mile.to_s.length < 1
      return false if !@total_mile.nil? && @total_mile.to_s.length < 1
      return false if !@adjustment_mile.nil? && @adjustment_mile.to_s.length < 1
      return false if !@adjustment_mile_division.nil? && @adjustment_mile_division.to_s.length < 1
      return false if !@adjustment_mile_value.nil? && @adjustment_mile_value.to_s.length < 1
      return false if !@store_id.nil? && @store_id.to_s.length < 1
      return false if !@store_code.nil? && @store_code.to_s.length < 1
      return false if !@terminal_id.nil? && @terminal_id.to_s.length < 1
      return false if !@customer_id.nil? && @customer_id.to_s.length < 1
      return false if !@customer_code.nil? && @customer_code.to_s.length < 1
      return false if !@terminal_tran_id.nil? && @terminal_tran_id.to_s.length < 1
      return false if @terminal_tran_date_time.nil?
      return false if @terminal_tran_date_time.to_s.length < 1
      return false if !@sum_division.nil? && @sum_division.to_s.length < 1
      return false if !@adjustment_date_time.nil? && @adjustment_date_time.to_s.length < 1
      return false if !@sum_date.nil? && @sum_date.to_s.length < 1
      return false if !@customer_rank.nil? && @customer_rank.to_s.length < 1
      return false if !@customer_group_id.nil? && @customer_group_id.to_s.length < 1
      return false if !@customer_group_id2.nil? && @customer_group_id2.to_s.length < 1
      return false if !@customer_group_id3.nil? && @customer_group_id3.to_s.length < 1
      return false if !@customer_group_id4.nil? && @customer_group_id4.to_s.length < 1
      return false if !@customer_group_id5.nil? && @customer_group_id5.to_s.length < 1
      return false if !@staff_id.nil? && @staff_id.to_s.length < 1
      return false if !@staff_code.nil? && @staff_code.to_s.length < 1
      return false if !@staff_name.nil? && @staff_name.to_s.length < 1
      return false if !@credit_division.nil? && @credit_division.to_s.length < 1
      return false if !@payment_count.nil? && @payment_count.to_s.length < 1
      return false if !@slip_number.nil? && @slip_number.to_s.length < 1
      return false if !@cancel_slip_number.nil? && @cancel_slip_number.to_s.length < 1
      return false if !@auth_number.nil? && @auth_number.to_s.length < 1
      return false if !@auth_date.nil? && @auth_date.to_s.length < 1
      return false if !@card_company.nil? && @card_company.to_s.length < 1
      return false if !@denomination.nil? && @denomination.to_s.length < 1
      return false if !@memo.nil? && @memo.to_s.length < 1
      return false if !@receipt_memo.nil? && @receipt_memo.to_s.length < 1
      return false if !@carriage.nil? && @carriage.to_s.length < 1
      return false if !@commission.nil? && @commission.to_s.length < 1
      return false if !@guest_numbers.nil? && @guest_numbers.to_s.length < 1
      return false if !@guest_numbers_male.nil? && @guest_numbers_male.to_s.length < 1
      return false if !@guest_numbers_female.nil? && @guest_numbers_female.to_s.length < 1
      return false if !@guest_numbers_unknown.nil? && @guest_numbers_unknown.to_s.length < 1
      return false if !@enter_date_time.nil? && @enter_date_time.to_s.length < 1
      return false if !@tax_free_sales_division.nil? && @tax_free_sales_division.to_s.length < 1
      return false if !@net_tax_free_general_tax_include.nil? && @net_tax_free_general_tax_include.to_s.length < 1
      return false if !@net_tax_free_general_tax_exclude.nil? && @net_tax_free_general_tax_exclude.to_s.length < 1
      return false if !@net_tax_free_consumable_tax_include.nil? && @net_tax_free_consumable_tax_include.to_s.length < 1
      return false if !@net_tax_free_consumable_tax_exclude.nil? && @net_tax_free_consumable_tax_exclude.to_s.length < 1
      return false if !@tags.nil? && @tags.to_s.length < 1
      return false if !@point_giving_division.nil? && @point_giving_division.to_s.length < 1
      return false if !@point_giving_unit_price.nil? && @point_giving_unit_price.to_s.length < 1
      return false if !@point_giving_unit.nil? && @point_giving_unit.to_s.length < 1
      return false if !@point_spend_division.nil? && @point_spend_division.to_s.length < 1
      return false if !@mileage_division.nil? && @mileage_division.to_s.length < 1
      return false if !@mileage_label.nil? && @mileage_label.to_s.length < 1
      return false if !@customer_pin_code.nil? && @customer_pin_code.to_s.length < 1
      return false if @return_sales.nil?
      return false if !@dispose_server_transaction_head_id.nil? && @dispose_server_transaction_head_id.to_s.length < 1
      return false if !@cancel_date_time.nil? && @cancel_date_time.to_s.length < 1
      return false if !@sell_division.nil? && @sell_division.to_s.length < 1
      return false if !@tax_rate.nil? && @tax_rate.to_s.length < 1
      return false if !@tax_rounding.nil? && @tax_rounding.to_s.length < 1
      return false if !@discount_rounding_division.nil? && @discount_rounding_division.to_s.length < 1
      return false if !@transaction_uuid.nil? && @transaction_uuid.to_s.length < 1
      return false if !@exchange_ticket_no.nil? && @exchange_ticket_no.to_s.length < 1
      return false if !@gift_receipt_valid_days.nil? && @gift_receipt_valid_days.to_s.length < 1
      return false if !@upd_date_time.nil? && @upd_date_time.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] transaction_head_id Value to be assigned
    def transaction_head_id=(transaction_head_id)
      if transaction_head_id.nil?
        fail ArgumentError, 'transaction_head_id cannot be nil'
      end

      if transaction_head_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "transaction_head_id", the character length must be great than or equal to 1.'
      end

      @transaction_head_id = transaction_head_id
    end

    # Custom attribute writer method with validation
    # @param [Object] transaction_date_time Value to be assigned
    def transaction_date_time=(transaction_date_time)
      if !transaction_date_time.nil? && transaction_date_time.to_s.length < 1
        fail ArgumentError, 'invalid value for "transaction_date_time", the character length must be great than or equal to 1.'
      end

      @transaction_date_time = transaction_date_time
    end

    # Custom attribute writer method with validation
    # @param [Object] unit_non_discountsubtotal Value to be assigned
    def unit_non_discountsubtotal=(unit_non_discountsubtotal)
      if !unit_non_discountsubtotal.nil? && unit_non_discountsubtotal.to_s.length < 1
        fail ArgumentError, 'invalid value for "unit_non_discountsubtotal", the character length must be great than or equal to 1.'
      end

      @unit_non_discountsubtotal = unit_non_discountsubtotal
    end

    # Custom attribute writer method with validation
    # @param [Object] unit_discountsubtotal Value to be assigned
    def unit_discountsubtotal=(unit_discountsubtotal)
      if !unit_discountsubtotal.nil? && unit_discountsubtotal.to_s.length < 1
        fail ArgumentError, 'invalid value for "unit_discountsubtotal", the character length must be great than or equal to 1.'
      end

      @unit_discountsubtotal = unit_discountsubtotal
    end

    # Custom attribute writer method with validation
    # @param [Object] unit_staff_discountsubtotal Value to be assigned
    def unit_staff_discountsubtotal=(unit_staff_discountsubtotal)
      if !unit_staff_discountsubtotal.nil? && unit_staff_discountsubtotal.to_s.length < 1
        fail ArgumentError, 'invalid value for "unit_staff_discountsubtotal", the character length must be great than or equal to 1.'
      end

      @unit_staff_discountsubtotal = unit_staff_discountsubtotal
    end

    # Custom attribute writer method with validation
    # @param [Object] unit_bargain_discountsubtotal Value to be assigned
    def unit_bargain_discountsubtotal=(unit_bargain_discountsubtotal)
      if !unit_bargain_discountsubtotal.nil? && unit_bargain_discountsubtotal.to_s.length < 1
        fail ArgumentError, 'invalid value for "unit_bargain_discountsubtotal", the character length must be great than or equal to 1.'
      end

      @unit_bargain_discountsubtotal = unit_bargain_discountsubtotal
    end

    # Custom attribute writer method with validation
    # @param [Object] subtotal Value to be assigned
    def subtotal=(subtotal)
      if subtotal.nil?
        fail ArgumentError, 'subtotal cannot be nil'
      end

      if subtotal.to_s.length < 1
        fail ArgumentError, 'invalid value for "subtotal", the character length must be great than or equal to 1.'
      end

      @subtotal = subtotal
    end

    # Custom attribute writer method with validation
    # @param [Object] subtotal_for_discount Value to be assigned
    def subtotal_for_discount=(subtotal_for_discount)
      if !subtotal_for_discount.nil? && subtotal_for_discount.to_s.length < 1
        fail ArgumentError, 'invalid value for "subtotal_for_discount", the character length must be great than or equal to 1.'
      end

      @subtotal_for_discount = subtotal_for_discount
    end

    # Custom attribute writer method with validation
    # @param [Object] subtotal_discount_price Value to be assigned
    def subtotal_discount_price=(subtotal_discount_price)
      if !subtotal_discount_price.nil? && subtotal_discount_price.to_s.length < 1
        fail ArgumentError, 'invalid value for "subtotal_discount_price", the character length must be great than or equal to 1.'
      end

      @subtotal_discount_price = subtotal_discount_price
    end

    # Custom attribute writer method with validation
    # @param [Object] subtotal_discount_rate Value to be assigned
    def subtotal_discount_rate=(subtotal_discount_rate)
      if !subtotal_discount_rate.nil? && subtotal_discount_rate.to_s.length < 1
        fail ArgumentError, 'invalid value for "subtotal_discount_rate", the character length must be great than or equal to 1.'
      end

      @subtotal_discount_rate = subtotal_discount_rate
    end

    # Custom attribute writer method with validation
    # @param [Object] subtotal_discount_division Value to be assigned
    def subtotal_discount_division=(subtotal_discount_division)
      if !subtotal_discount_division.nil? && subtotal_discount_division.to_s.length < 1
        fail ArgumentError, 'invalid value for "subtotal_discount_division", the character length must be great than or equal to 1.'
      end

      @subtotal_discount_division = subtotal_discount_division
    end

    # Custom attribute writer method with validation
    # @param [Object] point_discount Value to be assigned
    def point_discount=(point_discount)
      if !point_discount.nil? && point_discount.to_s.length < 1
        fail ArgumentError, 'invalid value for "point_discount", the character length must be great than or equal to 1.'
      end

      @point_discount = point_discount
    end

    # Custom attribute writer method with validation
    # @param [Object] total Value to be assigned
    def total=(total)
      if total.nil?
        fail ArgumentError, 'total cannot be nil'
      end

      if total.to_s.length < 1
        fail ArgumentError, 'invalid value for "total", the character length must be great than or equal to 1.'
      end

      @total = total
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_include Value to be assigned
    def tax_include=(tax_include)
      if !tax_include.nil? && tax_include.to_s.length < 1
        fail ArgumentError, 'invalid value for "tax_include", the character length must be great than or equal to 1.'
      end

      @tax_include = tax_include
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_exclude Value to be assigned
    def tax_exclude=(tax_exclude)
      if !tax_exclude.nil? && tax_exclude.to_s.length < 1
        fail ArgumentError, 'invalid value for "tax_exclude", the character length must be great than or equal to 1.'
      end

      @tax_exclude = tax_exclude
    end

    # Custom attribute writer method with validation
    # @param [Object] rounding_division Value to be assigned
    def rounding_division=(rounding_division)
      if !rounding_division.nil? && rounding_division.to_s.length < 1
        fail ArgumentError, 'invalid value for "rounding_division", the character length must be great than or equal to 1.'
      end

      @rounding_division = rounding_division
    end

    # Custom attribute writer method with validation
    # @param [Object] rounding_price Value to be assigned
    def rounding_price=(rounding_price)
      if !rounding_price.nil? && rounding_price.to_s.length < 1
        fail ArgumentError, 'invalid value for "rounding_price", the character length must be great than or equal to 1.'
      end

      @rounding_price = rounding_price
    end

    # Custom attribute writer method with validation
    # @param [Object] cash_total Value to be assigned
    def cash_total=(cash_total)
      if !cash_total.nil? && cash_total.to_s.length < 1
        fail ArgumentError, 'invalid value for "cash_total", the character length must be great than or equal to 1.'
      end

      @cash_total = cash_total
    end

    # Custom attribute writer method with validation
    # @param [Object] credit_total Value to be assigned
    def credit_total=(credit_total)
      if !credit_total.nil? && credit_total.to_s.length < 1
        fail ArgumentError, 'invalid value for "credit_total", the character length must be great than or equal to 1.'
      end

      @credit_total = credit_total
    end

    # Custom attribute writer method with validation
    # @param [Object] deposit Value to be assigned
    def deposit=(deposit)
      if !deposit.nil? && deposit.to_s.length < 1
        fail ArgumentError, 'invalid value for "deposit", the character length must be great than or equal to 1.'
      end

      @deposit = deposit
    end

    # Custom attribute writer method with validation
    # @param [Object] deposit_cash Value to be assigned
    def deposit_cash=(deposit_cash)
      if !deposit_cash.nil? && deposit_cash.to_s.length < 1
        fail ArgumentError, 'invalid value for "deposit_cash", the character length must be great than or equal to 1.'
      end

      @deposit_cash = deposit_cash
    end

    # Custom attribute writer method with validation
    # @param [Object] deposit_credit Value to be assigned
    def deposit_credit=(deposit_credit)
      if !deposit_credit.nil? && deposit_credit.to_s.length < 1
        fail ArgumentError, 'invalid value for "deposit_credit", the character length must be great than or equal to 1.'
      end

      @deposit_credit = deposit_credit
    end

    # Custom attribute writer method with validation
    # @param [Object] change Value to be assigned
    def change=(change)
      if !change.nil? && change.to_s.length < 1
        fail ArgumentError, 'invalid value for "change", the character length must be great than or equal to 1.'
      end

      @change = change
    end

    # Custom attribute writer method with validation
    # @param [Object] tip_cash Value to be assigned
    def tip_cash=(tip_cash)
      if !tip_cash.nil? && tip_cash.to_s.length < 1
        fail ArgumentError, 'invalid value for "tip_cash", the character length must be great than or equal to 1.'
      end

      @tip_cash = tip_cash
    end

    # Custom attribute writer method with validation
    # @param [Object] tip_credit Value to be assigned
    def tip_credit=(tip_credit)
      if !tip_credit.nil? && tip_credit.to_s.length < 1
        fail ArgumentError, 'invalid value for "tip_credit", the character length must be great than or equal to 1.'
      end

      @tip_credit = tip_credit
    end

    # Custom attribute writer method with validation
    # @param [Object] amount Value to be assigned
    def amount=(amount)
      if !amount.nil? && amount.to_s.length < 1
        fail ArgumentError, 'invalid value for "amount", the character length must be great than or equal to 1.'
      end

      @amount = amount
    end

    # Custom attribute writer method with validation
    # @param [Object] return_amount Value to be assigned
    def return_amount=(return_amount)
      if !return_amount.nil? && return_amount.to_s.length < 1
        fail ArgumentError, 'invalid value for "return_amount", the character length must be great than or equal to 1.'
      end

      @return_amount = return_amount
    end

    # Custom attribute writer method with validation
    # @param [Object] cost_total Value to be assigned
    def cost_total=(cost_total)
      if !cost_total.nil? && cost_total.to_s.length < 1
        fail ArgumentError, 'invalid value for "cost_total", the character length must be great than or equal to 1.'
      end

      @cost_total = cost_total
    end

    # Custom attribute writer method with validation
    # @param [Object] sales_head_division Value to be assigned
    def sales_head_division=(sales_head_division)
      if !sales_head_division.nil? && sales_head_division.to_s.length < 1
        fail ArgumentError, 'invalid value for "sales_head_division", the character length must be great than or equal to 1.'
      end

      @sales_head_division = sales_head_division
    end

    # Custom attribute writer method with validation
    # @param [Object] in_tax_sales_total Value to be assigned
    def in_tax_sales_total=(in_tax_sales_total)
      if !in_tax_sales_total.nil? && in_tax_sales_total.to_s.length < 1
        fail ArgumentError, 'invalid value for "in_tax_sales_total", the character length must be great than or equal to 1.'
      end

      @in_tax_sales_total = in_tax_sales_total
    end

    # Custom attribute writer method with validation
    # @param [Object] out_tax_sales_total Value to be assigned
    def out_tax_sales_total=(out_tax_sales_total)
      if !out_tax_sales_total.nil? && out_tax_sales_total.to_s.length < 1
        fail ArgumentError, 'invalid value for "out_tax_sales_total", the character length must be great than or equal to 1.'
      end

      @out_tax_sales_total = out_tax_sales_total
    end

    # Custom attribute writer method with validation
    # @param [Object] non_tax_sales_total Value to be assigned
    def non_tax_sales_total=(non_tax_sales_total)
      if !non_tax_sales_total.nil? && non_tax_sales_total.to_s.length < 1
        fail ArgumentError, 'invalid value for "non_tax_sales_total", the character length must be great than or equal to 1.'
      end

      @non_tax_sales_total = non_tax_sales_total
    end

    # Custom attribute writer method with validation
    # @param [Object] non_sales_target_total Value to be assigned
    def non_sales_target_total=(non_sales_target_total)
      if !non_sales_target_total.nil? && non_sales_target_total.to_s.length < 1
        fail ArgumentError, 'invalid value for "non_sales_target_total", the character length must be great than or equal to 1.'
      end

      @non_sales_target_total = non_sales_target_total
    end

    # Custom attribute writer method with validation
    # @param [Object] non_sales_target_in_tax_total Value to be assigned
    def non_sales_target_in_tax_total=(non_sales_target_in_tax_total)
      if !non_sales_target_in_tax_total.nil? && non_sales_target_in_tax_total.to_s.length < 1
        fail ArgumentError, 'invalid value for "non_sales_target_in_tax_total", the character length must be great than or equal to 1.'
      end

      @non_sales_target_in_tax_total = non_sales_target_in_tax_total
    end

    # Custom attribute writer method with validation
    # @param [Object] non_sales_target_out_tax_total Value to be assigned
    def non_sales_target_out_tax_total=(non_sales_target_out_tax_total)
      if !non_sales_target_out_tax_total.nil? && non_sales_target_out_tax_total.to_s.length < 1
        fail ArgumentError, 'invalid value for "non_sales_target_out_tax_total", the character length must be great than or equal to 1.'
      end

      @non_sales_target_out_tax_total = non_sales_target_out_tax_total
    end

    # Custom attribute writer method with validation
    # @param [Object] non_sales_target_tax_free_total Value to be assigned
    def non_sales_target_tax_free_total=(non_sales_target_tax_free_total)
      if !non_sales_target_tax_free_total.nil? && non_sales_target_tax_free_total.to_s.length < 1
        fail ArgumentError, 'invalid value for "non_sales_target_tax_free_total", the character length must be great than or equal to 1.'
      end

      @non_sales_target_tax_free_total = non_sales_target_tax_free_total
    end

    # Custom attribute writer method with validation
    # @param [Object] non_sales_target_cost_total Value to be assigned
    def non_sales_target_cost_total=(non_sales_target_cost_total)
      if !non_sales_target_cost_total.nil? && non_sales_target_cost_total.to_s.length < 1
        fail ArgumentError, 'invalid value for "non_sales_target_cost_total", the character length must be great than or equal to 1.'
      end

      @non_sales_target_cost_total = non_sales_target_cost_total
    end

    # Custom attribute writer method with validation
    # @param [Object] non_sales_target_amount Value to be assigned
    def non_sales_target_amount=(non_sales_target_amount)
      if !non_sales_target_amount.nil? && non_sales_target_amount.to_s.length < 1
        fail ArgumentError, 'invalid value for "non_sales_target_amount", the character length must be great than or equal to 1.'
      end

      @non_sales_target_amount = non_sales_target_amount
    end

    # Custom attribute writer method with validation
    # @param [Object] non_sales_target_return_amount Value to be assigned
    def non_sales_target_return_amount=(non_sales_target_return_amount)
      if !non_sales_target_return_amount.nil? && non_sales_target_return_amount.to_s.length < 1
        fail ArgumentError, 'invalid value for "non_sales_target_return_amount", the character length must be great than or equal to 1.'
      end

      @non_sales_target_return_amount = non_sales_target_return_amount
    end

    # Custom attribute writer method with validation
    # @param [Object] new_point Value to be assigned
    def new_point=(new_point)
      if !new_point.nil? && new_point.to_s.length < 1
        fail ArgumentError, 'invalid value for "new_point", the character length must be great than or equal to 1.'
      end

      @new_point = new_point
    end

    # Custom attribute writer method with validation
    # @param [Object] spend_point Value to be assigned
    def spend_point=(spend_point)
      if !spend_point.nil? && spend_point.to_s.length < 1
        fail ArgumentError, 'invalid value for "spend_point", the character length must be great than or equal to 1.'
      end

      @spend_point = spend_point
    end

    # Custom attribute writer method with validation
    # @param [Object] point Value to be assigned
    def point=(point)
      if !point.nil? && point.to_s.length < 1
        fail ArgumentError, 'invalid value for "point", the character length must be great than or equal to 1.'
      end

      @point = point
    end

    # Custom attribute writer method with validation
    # @param [Object] total_point Value to be assigned
    def total_point=(total_point)
      if !total_point.nil? && total_point.to_s.length < 1
        fail ArgumentError, 'invalid value for "total_point", the character length must be great than or equal to 1.'
      end

      @total_point = total_point
    end

    # Custom attribute writer method with validation
    # @param [Object] current_mile Value to be assigned
    def current_mile=(current_mile)
      if !current_mile.nil? && current_mile.to_s.length < 1
        fail ArgumentError, 'invalid value for "current_mile", the character length must be great than or equal to 1.'
      end

      @current_mile = current_mile
    end

    # Custom attribute writer method with validation
    # @param [Object] earn_mile Value to be assigned
    def earn_mile=(earn_mile)
      if !earn_mile.nil? && earn_mile.to_s.length < 1
        fail ArgumentError, 'invalid value for "earn_mile", the character length must be great than or equal to 1.'
      end

      @earn_mile = earn_mile
    end

    # Custom attribute writer method with validation
    # @param [Object] total_mile Value to be assigned
    def total_mile=(total_mile)
      if !total_mile.nil? && total_mile.to_s.length < 1
        fail ArgumentError, 'invalid value for "total_mile", the character length must be great than or equal to 1.'
      end

      @total_mile = total_mile
    end

    # Custom attribute writer method with validation
    # @param [Object] adjustment_mile Value to be assigned
    def adjustment_mile=(adjustment_mile)
      if !adjustment_mile.nil? && adjustment_mile.to_s.length < 1
        fail ArgumentError, 'invalid value for "adjustment_mile", the character length must be great than or equal to 1.'
      end

      @adjustment_mile = adjustment_mile
    end

    # Custom attribute writer method with validation
    # @param [Object] adjustment_mile_division Value to be assigned
    def adjustment_mile_division=(adjustment_mile_division)
      if !adjustment_mile_division.nil? && adjustment_mile_division.to_s.length < 1
        fail ArgumentError, 'invalid value for "adjustment_mile_division", the character length must be great than or equal to 1.'
      end

      @adjustment_mile_division = adjustment_mile_division
    end

    # Custom attribute writer method with validation
    # @param [Object] adjustment_mile_value Value to be assigned
    def adjustment_mile_value=(adjustment_mile_value)
      if !adjustment_mile_value.nil? && adjustment_mile_value.to_s.length < 1
        fail ArgumentError, 'invalid value for "adjustment_mile_value", the character length must be great than or equal to 1.'
      end

      @adjustment_mile_value = adjustment_mile_value
    end

    # Custom attribute writer method with validation
    # @param [Object] store_id Value to be assigned
    def store_id=(store_id)
      if !store_id.nil? && store_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "store_id", the character length must be great than or equal to 1.'
      end

      @store_id = store_id
    end

    # Custom attribute writer method with validation
    # @param [Object] store_code Value to be assigned
    def store_code=(store_code)
      if !store_code.nil? && store_code.to_s.length < 1
        fail ArgumentError, 'invalid value for "store_code", the character length must be great than or equal to 1.'
      end

      @store_code = store_code
    end

    # Custom attribute writer method with validation
    # @param [Object] terminal_id Value to be assigned
    def terminal_id=(terminal_id)
      if !terminal_id.nil? && terminal_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "terminal_id", the character length must be great than or equal to 1.'
      end

      @terminal_id = terminal_id
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_id Value to be assigned
    def customer_id=(customer_id)
      if !customer_id.nil? && customer_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "customer_id", the character length must be great than or equal to 1.'
      end

      @customer_id = customer_id
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_code Value to be assigned
    def customer_code=(customer_code)
      if !customer_code.nil? && customer_code.to_s.length < 1
        fail ArgumentError, 'invalid value for "customer_code", the character length must be great than or equal to 1.'
      end

      @customer_code = customer_code
    end

    # Custom attribute writer method with validation
    # @param [Object] terminal_tran_id Value to be assigned
    def terminal_tran_id=(terminal_tran_id)
      if !terminal_tran_id.nil? && terminal_tran_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "terminal_tran_id", the character length must be great than or equal to 1.'
      end

      @terminal_tran_id = terminal_tran_id
    end

    # Custom attribute writer method with validation
    # @param [Object] terminal_tran_date_time Value to be assigned
    def terminal_tran_date_time=(terminal_tran_date_time)
      if terminal_tran_date_time.nil?
        fail ArgumentError, 'terminal_tran_date_time cannot be nil'
      end

      if terminal_tran_date_time.to_s.length < 1
        fail ArgumentError, 'invalid value for "terminal_tran_date_time", the character length must be great than or equal to 1.'
      end

      @terminal_tran_date_time = terminal_tran_date_time
    end

    # Custom attribute writer method with validation
    # @param [Object] sum_division Value to be assigned
    def sum_division=(sum_division)
      if !sum_division.nil? && sum_division.to_s.length < 1
        fail ArgumentError, 'invalid value for "sum_division", the character length must be great than or equal to 1.'
      end

      @sum_division = sum_division
    end

    # Custom attribute writer method with validation
    # @param [Object] adjustment_date_time Value to be assigned
    def adjustment_date_time=(adjustment_date_time)
      if !adjustment_date_time.nil? && adjustment_date_time.to_s.length < 1
        fail ArgumentError, 'invalid value for "adjustment_date_time", the character length must be great than or equal to 1.'
      end

      @adjustment_date_time = adjustment_date_time
    end

    # Custom attribute writer method with validation
    # @param [Object] sum_date Value to be assigned
    def sum_date=(sum_date)
      if !sum_date.nil? && sum_date.to_s.length < 1
        fail ArgumentError, 'invalid value for "sum_date", the character length must be great than or equal to 1.'
      end

      @sum_date = sum_date
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_rank Value to be assigned
    def customer_rank=(customer_rank)
      if !customer_rank.nil? && customer_rank.to_s.length < 1
        fail ArgumentError, 'invalid value for "customer_rank", the character length must be great than or equal to 1.'
      end

      @customer_rank = customer_rank
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_group_id Value to be assigned
    def customer_group_id=(customer_group_id)
      if !customer_group_id.nil? && customer_group_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "customer_group_id", the character length must be great than or equal to 1.'
      end

      @customer_group_id = customer_group_id
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_group_id2 Value to be assigned
    def customer_group_id2=(customer_group_id2)
      if !customer_group_id2.nil? && customer_group_id2.to_s.length < 1
        fail ArgumentError, 'invalid value for "customer_group_id2", the character length must be great than or equal to 1.'
      end

      @customer_group_id2 = customer_group_id2
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_group_id3 Value to be assigned
    def customer_group_id3=(customer_group_id3)
      if !customer_group_id3.nil? && customer_group_id3.to_s.length < 1
        fail ArgumentError, 'invalid value for "customer_group_id3", the character length must be great than or equal to 1.'
      end

      @customer_group_id3 = customer_group_id3
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_group_id4 Value to be assigned
    def customer_group_id4=(customer_group_id4)
      if !customer_group_id4.nil? && customer_group_id4.to_s.length < 1
        fail ArgumentError, 'invalid value for "customer_group_id4", the character length must be great than or equal to 1.'
      end

      @customer_group_id4 = customer_group_id4
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_group_id5 Value to be assigned
    def customer_group_id5=(customer_group_id5)
      if !customer_group_id5.nil? && customer_group_id5.to_s.length < 1
        fail ArgumentError, 'invalid value for "customer_group_id5", the character length must be great than or equal to 1.'
      end

      @customer_group_id5 = customer_group_id5
    end

    # Custom attribute writer method with validation
    # @param [Object] staff_id Value to be assigned
    def staff_id=(staff_id)
      if !staff_id.nil? && staff_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "staff_id", the character length must be great than or equal to 1.'
      end

      @staff_id = staff_id
    end

    # Custom attribute writer method with validation
    # @param [Object] staff_code Value to be assigned
    def staff_code=(staff_code)
      if !staff_code.nil? && staff_code.to_s.length < 1
        fail ArgumentError, 'invalid value for "staff_code", the character length must be great than or equal to 1.'
      end

      @staff_code = staff_code
    end

    # Custom attribute writer method with validation
    # @param [Object] staff_name Value to be assigned
    def staff_name=(staff_name)
      if !staff_name.nil? && staff_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "staff_name", the character length must be great than or equal to 1.'
      end

      @staff_name = staff_name
    end

    # Custom attribute writer method with validation
    # @param [Object] credit_division Value to be assigned
    def credit_division=(credit_division)
      if !credit_division.nil? && credit_division.to_s.length < 1
        fail ArgumentError, 'invalid value for "credit_division", the character length must be great than or equal to 1.'
      end

      @credit_division = credit_division
    end

    # Custom attribute writer method with validation
    # @param [Object] payment_count Value to be assigned
    def payment_count=(payment_count)
      if !payment_count.nil? && payment_count.to_s.length < 1
        fail ArgumentError, 'invalid value for "payment_count", the character length must be great than or equal to 1.'
      end

      @payment_count = payment_count
    end

    # Custom attribute writer method with validation
    # @param [Object] slip_number Value to be assigned
    def slip_number=(slip_number)
      if !slip_number.nil? && slip_number.to_s.length < 1
        fail ArgumentError, 'invalid value for "slip_number", the character length must be great than or equal to 1.'
      end

      @slip_number = slip_number
    end

    # Custom attribute writer method with validation
    # @param [Object] cancel_slip_number Value to be assigned
    def cancel_slip_number=(cancel_slip_number)
      if !cancel_slip_number.nil? && cancel_slip_number.to_s.length < 1
        fail ArgumentError, 'invalid value for "cancel_slip_number", the character length must be great than or equal to 1.'
      end

      @cancel_slip_number = cancel_slip_number
    end

    # Custom attribute writer method with validation
    # @param [Object] auth_number Value to be assigned
    def auth_number=(auth_number)
      if !auth_number.nil? && auth_number.to_s.length < 1
        fail ArgumentError, 'invalid value for "auth_number", the character length must be great than or equal to 1.'
      end

      @auth_number = auth_number
    end

    # Custom attribute writer method with validation
    # @param [Object] auth_date Value to be assigned
    def auth_date=(auth_date)
      if !auth_date.nil? && auth_date.to_s.length < 1
        fail ArgumentError, 'invalid value for "auth_date", the character length must be great than or equal to 1.'
      end

      @auth_date = auth_date
    end

    # Custom attribute writer method with validation
    # @param [Object] card_company Value to be assigned
    def card_company=(card_company)
      if !card_company.nil? && card_company.to_s.length < 1
        fail ArgumentError, 'invalid value for "card_company", the character length must be great than or equal to 1.'
      end

      @card_company = card_company
    end

    # Custom attribute writer method with validation
    # @param [Object] denomination Value to be assigned
    def denomination=(denomination)
      if !denomination.nil? && denomination.to_s.length < 1
        fail ArgumentError, 'invalid value for "denomination", the character length must be great than or equal to 1.'
      end

      @denomination = denomination
    end

    # Custom attribute writer method with validation
    # @param [Object] memo Value to be assigned
    def memo=(memo)
      if !memo.nil? && memo.to_s.length < 1
        fail ArgumentError, 'invalid value for "memo", the character length must be great than or equal to 1.'
      end

      @memo = memo
    end

    # Custom attribute writer method with validation
    # @param [Object] receipt_memo Value to be assigned
    def receipt_memo=(receipt_memo)
      if !receipt_memo.nil? && receipt_memo.to_s.length < 1
        fail ArgumentError, 'invalid value for "receipt_memo", the character length must be great than or equal to 1.'
      end

      @receipt_memo = receipt_memo
    end

    # Custom attribute writer method with validation
    # @param [Object] carriage Value to be assigned
    def carriage=(carriage)
      if !carriage.nil? && carriage.to_s.length < 1
        fail ArgumentError, 'invalid value for "carriage", the character length must be great than or equal to 1.'
      end

      @carriage = carriage
    end

    # Custom attribute writer method with validation
    # @param [Object] commission Value to be assigned
    def commission=(commission)
      if !commission.nil? && commission.to_s.length < 1
        fail ArgumentError, 'invalid value for "commission", the character length must be great than or equal to 1.'
      end

      @commission = commission
    end

    # Custom attribute writer method with validation
    # @param [Object] guest_numbers Value to be assigned
    def guest_numbers=(guest_numbers)
      if !guest_numbers.nil? && guest_numbers.to_s.length < 1
        fail ArgumentError, 'invalid value for "guest_numbers", the character length must be great than or equal to 1.'
      end

      @guest_numbers = guest_numbers
    end

    # Custom attribute writer method with validation
    # @param [Object] guest_numbers_male Value to be assigned
    def guest_numbers_male=(guest_numbers_male)
      if !guest_numbers_male.nil? && guest_numbers_male.to_s.length < 1
        fail ArgumentError, 'invalid value for "guest_numbers_male", the character length must be great than or equal to 1.'
      end

      @guest_numbers_male = guest_numbers_male
    end

    # Custom attribute writer method with validation
    # @param [Object] guest_numbers_female Value to be assigned
    def guest_numbers_female=(guest_numbers_female)
      if !guest_numbers_female.nil? && guest_numbers_female.to_s.length < 1
        fail ArgumentError, 'invalid value for "guest_numbers_female", the character length must be great than or equal to 1.'
      end

      @guest_numbers_female = guest_numbers_female
    end

    # Custom attribute writer method with validation
    # @param [Object] guest_numbers_unknown Value to be assigned
    def guest_numbers_unknown=(guest_numbers_unknown)
      if !guest_numbers_unknown.nil? && guest_numbers_unknown.to_s.length < 1
        fail ArgumentError, 'invalid value for "guest_numbers_unknown", the character length must be great than or equal to 1.'
      end

      @guest_numbers_unknown = guest_numbers_unknown
    end

    # Custom attribute writer method with validation
    # @param [Object] enter_date_time Value to be assigned
    def enter_date_time=(enter_date_time)
      if !enter_date_time.nil? && enter_date_time.to_s.length < 1
        fail ArgumentError, 'invalid value for "enter_date_time", the character length must be great than or equal to 1.'
      end

      @enter_date_time = enter_date_time
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_free_sales_division Value to be assigned
    def tax_free_sales_division=(tax_free_sales_division)
      if !tax_free_sales_division.nil? && tax_free_sales_division.to_s.length < 1
        fail ArgumentError, 'invalid value for "tax_free_sales_division", the character length must be great than or equal to 1.'
      end

      @tax_free_sales_division = tax_free_sales_division
    end

    # Custom attribute writer method with validation
    # @param [Object] net_tax_free_general_tax_include Value to be assigned
    def net_tax_free_general_tax_include=(net_tax_free_general_tax_include)
      if !net_tax_free_general_tax_include.nil? && net_tax_free_general_tax_include.to_s.length < 1
        fail ArgumentError, 'invalid value for "net_tax_free_general_tax_include", the character length must be great than or equal to 1.'
      end

      @net_tax_free_general_tax_include = net_tax_free_general_tax_include
    end

    # Custom attribute writer method with validation
    # @param [Object] net_tax_free_general_tax_exclude Value to be assigned
    def net_tax_free_general_tax_exclude=(net_tax_free_general_tax_exclude)
      if !net_tax_free_general_tax_exclude.nil? && net_tax_free_general_tax_exclude.to_s.length < 1
        fail ArgumentError, 'invalid value for "net_tax_free_general_tax_exclude", the character length must be great than or equal to 1.'
      end

      @net_tax_free_general_tax_exclude = net_tax_free_general_tax_exclude
    end

    # Custom attribute writer method with validation
    # @param [Object] net_tax_free_consumable_tax_include Value to be assigned
    def net_tax_free_consumable_tax_include=(net_tax_free_consumable_tax_include)
      if !net_tax_free_consumable_tax_include.nil? && net_tax_free_consumable_tax_include.to_s.length < 1
        fail ArgumentError, 'invalid value for "net_tax_free_consumable_tax_include", the character length must be great than or equal to 1.'
      end

      @net_tax_free_consumable_tax_include = net_tax_free_consumable_tax_include
    end

    # Custom attribute writer method with validation
    # @param [Object] net_tax_free_consumable_tax_exclude Value to be assigned
    def net_tax_free_consumable_tax_exclude=(net_tax_free_consumable_tax_exclude)
      if !net_tax_free_consumable_tax_exclude.nil? && net_tax_free_consumable_tax_exclude.to_s.length < 1
        fail ArgumentError, 'invalid value for "net_tax_free_consumable_tax_exclude", the character length must be great than or equal to 1.'
      end

      @net_tax_free_consumable_tax_exclude = net_tax_free_consumable_tax_exclude
    end

    # Custom attribute writer method with validation
    # @param [Object] tags Value to be assigned
    def tags=(tags)
      if !tags.nil? && tags.to_s.length < 1
        fail ArgumentError, 'invalid value for "tags", the character length must be great than or equal to 1.'
      end

      @tags = tags
    end

    # Custom attribute writer method with validation
    # @param [Object] point_giving_division Value to be assigned
    def point_giving_division=(point_giving_division)
      if !point_giving_division.nil? && point_giving_division.to_s.length < 1
        fail ArgumentError, 'invalid value for "point_giving_division", the character length must be great than or equal to 1.'
      end

      @point_giving_division = point_giving_division
    end

    # Custom attribute writer method with validation
    # @param [Object] point_giving_unit_price Value to be assigned
    def point_giving_unit_price=(point_giving_unit_price)
      if !point_giving_unit_price.nil? && point_giving_unit_price.to_s.length < 1
        fail ArgumentError, 'invalid value for "point_giving_unit_price", the character length must be great than or equal to 1.'
      end

      @point_giving_unit_price = point_giving_unit_price
    end

    # Custom attribute writer method with validation
    # @param [Object] point_giving_unit Value to be assigned
    def point_giving_unit=(point_giving_unit)
      if !point_giving_unit.nil? && point_giving_unit.to_s.length < 1
        fail ArgumentError, 'invalid value for "point_giving_unit", the character length must be great than or equal to 1.'
      end

      @point_giving_unit = point_giving_unit
    end

    # Custom attribute writer method with validation
    # @param [Object] point_spend_division Value to be assigned
    def point_spend_division=(point_spend_division)
      if !point_spend_division.nil? && point_spend_division.to_s.length < 1
        fail ArgumentError, 'invalid value for "point_spend_division", the character length must be great than or equal to 1.'
      end

      @point_spend_division = point_spend_division
    end

    # Custom attribute writer method with validation
    # @param [Object] mileage_division Value to be assigned
    def mileage_division=(mileage_division)
      if !mileage_division.nil? && mileage_division.to_s.length < 1
        fail ArgumentError, 'invalid value for "mileage_division", the character length must be great than or equal to 1.'
      end

      @mileage_division = mileage_division
    end

    # Custom attribute writer method with validation
    # @param [Object] mileage_label Value to be assigned
    def mileage_label=(mileage_label)
      if !mileage_label.nil? && mileage_label.to_s.length < 1
        fail ArgumentError, 'invalid value for "mileage_label", the character length must be great than or equal to 1.'
      end

      @mileage_label = mileage_label
    end

    # Custom attribute writer method with validation
    # @param [Object] customer_pin_code Value to be assigned
    def customer_pin_code=(customer_pin_code)
      if !customer_pin_code.nil? && customer_pin_code.to_s.length < 1
        fail ArgumentError, 'invalid value for "customer_pin_code", the character length must be great than or equal to 1.'
      end

      @customer_pin_code = customer_pin_code
    end

    # Custom attribute writer method with validation
    # @param [Object] dispose_server_transaction_head_id Value to be assigned
    def dispose_server_transaction_head_id=(dispose_server_transaction_head_id)
      if !dispose_server_transaction_head_id.nil? && dispose_server_transaction_head_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "dispose_server_transaction_head_id", the character length must be great than or equal to 1.'
      end

      @dispose_server_transaction_head_id = dispose_server_transaction_head_id
    end

    # Custom attribute writer method with validation
    # @param [Object] cancel_date_time Value to be assigned
    def cancel_date_time=(cancel_date_time)
      if !cancel_date_time.nil? && cancel_date_time.to_s.length < 1
        fail ArgumentError, 'invalid value for "cancel_date_time", the character length must be great than or equal to 1.'
      end

      @cancel_date_time = cancel_date_time
    end

    # Custom attribute writer method with validation
    # @param [Object] sell_division Value to be assigned
    def sell_division=(sell_division)
      if !sell_division.nil? && sell_division.to_s.length < 1
        fail ArgumentError, 'invalid value for "sell_division", the character length must be great than or equal to 1.'
      end

      @sell_division = sell_division
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_rate Value to be assigned
    def tax_rate=(tax_rate)
      if !tax_rate.nil? && tax_rate.to_s.length < 1
        fail ArgumentError, 'invalid value for "tax_rate", the character length must be great than or equal to 1.'
      end

      @tax_rate = tax_rate
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_rounding Value to be assigned
    def tax_rounding=(tax_rounding)
      if !tax_rounding.nil? && tax_rounding.to_s.length < 1
        fail ArgumentError, 'invalid value for "tax_rounding", the character length must be great than or equal to 1.'
      end

      @tax_rounding = tax_rounding
    end

    # Custom attribute writer method with validation
    # @param [Object] discount_rounding_division Value to be assigned
    def discount_rounding_division=(discount_rounding_division)
      if !discount_rounding_division.nil? && discount_rounding_division.to_s.length < 1
        fail ArgumentError, 'invalid value for "discount_rounding_division", the character length must be great than or equal to 1.'
      end

      @discount_rounding_division = discount_rounding_division
    end

    # Custom attribute writer method with validation
    # @param [Object] transaction_uuid Value to be assigned
    def transaction_uuid=(transaction_uuid)
      if !transaction_uuid.nil? && transaction_uuid.to_s.length < 1
        fail ArgumentError, 'invalid value for "transaction_uuid", the character length must be great than or equal to 1.'
      end

      @transaction_uuid = transaction_uuid
    end

    # Custom attribute writer method with validation
    # @param [Object] exchange_ticket_no Value to be assigned
    def exchange_ticket_no=(exchange_ticket_no)
      if !exchange_ticket_no.nil? && exchange_ticket_no.to_s.length < 1
        fail ArgumentError, 'invalid value for "exchange_ticket_no", the character length must be great than or equal to 1.'
      end

      @exchange_ticket_no = exchange_ticket_no
    end

    # Custom attribute writer method with validation
    # @param [Object] gift_receipt_valid_days Value to be assigned
    def gift_receipt_valid_days=(gift_receipt_valid_days)
      if !gift_receipt_valid_days.nil? && gift_receipt_valid_days.to_s.length < 1
        fail ArgumentError, 'invalid value for "gift_receipt_valid_days", the character length must be great than or equal to 1.'
      end

      @gift_receipt_valid_days = gift_receipt_valid_days
    end

    # Custom attribute writer method with validation
    # @param [Object] upd_date_time Value to be assigned
    def upd_date_time=(upd_date_time)
      if !upd_date_time.nil? && upd_date_time.to_s.length < 1
        fail ArgumentError, 'invalid value for "upd_date_time", the character length must be great than or equal to 1.'
      end

      @upd_date_time = upd_date_time
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          transaction_head_id == o.transaction_head_id &&
          transaction_date_time == o.transaction_date_time &&
          transaction_head_division == o.transaction_head_division &&
          cancel_division == o.cancel_division &&
          unit_non_discountsubtotal == o.unit_non_discountsubtotal &&
          unit_discountsubtotal == o.unit_discountsubtotal &&
          unit_staff_discountsubtotal == o.unit_staff_discountsubtotal &&
          unit_bargain_discountsubtotal == o.unit_bargain_discountsubtotal &&
          subtotal == o.subtotal &&
          subtotal_for_discount == o.subtotal_for_discount &&
          subtotal_discount_price == o.subtotal_discount_price &&
          subtotal_discount_rate == o.subtotal_discount_rate &&
          subtotal_discount_division == o.subtotal_discount_division &&
          point_discount == o.point_discount &&
          total == o.total &&
          tax_include == o.tax_include &&
          tax_exclude == o.tax_exclude &&
          rounding_division == o.rounding_division &&
          rounding_price == o.rounding_price &&
          cash_total == o.cash_total &&
          credit_total == o.credit_total &&
          deposit == o.deposit &&
          deposit_cash == o.deposit_cash &&
          deposit_credit == o.deposit_credit &&
          change == o.change &&
          tip_cash == o.tip_cash &&
          tip_credit == o.tip_credit &&
          amount == o.amount &&
          return_amount == o.return_amount &&
          cost_total == o.cost_total &&
          sales_head_division == o.sales_head_division &&
          in_tax_sales_total == o.in_tax_sales_total &&
          out_tax_sales_total == o.out_tax_sales_total &&
          non_tax_sales_total == o.non_tax_sales_total &&
          non_sales_target_total == o.non_sales_target_total &&
          non_sales_target_in_tax_total == o.non_sales_target_in_tax_total &&
          non_sales_target_out_tax_total == o.non_sales_target_out_tax_total &&
          non_sales_target_tax_free_total == o.non_sales_target_tax_free_total &&
          non_sales_target_cost_total == o.non_sales_target_cost_total &&
          non_sales_target_amount == o.non_sales_target_amount &&
          non_sales_target_return_amount == o.non_sales_target_return_amount &&
          new_point == o.new_point &&
          spend_point == o.spend_point &&
          point == o.point &&
          total_point == o.total_point &&
          current_mile == o.current_mile &&
          earn_mile == o.earn_mile &&
          total_mile == o.total_mile &&
          adjustment_mile == o.adjustment_mile &&
          adjustment_mile_division == o.adjustment_mile_division &&
          adjustment_mile_value == o.adjustment_mile_value &&
          store_id == o.store_id &&
          store_code == o.store_code &&
          terminal_id == o.terminal_id &&
          customer_id == o.customer_id &&
          customer_code == o.customer_code &&
          terminal_tran_id == o.terminal_tran_id &&
          terminal_tran_date_time == o.terminal_tran_date_time &&
          sum_division == o.sum_division &&
          adjustment_date_time == o.adjustment_date_time &&
          sum_date == o.sum_date &&
          customer_rank == o.customer_rank &&
          customer_group_id == o.customer_group_id &&
          customer_group_id2 == o.customer_group_id2 &&
          customer_group_id3 == o.customer_group_id3 &&
          customer_group_id4 == o.customer_group_id4 &&
          customer_group_id5 == o.customer_group_id5 &&
          staff_id == o.staff_id &&
          staff_code == o.staff_code &&
          staff_name == o.staff_name &&
          credit_division == o.credit_division &&
          payment_count == o.payment_count &&
          slip_number == o.slip_number &&
          cancel_slip_number == o.cancel_slip_number &&
          auth_number == o.auth_number &&
          auth_date == o.auth_date &&
          card_company == o.card_company &&
          denomination == o.denomination &&
          memo == o.memo &&
          receipt_memo == o.receipt_memo &&
          carriage == o.carriage &&
          commission == o.commission &&
          guest_numbers == o.guest_numbers &&
          guest_numbers_male == o.guest_numbers_male &&
          guest_numbers_female == o.guest_numbers_female &&
          guest_numbers_unknown == o.guest_numbers_unknown &&
          enter_date_time == o.enter_date_time &&
          tax_free_sales_division == o.tax_free_sales_division &&
          net_tax_free_general_tax_include == o.net_tax_free_general_tax_include &&
          net_tax_free_general_tax_exclude == o.net_tax_free_general_tax_exclude &&
          net_tax_free_consumable_tax_include == o.net_tax_free_consumable_tax_include &&
          net_tax_free_consumable_tax_exclude == o.net_tax_free_consumable_tax_exclude &&
          tags == o.tags &&
          point_giving_division == o.point_giving_division &&
          point_giving_unit_price == o.point_giving_unit_price &&
          point_giving_unit == o.point_giving_unit &&
          point_spend_division == o.point_spend_division &&
          mileage_division == o.mileage_division &&
          mileage_label == o.mileage_label &&
          customer_pin_code == o.customer_pin_code &&
          return_sales == o.return_sales &&
          dispose_division == o.dispose_division &&
          dispose_server_transaction_head_id == o.dispose_server_transaction_head_id &&
          cancel_date_time == o.cancel_date_time &&
          sell_division == o.sell_division &&
          tax_rate == o.tax_rate &&
          tax_rounding == o.tax_rounding &&
          discount_rounding_division == o.discount_rounding_division &&
          transaction_uuid == o.transaction_uuid &&
          exchange_ticket_no == o.exchange_ticket_no &&
          gift_receipt_valid_days == o.gift_receipt_valid_days &&
          upd_date_time == o.upd_date_time &&
          layaway == o.layaway &&
          layaway_pick_up == o.layaway_pick_up
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [transaction_head_id, transaction_date_time, transaction_head_division, cancel_division, unit_non_discountsubtotal, unit_discountsubtotal, unit_staff_discountsubtotal, unit_bargain_discountsubtotal, subtotal, subtotal_for_discount, subtotal_discount_price, subtotal_discount_rate, subtotal_discount_division, point_discount, total, tax_include, tax_exclude, rounding_division, rounding_price, cash_total, credit_total, deposit, deposit_cash, deposit_credit, change, tip_cash, tip_credit, amount, return_amount, cost_total, sales_head_division, in_tax_sales_total, out_tax_sales_total, non_tax_sales_total, non_sales_target_total, non_sales_target_in_tax_total, non_sales_target_out_tax_total, non_sales_target_tax_free_total, non_sales_target_cost_total, non_sales_target_amount, non_sales_target_return_amount, new_point, spend_point, point, total_point, current_mile, earn_mile, total_mile, adjustment_mile, adjustment_mile_division, adjustment_mile_value, store_id, store_code, terminal_id, customer_id, customer_code, terminal_tran_id, terminal_tran_date_time, sum_division, adjustment_date_time, sum_date, customer_rank, customer_group_id, customer_group_id2, customer_group_id3, customer_group_id4, customer_group_id5, staff_id, staff_code, staff_name, credit_division, payment_count, slip_number, cancel_slip_number, auth_number, auth_date, card_company, denomination, memo, receipt_memo, carriage, commission, guest_numbers, guest_numbers_male, guest_numbers_female, guest_numbers_unknown, enter_date_time, tax_free_sales_division, net_tax_free_general_tax_include, net_tax_free_general_tax_exclude, net_tax_free_consumable_tax_include, net_tax_free_consumable_tax_exclude, tags, point_giving_division, point_giving_unit_price, point_giving_unit, point_spend_division, mileage_division, mileage_label, customer_pin_code, return_sales, dispose_division, dispose_server_transaction_head_id, cancel_date_time, sell_division, tax_rate, tax_rounding, discount_rounding_division, transaction_uuid, exchange_ticket_no, gift_receipt_valid_days, upd_date_time, layaway, layaway_pick_up].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
