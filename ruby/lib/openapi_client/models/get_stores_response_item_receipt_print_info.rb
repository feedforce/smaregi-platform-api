=begin
#スマレジ

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.1

=end

require 'date'
require 'time'

module OpenapiClient
  class GetStoresResponseItemReceiptPrintInfo
    attr_accessor :store_id

    attr_accessor :header

    attr_accessor :footer

    attr_accessor :receipt_tax_office_stamp_comment

    attr_accessor :tax_office_name

    attr_accessor :air_print_logo

    attr_accessor :advertisement_image

    attr_accessor :gift_receipt_image

    attr_accessor :gift_receipt_note

    attr_accessor :discount_receipt_header

    attr_accessor :discount_receipt_footer

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'store_id' => :'storeId',
        :'header' => :'header',
        :'footer' => :'footer',
        :'receipt_tax_office_stamp_comment' => :'receiptTaxOfficeStampComment',
        :'tax_office_name' => :'taxOfficeName',
        :'air_print_logo' => :'airPrintLogo',
        :'advertisement_image' => :'advertisementImage',
        :'gift_receipt_image' => :'giftReceiptImage',
        :'gift_receipt_note' => :'giftReceiptNote',
        :'discount_receipt_header' => :'discountReceiptHeader',
        :'discount_receipt_footer' => :'discountReceiptFooter'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'store_id' => :'String',
        :'header' => :'String',
        :'footer' => :'String',
        :'receipt_tax_office_stamp_comment' => :'String',
        :'tax_office_name' => :'String',
        :'air_print_logo' => :'String',
        :'advertisement_image' => :'String',
        :'gift_receipt_image' => :'String',
        :'gift_receipt_note' => :'String',
        :'discount_receipt_header' => :'String',
        :'discount_receipt_footer' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::GetStoresResponseItemReceiptPrintInfo` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::GetStoresResponseItemReceiptPrintInfo`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'store_id')
        self.store_id = attributes[:'store_id']
      end

      if attributes.key?(:'header')
        self.header = attributes[:'header']
      end

      if attributes.key?(:'footer')
        self.footer = attributes[:'footer']
      end

      if attributes.key?(:'receipt_tax_office_stamp_comment')
        self.receipt_tax_office_stamp_comment = attributes[:'receipt_tax_office_stamp_comment']
      end

      if attributes.key?(:'tax_office_name')
        self.tax_office_name = attributes[:'tax_office_name']
      end

      if attributes.key?(:'air_print_logo')
        self.air_print_logo = attributes[:'air_print_logo']
      end

      if attributes.key?(:'advertisement_image')
        self.advertisement_image = attributes[:'advertisement_image']
      end

      if attributes.key?(:'gift_receipt_image')
        self.gift_receipt_image = attributes[:'gift_receipt_image']
      end

      if attributes.key?(:'gift_receipt_note')
        self.gift_receipt_note = attributes[:'gift_receipt_note']
      end

      if attributes.key?(:'discount_receipt_header')
        self.discount_receipt_header = attributes[:'discount_receipt_header']
      end

      if attributes.key?(:'discount_receipt_footer')
        self.discount_receipt_footer = attributes[:'discount_receipt_footer']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@store_id.nil? && @store_id.to_s.length < 1
        invalid_properties.push('invalid value for "store_id", the character length must be great than or equal to 1.')
      end

      if !@header.nil? && @header.to_s.length < 1
        invalid_properties.push('invalid value for "header", the character length must be great than or equal to 1.')
      end

      if !@footer.nil? && @footer.to_s.length < 1
        invalid_properties.push('invalid value for "footer", the character length must be great than or equal to 1.')
      end

      if !@receipt_tax_office_stamp_comment.nil? && @receipt_tax_office_stamp_comment.to_s.length < 1
        invalid_properties.push('invalid value for "receipt_tax_office_stamp_comment", the character length must be great than or equal to 1.')
      end

      if !@tax_office_name.nil? && @tax_office_name.to_s.length < 1
        invalid_properties.push('invalid value for "tax_office_name", the character length must be great than or equal to 1.')
      end

      if !@air_print_logo.nil? && @air_print_logo.to_s.length < 1
        invalid_properties.push('invalid value for "air_print_logo", the character length must be great than or equal to 1.')
      end

      if !@advertisement_image.nil? && @advertisement_image.to_s.length < 1
        invalid_properties.push('invalid value for "advertisement_image", the character length must be great than or equal to 1.')
      end

      if !@gift_receipt_image.nil? && @gift_receipt_image.to_s.length < 1
        invalid_properties.push('invalid value for "gift_receipt_image", the character length must be great than or equal to 1.')
      end

      if !@gift_receipt_note.nil? && @gift_receipt_note.to_s.length < 1
        invalid_properties.push('invalid value for "gift_receipt_note", the character length must be great than or equal to 1.')
      end

      if !@discount_receipt_header.nil? && @discount_receipt_header.to_s.length < 1
        invalid_properties.push('invalid value for "discount_receipt_header", the character length must be great than or equal to 1.')
      end

      if !@discount_receipt_footer.nil? && @discount_receipt_footer.to_s.length < 1
        invalid_properties.push('invalid value for "discount_receipt_footer", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@store_id.nil? && @store_id.to_s.length < 1
      return false if !@header.nil? && @header.to_s.length < 1
      return false if !@footer.nil? && @footer.to_s.length < 1
      return false if !@receipt_tax_office_stamp_comment.nil? && @receipt_tax_office_stamp_comment.to_s.length < 1
      return false if !@tax_office_name.nil? && @tax_office_name.to_s.length < 1
      return false if !@air_print_logo.nil? && @air_print_logo.to_s.length < 1
      return false if !@advertisement_image.nil? && @advertisement_image.to_s.length < 1
      return false if !@gift_receipt_image.nil? && @gift_receipt_image.to_s.length < 1
      return false if !@gift_receipt_note.nil? && @gift_receipt_note.to_s.length < 1
      return false if !@discount_receipt_header.nil? && @discount_receipt_header.to_s.length < 1
      return false if !@discount_receipt_footer.nil? && @discount_receipt_footer.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] store_id Value to be assigned
    def store_id=(store_id)
      if !store_id.nil? && store_id.to_s.length < 1
        fail ArgumentError, 'invalid value for "store_id", the character length must be great than or equal to 1.'
      end

      @store_id = store_id
    end

    # Custom attribute writer method with validation
    # @param [Object] header Value to be assigned
    def header=(header)
      if !header.nil? && header.to_s.length < 1
        fail ArgumentError, 'invalid value for "header", the character length must be great than or equal to 1.'
      end

      @header = header
    end

    # Custom attribute writer method with validation
    # @param [Object] footer Value to be assigned
    def footer=(footer)
      if !footer.nil? && footer.to_s.length < 1
        fail ArgumentError, 'invalid value for "footer", the character length must be great than or equal to 1.'
      end

      @footer = footer
    end

    # Custom attribute writer method with validation
    # @param [Object] receipt_tax_office_stamp_comment Value to be assigned
    def receipt_tax_office_stamp_comment=(receipt_tax_office_stamp_comment)
      if !receipt_tax_office_stamp_comment.nil? && receipt_tax_office_stamp_comment.to_s.length < 1
        fail ArgumentError, 'invalid value for "receipt_tax_office_stamp_comment", the character length must be great than or equal to 1.'
      end

      @receipt_tax_office_stamp_comment = receipt_tax_office_stamp_comment
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_office_name Value to be assigned
    def tax_office_name=(tax_office_name)
      if !tax_office_name.nil? && tax_office_name.to_s.length < 1
        fail ArgumentError, 'invalid value for "tax_office_name", the character length must be great than or equal to 1.'
      end

      @tax_office_name = tax_office_name
    end

    # Custom attribute writer method with validation
    # @param [Object] air_print_logo Value to be assigned
    def air_print_logo=(air_print_logo)
      if !air_print_logo.nil? && air_print_logo.to_s.length < 1
        fail ArgumentError, 'invalid value for "air_print_logo", the character length must be great than or equal to 1.'
      end

      @air_print_logo = air_print_logo
    end

    # Custom attribute writer method with validation
    # @param [Object] advertisement_image Value to be assigned
    def advertisement_image=(advertisement_image)
      if !advertisement_image.nil? && advertisement_image.to_s.length < 1
        fail ArgumentError, 'invalid value for "advertisement_image", the character length must be great than or equal to 1.'
      end

      @advertisement_image = advertisement_image
    end

    # Custom attribute writer method with validation
    # @param [Object] gift_receipt_image Value to be assigned
    def gift_receipt_image=(gift_receipt_image)
      if !gift_receipt_image.nil? && gift_receipt_image.to_s.length < 1
        fail ArgumentError, 'invalid value for "gift_receipt_image", the character length must be great than or equal to 1.'
      end

      @gift_receipt_image = gift_receipt_image
    end

    # Custom attribute writer method with validation
    # @param [Object] gift_receipt_note Value to be assigned
    def gift_receipt_note=(gift_receipt_note)
      if !gift_receipt_note.nil? && gift_receipt_note.to_s.length < 1
        fail ArgumentError, 'invalid value for "gift_receipt_note", the character length must be great than or equal to 1.'
      end

      @gift_receipt_note = gift_receipt_note
    end

    # Custom attribute writer method with validation
    # @param [Object] discount_receipt_header Value to be assigned
    def discount_receipt_header=(discount_receipt_header)
      if !discount_receipt_header.nil? && discount_receipt_header.to_s.length < 1
        fail ArgumentError, 'invalid value for "discount_receipt_header", the character length must be great than or equal to 1.'
      end

      @discount_receipt_header = discount_receipt_header
    end

    # Custom attribute writer method with validation
    # @param [Object] discount_receipt_footer Value to be assigned
    def discount_receipt_footer=(discount_receipt_footer)
      if !discount_receipt_footer.nil? && discount_receipt_footer.to_s.length < 1
        fail ArgumentError, 'invalid value for "discount_receipt_footer", the character length must be great than or equal to 1.'
      end

      @discount_receipt_footer = discount_receipt_footer
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          store_id == o.store_id &&
          header == o.header &&
          footer == o.footer &&
          receipt_tax_office_stamp_comment == o.receipt_tax_office_stamp_comment &&
          tax_office_name == o.tax_office_name &&
          air_print_logo == o.air_print_logo &&
          advertisement_image == o.advertisement_image &&
          gift_receipt_image == o.gift_receipt_image &&
          gift_receipt_note == o.gift_receipt_note &&
          discount_receipt_header == o.discount_receipt_header &&
          discount_receipt_footer == o.discount_receipt_footer
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [store_id, header, footer, receipt_tax_office_stamp_comment, tax_office_name, air_print_logo, advertisement_image, gift_receipt_image, gift_receipt_note, discount_receipt_header, discount_receipt_footer].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
