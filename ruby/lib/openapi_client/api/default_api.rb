=begin
#スマレジ

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.1

=end

require 'cgi'

module OpenapiClient
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # 会員情報を登録します。
    # @param contract_id [String] 契約id
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCustomers] :create_customers 
    # @return [CustomersResponseOfCreate]
    def create_customers(contract_id, opts = {})
      data, _status_code, _headers = create_customers_with_http_info(contract_id, opts)
      data
    end

    # 会員情報を登録します。
    # @param contract_id [String] 契約id
    # @param [Hash] opts the optional parameters
    # @option opts [CreateCustomers] :create_customers 
    # @return [Array<(CustomersResponseOfCreate, Integer, Hash)>] CustomersResponseOfCreate data, response status code and response headers
    def create_customers_with_http_info(contract_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_customers ...'
      end
      # verify the required parameter 'contract_id' is set
      if @api_client.config.client_side_validation && contract_id.nil?
        fail ArgumentError, "Missing the required parameter 'contract_id' when calling DefaultApi.create_customers"
      end
      # resource path
      local_var_path = '/{contract_id}/pos/customers'.sub('{' + 'contract_id' + '}', CGI.escape(contract_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_customers'])

      # return_type
      return_type = opts[:debug_return_type] || 'CustomersResponseOfCreate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken']

      new_options = opts.merge(
        :operation => :"DefaultApi.create_customers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_customers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 指定されたクーポンを削除します。 
    # @param contract_id [String] 契約id
    # @param coupon_id [String] クーポンid
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_coupons(contract_id, coupon_id, opts = {})
      delete_coupons_with_http_info(contract_id, coupon_id, opts)
      nil
    end

    # 指定されたクーポンを削除します。 
    # @param contract_id [String] 契約id
    # @param coupon_id [String] クーポンid
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_coupons_with_http_info(contract_id, coupon_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_coupons ...'
      end
      # verify the required parameter 'contract_id' is set
      if @api_client.config.client_side_validation && contract_id.nil?
        fail ArgumentError, "Missing the required parameter 'contract_id' when calling DefaultApi.delete_coupons"
      end
      # verify the required parameter 'coupon_id' is set
      if @api_client.config.client_side_validation && coupon_id.nil?
        fail ArgumentError, "Missing the required parameter 'coupon_id' when calling DefaultApi.delete_coupons"
      end
      # resource path
      local_var_path = '/{contract_id}/pos/coupons/{coupon_id}'.sub('{' + 'contract_id' + '}', CGI.escape(contract_id.to_s)).sub('{' + 'coupon_id' + '}', CGI.escape(coupon_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_coupons",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_coupons\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 会員情報を削除します。
    # @param contract_id [String] 契約id
    # @param customer_id [String] 顧客id
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_customers(contract_id, customer_id, opts = {})
      delete_customers_with_http_info(contract_id, customer_id, opts)
      nil
    end

    # 会員情報を削除します。
    # @param contract_id [String] 契約id
    # @param customer_id [String] 顧客id
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_customers_with_http_info(contract_id, customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_customers ...'
      end
      # verify the required parameter 'contract_id' is set
      if @api_client.config.client_side_validation && contract_id.nil?
        fail ArgumentError, "Missing the required parameter 'contract_id' when calling DefaultApi.delete_customers"
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling DefaultApi.delete_customers"
      end
      # resource path
      local_var_path = '/{contract_id}/pos/customers/{customer_id}'.sub('{' + 'contract_id' + '}', CGI.escape(contract_id.to_s)).sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken']

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_customers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_customers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Your GET endpoint
    # クーポンの一覧を取得します。
    # @param contract_id [String] 契約id
    # @param [Hash] opts the optional parameters
    # @return [Array<Coupon>]
    def get_coupons(contract_id, opts = {})
      data, _status_code, _headers = get_coupons_with_http_info(contract_id, opts)
      data
    end

    # Your GET endpoint
    # クーポンの一覧を取得します。
    # @param contract_id [String] 契約id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Coupon>, Integer, Hash)>] Array<Coupon> data, response status code and response headers
    def get_coupons_with_http_info(contract_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_coupons ...'
      end
      # verify the required parameter 'contract_id' is set
      if @api_client.config.client_side_validation && contract_id.nil?
        fail ArgumentError, "Missing the required parameter 'contract_id' when calling DefaultApi.get_coupons"
      end
      # resource path
      local_var_path = '/{contract_id}/pos/coupons'.sub('{' + 'contract_id' + '}', CGI.escape(contract_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Coupon>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_coupons",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_coupons\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 会員ポイント一覧取得
    # 会員ポイント情報一覧を取得します。 参照にあたりポイント有効期限を参照し、ポイント残高がありかつ期限が切れていれば期限切れ分のポイント失効処理を行ってから返します。
    # @param contract_id [String] 契約id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 一度に返すアイテム数 (上限 1000)
    # @option opts [Integer] :page ページ
    # @option opts [String] :customer_id 顧客id
    # @return [Array<GetCustomerPointListItem>]
    def get_customer_point_list(contract_id, opts = {})
      data, _status_code, _headers = get_customer_point_list_with_http_info(contract_id, opts)
      data
    end

    # 会員ポイント一覧取得
    # 会員ポイント情報一覧を取得します。 参照にあたりポイント有効期限を参照し、ポイント残高がありかつ期限が切れていれば期限切れ分のポイント失効処理を行ってから返します。
    # @param contract_id [String] 契約id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 一度に返すアイテム数 (上限 1000)
    # @option opts [Integer] :page ページ
    # @option opts [String] :customer_id 顧客id
    # @return [Array<(Array<GetCustomerPointListItem>, Integer, Hash)>] Array<GetCustomerPointListItem> data, response status code and response headers
    def get_customer_point_list_with_http_info(contract_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_customer_point_list ...'
      end
      # verify the required parameter 'contract_id' is set
      if @api_client.config.client_side_validation && contract_id.nil?
        fail ArgumentError, "Missing the required parameter 'contract_id' when calling DefaultApi.get_customer_point_list"
      end
      # resource path
      local_var_path = '/{contract_id}/pos/customers/point'.sub('{' + 'contract_id' + '}', CGI.escape(contract_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'customer_id'] = opts[:'customer_id'] if !opts[:'customer_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetCustomerPointListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_customer_point_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_customer_point_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 会員必須項目設定取得
    # @param contract_id [String] 契約id
    # @param [Hash] opts the optional parameters
    # @return [Array<GetCustomerRequiredColumnSettingResponse>]
    def get_customer_required_column_setting(contract_id, opts = {})
      data, _status_code, _headers = get_customer_required_column_setting_with_http_info(contract_id, opts)
      data
    end

    # 会員必須項目設定取得
    # @param contract_id [String] 契約id
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<GetCustomerRequiredColumnSettingResponse>, Integer, Hash)>] Array<GetCustomerRequiredColumnSettingResponse> data, response status code and response headers
    def get_customer_required_column_setting_with_http_info(contract_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_customer_required_column_setting ...'
      end
      # verify the required parameter 'contract_id' is set
      if @api_client.config.client_side_validation && contract_id.nil?
        fail ArgumentError, "Missing the required parameter 'contract_id' when calling DefaultApi.get_customer_required_column_setting"
      end
      # resource path
      local_var_path = '/{contract_id}/pos/customer_required_column_setting'.sub('{' + 'contract_id' + '}', CGI.escape(contract_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetCustomerRequiredColumnSettingResponse>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_customer_required_column_setting",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_customer_required_column_setting\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 会員情報一覧を取得します。
    # @param contract_id [String] 契約id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 一度に返すアイテム数 (上限 1000)
    # @option opts [Integer] :page ページ
    # @option opts [String] :customer_code 顧客コード
    # @return [Array<GetCustomersItem>]
    def get_customers(contract_id, opts = {})
      data, _status_code, _headers = get_customers_with_http_info(contract_id, opts)
      data
    end

    # 会員情報一覧を取得します。
    # @param contract_id [String] 契約id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 一度に返すアイテム数 (上限 1000)
    # @option opts [Integer] :page ページ
    # @option opts [String] :customer_code 顧客コード
    # @return [Array<(Array<GetCustomersItem>, Integer, Hash)>] Array<GetCustomersItem> data, response status code and response headers
    def get_customers_with_http_info(contract_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_customers ...'
      end
      # verify the required parameter 'contract_id' is set
      if @api_client.config.client_side_validation && contract_id.nil?
        fail ArgumentError, "Missing the required parameter 'contract_id' when calling DefaultApi.get_customers"
      end
      # resource path
      local_var_path = '/{contract_id}/pos/customers'.sub('{' + 'contract_id' + '}', CGI.escape(contract_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'customer_code'] = opts[:'customer_code'] if !opts[:'customer_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetCustomersItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_customers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_customers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Your GET endpoint
    # @param contract_id [String] 契約id
    # @param layaway_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [WithDetails] :with_details 取引明細情報を付加するか(全項目付加する場合はall, 一部項目を付加する場合はsummary, しない場合はnone) (default to 'none')
    # @option opts [WithEnum] :with_store 店舗情報を付加するか(付加する場合はall, しない場合はnone) (default to 'none')
    # @option opts [WithEnum] :with_customer 会員情報を付加するか(付加する場合はall, しない場合はnone) (default to 'none')
    # @return [GetLayawayById]
    def get_layaway_by_id(contract_id, layaway_id, opts = {})
      data, _status_code, _headers = get_layaway_by_id_with_http_info(contract_id, layaway_id, opts)
      data
    end

    # Your GET endpoint
    # @param contract_id [String] 契約id
    # @param layaway_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [WithDetails] :with_details 取引明細情報を付加するか(全項目付加する場合はall, 一部項目を付加する場合はsummary, しない場合はnone)
    # @option opts [WithEnum] :with_store 店舗情報を付加するか(付加する場合はall, しない場合はnone)
    # @option opts [WithEnum] :with_customer 会員情報を付加するか(付加する場合はall, しない場合はnone)
    # @return [Array<(GetLayawayById, Integer, Hash)>] GetLayawayById data, response status code and response headers
    def get_layaway_by_id_with_http_info(contract_id, layaway_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_layaway_by_id ...'
      end
      # verify the required parameter 'contract_id' is set
      if @api_client.config.client_side_validation && contract_id.nil?
        fail ArgumentError, "Missing the required parameter 'contract_id' when calling DefaultApi.get_layaway_by_id"
      end
      # verify the required parameter 'layaway_id' is set
      if @api_client.config.client_side_validation && layaway_id.nil?
        fail ArgumentError, "Missing the required parameter 'layaway_id' when calling DefaultApi.get_layaway_by_id"
      end
      # resource path
      local_var_path = '/{contract_id}/pos/transactions/layaways/{layaway_id}'.sub('{' + 'contract_id' + '}', CGI.escape(contract_id.to_s)).sub('{' + 'layaway_id' + '}', CGI.escape(layaway_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'with_details'] = opts[:'with_details'] if !opts[:'with_details'].nil?
      query_params[:'with_store'] = opts[:'with_store'] if !opts[:'with_store'].nil?
      query_params[:'with_customer'] = opts[:'with_customer'] if !opts[:'with_customer'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetLayawayById'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_layaway_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_layaway_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 取置き一覧を取得します。
    # @param contract_id [String] 契約id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sum_date 締め日 [YYYY-MM-DD]
    # @option opts [WithEnum] :with_layaway 取置き情報を付加するか(付加する場合はall, しない場合はnone) (default to 'none')
    # @return [Array<GetLayawayListItem>]
    def get_layaway_list(contract_id, opts = {})
      data, _status_code, _headers = get_layaway_list_with_http_info(contract_id, opts)
      data
    end

    # 取置き一覧を取得します。
    # @param contract_id [String] 契約id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sum_date 締め日 [YYYY-MM-DD]
    # @option opts [WithEnum] :with_layaway 取置き情報を付加するか(付加する場合はall, しない場合はnone)
    # @return [Array<(Array<GetLayawayListItem>, Integer, Hash)>] Array<GetLayawayListItem> data, response status code and response headers
    def get_layaway_list_with_http_info(contract_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_layaway_list ...'
      end
      # verify the required parameter 'contract_id' is set
      if @api_client.config.client_side_validation && contract_id.nil?
        fail ArgumentError, "Missing the required parameter 'contract_id' when calling DefaultApi.get_layaway_list"
      end
      # resource path
      local_var_path = '/{contract_id}/pos/transactions/layaways'.sub('{' + 'contract_id' + '}', CGI.escape(contract_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sum_date'] = opts[:'sum_date'] if !opts[:'sum_date'].nil?
      query_params[:'with_layaway'] = opts[:'with_layaway'] if !opts[:'with_layaway'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetLayawayListItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_layaway_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_layaway_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 店舗一覧取得
    # 店舗情報一覧を取得します。 
    # @param contract_id [String] 契約id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 一度に返すアイテム数 (上限 1000)
    # @option opts [WithEnum] :with_point_condition ポイント情報を付加するか(付加する場合はall, しない場合はnone) (default to 'none')
    # @return [Array<GetStoresResponseItem>]
    def get_stores(contract_id, opts = {})
      data, _status_code, _headers = get_stores_with_http_info(contract_id, opts)
      data
    end

    # 店舗一覧取得
    # 店舗情報一覧を取得します。 
    # @param contract_id [String] 契約id
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit 一度に返すアイテム数 (上限 1000)
    # @option opts [WithEnum] :with_point_condition ポイント情報を付加するか(付加する場合はall, しない場合はnone)
    # @return [Array<(Array<GetStoresResponseItem>, Integer, Hash)>] Array<GetStoresResponseItem> data, response status code and response headers
    def get_stores_with_http_info(contract_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_stores ...'
      end
      # verify the required parameter 'contract_id' is set
      if @api_client.config.client_side_validation && contract_id.nil?
        fail ArgumentError, "Missing the required parameter 'contract_id' when calling DefaultApi.get_stores"
      end
      # resource path
      local_var_path = '/{contract_id}/pos/stores'.sub('{' + 'contract_id' + '}', CGI.escape(contract_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'with_point_condition'] = opts[:'with_point_condition'] if !opts[:'with_point_condition'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetStoresResponseItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_stores",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_stores\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 取引情報一覧を取得します。
    # @param contract_id [String] 契約id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sum_date 締め日 [YYYY-MM-DD]
    # @option opts [WithEnum] :with_layaway 取置き情報を付加するか(付加する場合はall, しない場合はnone) (default to 'none')
    # @option opts [Integer] :limit 一度に返すアイテム数 (上限 1000)
    # @option opts [Integer] :page ページ
    # @option opts [String] :upd_date_time_to 更新日時(To)：登録時・更新時の日時。[YYYY-MM-DDThh:mm:ssTZD]
    # @option opts [String] :upd_date_time_from 更新日時(From)：登録時・更新時の日時。[YYYY-MM-DDThh:mm:ssTZD]
    # @option opts [String] :customer_code 会員コード
    # @option opts [TransactionHeadDivision] :transaction_head_division 
    # @option opts [Sort] :sort 
    # @option opts [String] :terminal_tran_date_time_from 端末取引日時(From)：端末で設定された取引日時。[YYYY-MM-DDThh:mm:ssTZD]
    # @option opts [String] :terminal_tran_date_time_to 端末取引日時(To)：端末で設定された取引日時。[YYYY-MM-DDThh:mm:ssTZD]
    # @option opts [Integer] :store_id 店舗ID
    # @option opts [String] :transaction_head_id_to 取引ID(To)
    # @option opts [String] :transaction_head_id_from 取引ID(From)
    # @return [Array<GetTransactionItem>]
    def get_transaction(contract_id, opts = {})
      data, _status_code, _headers = get_transaction_with_http_info(contract_id, opts)
      data
    end

    # 取引情報一覧を取得します。
    # @param contract_id [String] 契約id
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sum_date 締め日 [YYYY-MM-DD]
    # @option opts [WithEnum] :with_layaway 取置き情報を付加するか(付加する場合はall, しない場合はnone)
    # @option opts [Integer] :limit 一度に返すアイテム数 (上限 1000)
    # @option opts [Integer] :page ページ
    # @option opts [String] :upd_date_time_to 更新日時(To)：登録時・更新時の日時。[YYYY-MM-DDThh:mm:ssTZD]
    # @option opts [String] :upd_date_time_from 更新日時(From)：登録時・更新時の日時。[YYYY-MM-DDThh:mm:ssTZD]
    # @option opts [String] :customer_code 会員コード
    # @option opts [TransactionHeadDivision] :transaction_head_division 
    # @option opts [Sort] :sort 
    # @option opts [String] :terminal_tran_date_time_from 端末取引日時(From)：端末で設定された取引日時。[YYYY-MM-DDThh:mm:ssTZD]
    # @option opts [String] :terminal_tran_date_time_to 端末取引日時(To)：端末で設定された取引日時。[YYYY-MM-DDThh:mm:ssTZD]
    # @option opts [Integer] :store_id 店舗ID
    # @option opts [String] :transaction_head_id_to 取引ID(To)
    # @option opts [String] :transaction_head_id_from 取引ID(From)
    # @return [Array<(Array<GetTransactionItem>, Integer, Hash)>] Array<GetTransactionItem> data, response status code and response headers
    def get_transaction_with_http_info(contract_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_transaction ...'
      end
      # verify the required parameter 'contract_id' is set
      if @api_client.config.client_side_validation && contract_id.nil?
        fail ArgumentError, "Missing the required parameter 'contract_id' when calling DefaultApi.get_transaction"
      end
      # resource path
      local_var_path = '/{contract_id}/pos/transactions'.sub('{' + 'contract_id' + '}', CGI.escape(contract_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sum_date'] = opts[:'sum_date'] if !opts[:'sum_date'].nil?
      query_params[:'with_layaway'] = opts[:'with_layaway'] if !opts[:'with_layaway'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'upd_date_time-to'] = opts[:'upd_date_time_to'] if !opts[:'upd_date_time_to'].nil?
      query_params[:'upd_date_time-from'] = opts[:'upd_date_time_from'] if !opts[:'upd_date_time_from'].nil?
      query_params[:'customer_code'] = opts[:'customer_code'] if !opts[:'customer_code'].nil?
      query_params[:'transaction_head_division'] = opts[:'transaction_head_division'] if !opts[:'transaction_head_division'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'terminal_tran_date_time-from'] = opts[:'terminal_tran_date_time_from'] if !opts[:'terminal_tran_date_time_from'].nil?
      query_params[:'terminal_tran_date_time-to'] = opts[:'terminal_tran_date_time_to'] if !opts[:'terminal_tran_date_time_to'].nil?
      query_params[:'store_id'] = opts[:'store_id'] if !opts[:'store_id'].nil?
      query_params[:'transaction_head_id-to'] = opts[:'transaction_head_id_to'] if !opts[:'transaction_head_id_to'].nil?
      query_params[:'transaction_head_id-from'] = opts[:'transaction_head_id_from'] if !opts[:'transaction_head_id_from'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetTransactionItem>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_transaction",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 取引情報を取得します。
    # @param contract_id [String] 契約id
    # @param transaction_id [String] 取引id
    # @param [Hash] opts the optional parameters
    # @option opts [WithEnum] :with_coupons クーポン情報を付加するか(付加する場合はall, しない場合はnone) (default to 'none')
    # @option opts [WithDetails] :with_details 取引明細情報を付加するか(全項目付加する場合はall, 一部項目を付加する場合はsummary, しない場合はnone) (default to 'none')
    # @option opts [WithEnum] :with_store 店舗情報を付加するか(付加する場合はall, しない場合はnone) (default to 'none')
    # @option opts [WithEnum] :with_customer 会員情報を付加するか(付加する場合はall, しない場合はnone) (default to 'none')
    # @return [GetTransactionId]
    def get_transaction_id(contract_id, transaction_id, opts = {})
      data, _status_code, _headers = get_transaction_id_with_http_info(contract_id, transaction_id, opts)
      data
    end

    # 取引情報を取得します。
    # @param contract_id [String] 契約id
    # @param transaction_id [String] 取引id
    # @param [Hash] opts the optional parameters
    # @option opts [WithEnum] :with_coupons クーポン情報を付加するか(付加する場合はall, しない場合はnone)
    # @option opts [WithDetails] :with_details 取引明細情報を付加するか(全項目付加する場合はall, 一部項目を付加する場合はsummary, しない場合はnone)
    # @option opts [WithEnum] :with_store 店舗情報を付加するか(付加する場合はall, しない場合はnone)
    # @option opts [WithEnum] :with_customer 会員情報を付加するか(付加する場合はall, しない場合はnone)
    # @return [Array<(GetTransactionId, Integer, Hash)>] GetTransactionId data, response status code and response headers
    def get_transaction_id_with_http_info(contract_id, transaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_transaction_id ...'
      end
      # verify the required parameter 'contract_id' is set
      if @api_client.config.client_side_validation && contract_id.nil?
        fail ArgumentError, "Missing the required parameter 'contract_id' when calling DefaultApi.get_transaction_id"
      end
      # verify the required parameter 'transaction_id' is set
      if @api_client.config.client_side_validation && transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_id' when calling DefaultApi.get_transaction_id"
      end
      # resource path
      local_var_path = '/{contract_id}/pos/transactions/{transaction_id}'.sub('{' + 'contract_id' + '}', CGI.escape(contract_id.to_s)).sub('{' + 'transaction_id' + '}', CGI.escape(transaction_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'with_coupons'] = opts[:'with_coupons'] if !opts[:'with_coupons'].nil?
      query_params[:'with_details'] = opts[:'with_details'] if !opts[:'with_details'].nil?
      query_params[:'with_store'] = opts[:'with_store'] if !opts[:'with_store'].nil?
      query_params[:'with_customer'] = opts[:'with_customer'] if !opts[:'with_customer'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTransactionId'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken']

      new_options = opts.merge(
        :operation => :"DefaultApi.get_transaction_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_transaction_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # クーポンを登録します。 
    # @param contract_id [String] 契約id
    # @param post_create_coupons [PostCreateCoupons] 
    # @param [Hash] opts the optional parameters
    # @return [Coupon]
    def post_create_coupons(contract_id, post_create_coupons, opts = {})
      data, _status_code, _headers = post_create_coupons_with_http_info(contract_id, post_create_coupons, opts)
      data
    end

    # クーポンを登録します。 
    # @param contract_id [String] 契約id
    # @param post_create_coupons [PostCreateCoupons] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Coupon, Integer, Hash)>] Coupon data, response status code and response headers
    def post_create_coupons_with_http_info(contract_id, post_create_coupons, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.post_create_coupons ...'
      end
      # verify the required parameter 'contract_id' is set
      if @api_client.config.client_side_validation && contract_id.nil?
        fail ArgumentError, "Missing the required parameter 'contract_id' when calling DefaultApi.post_create_coupons"
      end
      # verify the required parameter 'post_create_coupons' is set
      if @api_client.config.client_side_validation && post_create_coupons.nil?
        fail ArgumentError, "Missing the required parameter 'post_create_coupons' when calling DefaultApi.post_create_coupons"
      end
      # resource path
      local_var_path = '/{contract_id}/pos/coupons'.sub('{' + 'contract_id' + '}', CGI.escape(contract_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(post_create_coupons)

      # return_type
      return_type = opts[:debug_return_type] || 'Coupon'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken']

      new_options = opts.merge(
        :operation => :"DefaultApi.post_create_coupons",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#post_create_coupons\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 会員ポイント更新
    # 会員ポイント情報を更新します。 ポイントおよびマイルは、入力された値と同じになるよう更新します。
    # @param contract_id [String] 契約id
    # @param customer_id [String] 顧客id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateCustomerPointRequest] :update_customer_point_request 
    # @return [UpdateCustomerPointResponse]
    def update_customer_point(contract_id, customer_id, opts = {})
      data, _status_code, _headers = update_customer_point_with_http_info(contract_id, customer_id, opts)
      data
    end

    # 会員ポイント更新
    # 会員ポイント情報を更新します。 ポイントおよびマイルは、入力された値と同じになるよう更新します。
    # @param contract_id [String] 契約id
    # @param customer_id [String] 顧客id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateCustomerPointRequest] :update_customer_point_request 
    # @return [Array<(UpdateCustomerPointResponse, Integer, Hash)>] UpdateCustomerPointResponse data, response status code and response headers
    def update_customer_point_with_http_info(contract_id, customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_customer_point ...'
      end
      # verify the required parameter 'contract_id' is set
      if @api_client.config.client_side_validation && contract_id.nil?
        fail ArgumentError, "Missing the required parameter 'contract_id' when calling DefaultApi.update_customer_point"
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling DefaultApi.update_customer_point"
      end
      # resource path
      local_var_path = '/{contract_id}/pos/customers/{customer_id}/point'.sub('{' + 'contract_id' + '}', CGI.escape(contract_id.to_s)).sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_customer_point_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateCustomerPointResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_customer_point",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_customer_point\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 会員ポイント情報を更新します。 ポイントおよびマイルは、現在の値に対し、入力された値を加算（入力値が負の場合は減算）した値に更新します。 現在値参照にあたりポイント有効期限を参照し、ポイント残高がありかつ期限が切れていれば期限切れ分のポイント失効処理を行ってから加算を行います（失効で0になっているので減算はエラー）。
    # @param contract_id [String] 契約id
    # @param customer_id [String] 顧客id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateCustomerPointRequest] :update_customer_point_request 
    # @return [UpdateCustomerPointResponse]
    def update_customer_point_relative(contract_id, customer_id, opts = {})
      data, _status_code, _headers = update_customer_point_relative_with_http_info(contract_id, customer_id, opts)
      data
    end

    # 会員ポイント情報を更新します。 ポイントおよびマイルは、現在の値に対し、入力された値を加算（入力値が負の場合は減算）した値に更新します。 現在値参照にあたりポイント有効期限を参照し、ポイント残高がありかつ期限が切れていれば期限切れ分のポイント失効処理を行ってから加算を行います（失効で0になっているので減算はエラー）。
    # @param contract_id [String] 契約id
    # @param customer_id [String] 顧客id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateCustomerPointRequest] :update_customer_point_request 
    # @return [Array<(UpdateCustomerPointResponse, Integer, Hash)>] UpdateCustomerPointResponse data, response status code and response headers
    def update_customer_point_relative_with_http_info(contract_id, customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_customer_point_relative ...'
      end
      # verify the required parameter 'contract_id' is set
      if @api_client.config.client_side_validation && contract_id.nil?
        fail ArgumentError, "Missing the required parameter 'contract_id' when calling DefaultApi.update_customer_point_relative"
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling DefaultApi.update_customer_point_relative"
      end
      # resource path
      local_var_path = '/{contract_id}/pos/customers/{customer_id}/point/add'.sub('{' + 'contract_id' + '}', CGI.escape(contract_id.to_s)).sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_customer_point_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateCustomerPointResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_customer_point_relative",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_customer_point_relative\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param contract_id [String] 契約id
    # @param customer_id [String] 顧客id
    # @param [Hash] opts the optional parameters
    # @option opts [PatchCustomers] :patch_customers 
    # @return [CustomersResponseOfCreate]
    def update_customers(contract_id, customer_id, opts = {})
      data, _status_code, _headers = update_customers_with_http_info(contract_id, customer_id, opts)
      data
    end

    # @param contract_id [String] 契約id
    # @param customer_id [String] 顧客id
    # @param [Hash] opts the optional parameters
    # @option opts [PatchCustomers] :patch_customers 
    # @return [Array<(CustomersResponseOfCreate, Integer, Hash)>] CustomersResponseOfCreate data, response status code and response headers
    def update_customers_with_http_info(contract_id, customer_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_customers ...'
      end
      # verify the required parameter 'contract_id' is set
      if @api_client.config.client_side_validation && contract_id.nil?
        fail ArgumentError, "Missing the required parameter 'contract_id' when calling DefaultApi.update_customers"
      end
      # verify the required parameter 'customer_id' is set
      if @api_client.config.client_side_validation && customer_id.nil?
        fail ArgumentError, "Missing the required parameter 'customer_id' when calling DefaultApi.update_customers"
      end
      # resource path
      local_var_path = '/{contract_id}/pos/customers/{customer_id}'.sub('{' + 'contract_id' + '}', CGI.escape(contract_id.to_s)).sub('{' + 'customer_id' + '}', CGI.escape(customer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'patch_customers'])

      # return_type
      return_type = opts[:debug_return_type] || 'CustomersResponseOfCreate'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_customers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_customers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 店舗更新
    # 店舗情報を更新します。 
    # @param contract_id [String] 契約id
    # @param store_id [String] 店舗id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateStoreRequest] :update_store_request 
    # @return [UpdateStoreResponse]
    def update_store(contract_id, store_id, opts = {})
      data, _status_code, _headers = update_store_with_http_info(contract_id, store_id, opts)
      data
    end

    # 店舗更新
    # 店舗情報を更新します。 
    # @param contract_id [String] 契約id
    # @param store_id [String] 店舗id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateStoreRequest] :update_store_request 
    # @return [Array<(UpdateStoreResponse, Integer, Hash)>] UpdateStoreResponse data, response status code and response headers
    def update_store_with_http_info(contract_id, store_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_store ...'
      end
      # verify the required parameter 'contract_id' is set
      if @api_client.config.client_side_validation && contract_id.nil?
        fail ArgumentError, "Missing the required parameter 'contract_id' when calling DefaultApi.update_store"
      end
      # verify the required parameter 'store_id' is set
      if @api_client.config.client_side_validation && store_id.nil?
        fail ArgumentError, "Missing the required parameter 'store_id' when calling DefaultApi.update_store"
      end
      # resource path
      local_var_path = '/{contract_id}/pos/stores/{store_id}'.sub('{' + 'contract_id' + '}', CGI.escape(contract_id.to_s)).sub('{' + 'store_id' + '}', CGI.escape(store_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_store_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateStoreResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_store",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_store\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 取引会員更新
    # 取引の会員情報を更新します。 
    # @param contract_id [String] 契約id
    # @param transaction_id [String] 取引id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateTransactionForCustomerRequest] :update_transaction_for_customer_request 
    # @return [GetTransactionId]
    def update_transaction_for_customer(contract_id, transaction_id, opts = {})
      data, _status_code, _headers = update_transaction_for_customer_with_http_info(contract_id, transaction_id, opts)
      data
    end

    # 取引会員更新
    # 取引の会員情報を更新します。 
    # @param contract_id [String] 契約id
    # @param transaction_id [String] 取引id
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateTransactionForCustomerRequest] :update_transaction_for_customer_request 
    # @return [Array<(GetTransactionId, Integer, Hash)>] GetTransactionId data, response status code and response headers
    def update_transaction_for_customer_with_http_info(contract_id, transaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_transaction_for_customer ...'
      end
      # verify the required parameter 'contract_id' is set
      if @api_client.config.client_side_validation && contract_id.nil?
        fail ArgumentError, "Missing the required parameter 'contract_id' when calling DefaultApi.update_transaction_for_customer"
      end
      # verify the required parameter 'transaction_id' is set
      if @api_client.config.client_side_validation && transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_id' when calling DefaultApi.update_transaction_for_customer"
      end
      # resource path
      local_var_path = '/{contract_id}/pos/transactions/{transaction_id}/customer'.sub('{' + 'contract_id' + '}', CGI.escape(contract_id.to_s)).sub('{' + 'transaction_id' + '}', CGI.escape(transaction_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_transaction_for_customer_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'GetTransactionId'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['AccessToken']

      new_options = opts.merge(
        :operation => :"DefaultApi.update_transaction_for_customer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_transaction_for_customer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
